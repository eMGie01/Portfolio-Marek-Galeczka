
STM32_prog.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004550  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  080046d8  080046d8  000056d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004720  08004720  0000600c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004720  08004720  00005720  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004728  08004728  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004728  08004728  00005728  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800472c  0800472c  0000572c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08004730  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001cc  2000000c  0800473c  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001d8  0800473c  000061d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cb61  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002294  00000000  00000000  00012b9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a98  00000000  00000000  00014e38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000080a  00000000  00000000  000158d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025fed  00000000  00000000  000160da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dd59  00000000  00000000  0003c0c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e75a6  00000000  00000000  00049e20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001313c6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000298c  00000000  00000000  0013140c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  00133d98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080046c0 	.word	0x080046c0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080046c0 	.word	0x080046c0

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b988 	b.w	80004f0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	468e      	mov	lr, r1
 8000200:	4604      	mov	r4, r0
 8000202:	4688      	mov	r8, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d962      	bls.n	80002d4 <__udivmoddi4+0xdc>
 800020e:	fab2 f682 	clz	r6, r2
 8000212:	b14e      	cbz	r6, 8000228 <__udivmoddi4+0x30>
 8000214:	f1c6 0320 	rsb	r3, r6, #32
 8000218:	fa01 f806 	lsl.w	r8, r1, r6
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	40b7      	lsls	r7, r6
 8000222:	ea43 0808 	orr.w	r8, r3, r8
 8000226:	40b4      	lsls	r4, r6
 8000228:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800022c:	fa1f fc87 	uxth.w	ip, r7
 8000230:	fbb8 f1fe 	udiv	r1, r8, lr
 8000234:	0c23      	lsrs	r3, r4, #16
 8000236:	fb0e 8811 	mls	r8, lr, r1, r8
 800023a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023e:	fb01 f20c 	mul.w	r2, r1, ip
 8000242:	429a      	cmp	r2, r3
 8000244:	d909      	bls.n	800025a <__udivmoddi4+0x62>
 8000246:	18fb      	adds	r3, r7, r3
 8000248:	f101 30ff 	add.w	r0, r1, #4294967295
 800024c:	f080 80ea 	bcs.w	8000424 <__udivmoddi4+0x22c>
 8000250:	429a      	cmp	r2, r3
 8000252:	f240 80e7 	bls.w	8000424 <__udivmoddi4+0x22c>
 8000256:	3902      	subs	r1, #2
 8000258:	443b      	add	r3, r7
 800025a:	1a9a      	subs	r2, r3, r2
 800025c:	b2a3      	uxth	r3, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026a:	fb00 fc0c 	mul.w	ip, r0, ip
 800026e:	459c      	cmp	ip, r3
 8000270:	d909      	bls.n	8000286 <__udivmoddi4+0x8e>
 8000272:	18fb      	adds	r3, r7, r3
 8000274:	f100 32ff 	add.w	r2, r0, #4294967295
 8000278:	f080 80d6 	bcs.w	8000428 <__udivmoddi4+0x230>
 800027c:	459c      	cmp	ip, r3
 800027e:	f240 80d3 	bls.w	8000428 <__udivmoddi4+0x230>
 8000282:	443b      	add	r3, r7
 8000284:	3802      	subs	r0, #2
 8000286:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028a:	eba3 030c 	sub.w	r3, r3, ip
 800028e:	2100      	movs	r1, #0
 8000290:	b11d      	cbz	r5, 800029a <__udivmoddi4+0xa2>
 8000292:	40f3      	lsrs	r3, r6
 8000294:	2200      	movs	r2, #0
 8000296:	e9c5 3200 	strd	r3, r2, [r5]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d905      	bls.n	80002ae <__udivmoddi4+0xb6>
 80002a2:	b10d      	cbz	r5, 80002a8 <__udivmoddi4+0xb0>
 80002a4:	e9c5 0100 	strd	r0, r1, [r5]
 80002a8:	2100      	movs	r1, #0
 80002aa:	4608      	mov	r0, r1
 80002ac:	e7f5      	b.n	800029a <__udivmoddi4+0xa2>
 80002ae:	fab3 f183 	clz	r1, r3
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d146      	bne.n	8000344 <__udivmoddi4+0x14c>
 80002b6:	4573      	cmp	r3, lr
 80002b8:	d302      	bcc.n	80002c0 <__udivmoddi4+0xc8>
 80002ba:	4282      	cmp	r2, r0
 80002bc:	f200 8105 	bhi.w	80004ca <__udivmoddi4+0x2d2>
 80002c0:	1a84      	subs	r4, r0, r2
 80002c2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	4690      	mov	r8, r2
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	d0e5      	beq.n	800029a <__udivmoddi4+0xa2>
 80002ce:	e9c5 4800 	strd	r4, r8, [r5]
 80002d2:	e7e2      	b.n	800029a <__udivmoddi4+0xa2>
 80002d4:	2a00      	cmp	r2, #0
 80002d6:	f000 8090 	beq.w	80003fa <__udivmoddi4+0x202>
 80002da:	fab2 f682 	clz	r6, r2
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f040 80a4 	bne.w	800042c <__udivmoddi4+0x234>
 80002e4:	1a8a      	subs	r2, r1, r2
 80002e6:	0c03      	lsrs	r3, r0, #16
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	b280      	uxth	r0, r0
 80002ee:	b2bc      	uxth	r4, r7
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb2 fcfe 	udiv	ip, r2, lr
 80002f6:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002fe:	fb04 f20c 	mul.w	r2, r4, ip
 8000302:	429a      	cmp	r2, r3
 8000304:	d907      	bls.n	8000316 <__udivmoddi4+0x11e>
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	f10c 38ff 	add.w	r8, ip, #4294967295
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x11c>
 800030e:	429a      	cmp	r2, r3
 8000310:	f200 80e0 	bhi.w	80004d4 <__udivmoddi4+0x2dc>
 8000314:	46c4      	mov	ip, r8
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	fbb3 f2fe 	udiv	r2, r3, lr
 800031c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000320:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000324:	fb02 f404 	mul.w	r4, r2, r4
 8000328:	429c      	cmp	r4, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x144>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x142>
 8000334:	429c      	cmp	r4, r3
 8000336:	f200 80ca 	bhi.w	80004ce <__udivmoddi4+0x2d6>
 800033a:	4602      	mov	r2, r0
 800033c:	1b1b      	subs	r3, r3, r4
 800033e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000342:	e7a5      	b.n	8000290 <__udivmoddi4+0x98>
 8000344:	f1c1 0620 	rsb	r6, r1, #32
 8000348:	408b      	lsls	r3, r1
 800034a:	fa22 f706 	lsr.w	r7, r2, r6
 800034e:	431f      	orrs	r7, r3
 8000350:	fa0e f401 	lsl.w	r4, lr, r1
 8000354:	fa20 f306 	lsr.w	r3, r0, r6
 8000358:	fa2e fe06 	lsr.w	lr, lr, r6
 800035c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000360:	4323      	orrs	r3, r4
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	fa1f fc87 	uxth.w	ip, r7
 800036a:	fbbe f0f9 	udiv	r0, lr, r9
 800036e:	0c1c      	lsrs	r4, r3, #16
 8000370:	fb09 ee10 	mls	lr, r9, r0, lr
 8000374:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000378:	fb00 fe0c 	mul.w	lr, r0, ip
 800037c:	45a6      	cmp	lr, r4
 800037e:	fa02 f201 	lsl.w	r2, r2, r1
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x1a0>
 8000384:	193c      	adds	r4, r7, r4
 8000386:	f100 3aff 	add.w	sl, r0, #4294967295
 800038a:	f080 809c 	bcs.w	80004c6 <__udivmoddi4+0x2ce>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f240 8099 	bls.w	80004c6 <__udivmoddi4+0x2ce>
 8000394:	3802      	subs	r0, #2
 8000396:	443c      	add	r4, r7
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	fa1f fe83 	uxth.w	lr, r3
 80003a0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a4:	fb09 4413 	mls	r4, r9, r3, r4
 80003a8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003ac:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x1ce>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ba:	f080 8082 	bcs.w	80004c2 <__udivmoddi4+0x2ca>
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d97f      	bls.n	80004c2 <__udivmoddi4+0x2ca>
 80003c2:	3b02      	subs	r3, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ca:	eba4 040c 	sub.w	r4, r4, ip
 80003ce:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d2:	4564      	cmp	r4, ip
 80003d4:	4673      	mov	r3, lr
 80003d6:	46e1      	mov	r9, ip
 80003d8:	d362      	bcc.n	80004a0 <__udivmoddi4+0x2a8>
 80003da:	d05f      	beq.n	800049c <__udivmoddi4+0x2a4>
 80003dc:	b15d      	cbz	r5, 80003f6 <__udivmoddi4+0x1fe>
 80003de:	ebb8 0203 	subs.w	r2, r8, r3
 80003e2:	eb64 0409 	sbc.w	r4, r4, r9
 80003e6:	fa04 f606 	lsl.w	r6, r4, r6
 80003ea:	fa22 f301 	lsr.w	r3, r2, r1
 80003ee:	431e      	orrs	r6, r3
 80003f0:	40cc      	lsrs	r4, r1
 80003f2:	e9c5 6400 	strd	r6, r4, [r5]
 80003f6:	2100      	movs	r1, #0
 80003f8:	e74f      	b.n	800029a <__udivmoddi4+0xa2>
 80003fa:	fbb1 fcf2 	udiv	ip, r1, r2
 80003fe:	0c01      	lsrs	r1, r0, #16
 8000400:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000404:	b280      	uxth	r0, r0
 8000406:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040a:	463b      	mov	r3, r7
 800040c:	4638      	mov	r0, r7
 800040e:	463c      	mov	r4, r7
 8000410:	46b8      	mov	r8, r7
 8000412:	46be      	mov	lr, r7
 8000414:	2620      	movs	r6, #32
 8000416:	fbb1 f1f7 	udiv	r1, r1, r7
 800041a:	eba2 0208 	sub.w	r2, r2, r8
 800041e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000422:	e766      	b.n	80002f2 <__udivmoddi4+0xfa>
 8000424:	4601      	mov	r1, r0
 8000426:	e718      	b.n	800025a <__udivmoddi4+0x62>
 8000428:	4610      	mov	r0, r2
 800042a:	e72c      	b.n	8000286 <__udivmoddi4+0x8e>
 800042c:	f1c6 0220 	rsb	r2, r6, #32
 8000430:	fa2e f302 	lsr.w	r3, lr, r2
 8000434:	40b7      	lsls	r7, r6
 8000436:	40b1      	lsls	r1, r6
 8000438:	fa20 f202 	lsr.w	r2, r0, r2
 800043c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000440:	430a      	orrs	r2, r1
 8000442:	fbb3 f8fe 	udiv	r8, r3, lr
 8000446:	b2bc      	uxth	r4, r7
 8000448:	fb0e 3318 	mls	r3, lr, r8, r3
 800044c:	0c11      	lsrs	r1, r2, #16
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb08 f904 	mul.w	r9, r8, r4
 8000456:	40b0      	lsls	r0, r6
 8000458:	4589      	cmp	r9, r1
 800045a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800045e:	b280      	uxth	r0, r0
 8000460:	d93e      	bls.n	80004e0 <__udivmoddi4+0x2e8>
 8000462:	1879      	adds	r1, r7, r1
 8000464:	f108 3cff 	add.w	ip, r8, #4294967295
 8000468:	d201      	bcs.n	800046e <__udivmoddi4+0x276>
 800046a:	4589      	cmp	r9, r1
 800046c:	d81f      	bhi.n	80004ae <__udivmoddi4+0x2b6>
 800046e:	eba1 0109 	sub.w	r1, r1, r9
 8000472:	fbb1 f9fe 	udiv	r9, r1, lr
 8000476:	fb09 f804 	mul.w	r8, r9, r4
 800047a:	fb0e 1119 	mls	r1, lr, r9, r1
 800047e:	b292      	uxth	r2, r2
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	4542      	cmp	r2, r8
 8000486:	d229      	bcs.n	80004dc <__udivmoddi4+0x2e4>
 8000488:	18ba      	adds	r2, r7, r2
 800048a:	f109 31ff 	add.w	r1, r9, #4294967295
 800048e:	d2c4      	bcs.n	800041a <__udivmoddi4+0x222>
 8000490:	4542      	cmp	r2, r8
 8000492:	d2c2      	bcs.n	800041a <__udivmoddi4+0x222>
 8000494:	f1a9 0102 	sub.w	r1, r9, #2
 8000498:	443a      	add	r2, r7
 800049a:	e7be      	b.n	800041a <__udivmoddi4+0x222>
 800049c:	45f0      	cmp	r8, lr
 800049e:	d29d      	bcs.n	80003dc <__udivmoddi4+0x1e4>
 80004a0:	ebbe 0302 	subs.w	r3, lr, r2
 80004a4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004a8:	3801      	subs	r0, #1
 80004aa:	46e1      	mov	r9, ip
 80004ac:	e796      	b.n	80003dc <__udivmoddi4+0x1e4>
 80004ae:	eba7 0909 	sub.w	r9, r7, r9
 80004b2:	4449      	add	r1, r9
 80004b4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004b8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004bc:	fb09 f804 	mul.w	r8, r9, r4
 80004c0:	e7db      	b.n	800047a <__udivmoddi4+0x282>
 80004c2:	4673      	mov	r3, lr
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1ce>
 80004c6:	4650      	mov	r0, sl
 80004c8:	e766      	b.n	8000398 <__udivmoddi4+0x1a0>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e6fd      	b.n	80002ca <__udivmoddi4+0xd2>
 80004ce:	443b      	add	r3, r7
 80004d0:	3a02      	subs	r2, #2
 80004d2:	e733      	b.n	800033c <__udivmoddi4+0x144>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	443b      	add	r3, r7
 80004da:	e71c      	b.n	8000316 <__udivmoddi4+0x11e>
 80004dc:	4649      	mov	r1, r9
 80004de:	e79c      	b.n	800041a <__udivmoddi4+0x222>
 80004e0:	eba1 0109 	sub.w	r1, r1, r9
 80004e4:	46c4      	mov	ip, r8
 80004e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ea:	fb09 f804 	mul.w	r8, r9, r4
 80004ee:	e7c4      	b.n	800047a <__udivmoddi4+0x282>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <cb_taken_space>:
#include "circ_buffer.h"

#include <string.h>

// How much space is taken in the buffer
size_t cb_taken_space (circ_buffer_t *cb) {
 80004f4:	b480      	push	{r7}
 80004f6:	b083      	sub	sp, #12
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
	if (cb->full) return cb->max_bytes;
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	7b1b      	ldrb	r3, [r3, #12]
 8000500:	2b00      	cmp	r3, #0
 8000502:	d002      	beq.n	800050a <cb_taken_space+0x16>
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	689b      	ldr	r3, [r3, #8]
 8000508:	e014      	b.n	8000534 <cb_taken_space+0x40>
	return ( cb->head >= cb->tail ) ? (cb->head - cb->tail) : (cb->max_bytes + cb->head - cb->tail);
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	791a      	ldrb	r2, [r3, #4]
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	795b      	ldrb	r3, [r3, #5]
 8000512:	429a      	cmp	r2, r3
 8000514:	d306      	bcc.n	8000524 <cb_taken_space+0x30>
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	791b      	ldrb	r3, [r3, #4]
 800051a:	461a      	mov	r2, r3
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	795b      	ldrb	r3, [r3, #5]
 8000520:	1ad3      	subs	r3, r2, r3
 8000522:	e007      	b.n	8000534 <cb_taken_space+0x40>
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	689b      	ldr	r3, [r3, #8]
 8000528:	687a      	ldr	r2, [r7, #4]
 800052a:	7912      	ldrb	r2, [r2, #4]
 800052c:	4413      	add	r3, r2
 800052e:	687a      	ldr	r2, [r7, #4]
 8000530:	7952      	ldrb	r2, [r2, #5]
 8000532:	1a9b      	subs	r3, r3, r2
}
 8000534:	4618      	mov	r0, r3
 8000536:	370c      	adds	r7, #12
 8000538:	46bd      	mov	sp, r7
 800053a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053e:	4770      	bx	lr

08000540 <cb_free_space>:

// How much space is free in the buffer
static size_t cb_free_space (circ_buffer_t *cb) {
 8000540:	b590      	push	{r4, r7, lr}
 8000542:	b083      	sub	sp, #12
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
	return ( cb->max_bytes - cb_taken_space(cb) );
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	689c      	ldr	r4, [r3, #8]
 800054c:	6878      	ldr	r0, [r7, #4]
 800054e:	f7ff ffd1 	bl	80004f4 <cb_taken_space>
 8000552:	4603      	mov	r3, r0
 8000554:	1ae3      	subs	r3, r4, r3
}
 8000556:	4618      	mov	r0, r3
 8000558:	370c      	adds	r7, #12
 800055a:	46bd      	mov	sp, r7
 800055c:	bd90      	pop	{r4, r7, pc}

0800055e <cb_is_empty>:
//static bool cb_is_full (circ_buffer_t *cb) {
//	return cb->full;
//}

// Returns the information if the buffer is empty
static bool cb_is_empty (circ_buffer_t *cb) {
 800055e:	b480      	push	{r7}
 8000560:	b083      	sub	sp, #12
 8000562:	af00      	add	r7, sp, #0
 8000564:	6078      	str	r0, [r7, #4]
	return (!cb->full && (cb->head == cb->tail));
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	7b1b      	ldrb	r3, [r3, #12]
 800056a:	f083 0301 	eor.w	r3, r3, #1
 800056e:	b2db      	uxtb	r3, r3
 8000570:	2b00      	cmp	r3, #0
 8000572:	d007      	beq.n	8000584 <cb_is_empty+0x26>
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	791a      	ldrb	r2, [r3, #4]
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	795b      	ldrb	r3, [r3, #5]
 800057c:	429a      	cmp	r2, r3
 800057e:	d101      	bne.n	8000584 <cb_is_empty+0x26>
 8000580:	2301      	movs	r3, #1
 8000582:	e000      	b.n	8000586 <cb_is_empty+0x28>
 8000584:	2300      	movs	r3, #0
 8000586:	f003 0301 	and.w	r3, r3, #1
 800058a:	b2db      	uxtb	r3, r3
}
 800058c:	4618      	mov	r0, r3
 800058e:	370c      	adds	r7, #12
 8000590:	46bd      	mov	sp, r7
 8000592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000596:	4770      	bx	lr

08000598 <cb_buffer_init>:

//Function to init Circular Buffer
void cb_buffer_init (circ_buffer_t *cb, uint8_t *buffer, size_t size) {
 8000598:	b480      	push	{r7}
 800059a:	b085      	sub	sp, #20
 800059c:	af00      	add	r7, sp, #0
 800059e:	60f8      	str	r0, [r7, #12]
 80005a0:	60b9      	str	r1, [r7, #8]
 80005a2:	607a      	str	r2, [r7, #4]
	cb->data = buffer;
 80005a4:	68fb      	ldr	r3, [r7, #12]
 80005a6:	68ba      	ldr	r2, [r7, #8]
 80005a8:	601a      	str	r2, [r3, #0]
	cb->head = 0;
 80005aa:	68fb      	ldr	r3, [r7, #12]
 80005ac:	2200      	movs	r2, #0
 80005ae:	711a      	strb	r2, [r3, #4]
	cb->tail = 0;
 80005b0:	68fb      	ldr	r3, [r7, #12]
 80005b2:	2200      	movs	r2, #0
 80005b4:	715a      	strb	r2, [r3, #5]
	cb->max_bytes = size;
 80005b6:	68fb      	ldr	r3, [r7, #12]
 80005b8:	687a      	ldr	r2, [r7, #4]
 80005ba:	609a      	str	r2, [r3, #8]
	cb->full = false;
 80005bc:	68fb      	ldr	r3, [r7, #12]
 80005be:	2200      	movs	r2, #0
 80005c0:	731a      	strb	r2, [r3, #12]
}
 80005c2:	bf00      	nop
 80005c4:	3714      	adds	r7, #20
 80005c6:	46bd      	mov	sp, r7
 80005c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005cc:	4770      	bx	lr

080005ce <cb_buffer_push>:

// Function for writing into the buffer
bool cb_buffer_push (circ_buffer_t *cb, uint8_t *data, size_t len) {
 80005ce:	b580      	push	{r7, lr}
 80005d0:	b086      	sub	sp, #24
 80005d2:	af00      	add	r7, sp, #0
 80005d4:	60f8      	str	r0, [r7, #12]
 80005d6:	60b9      	str	r1, [r7, #8]
 80005d8:	607a      	str	r2, [r7, #4]
	if (len > cb_free_space(cb)) return false;
 80005da:	68f8      	ldr	r0, [r7, #12]
 80005dc:	f7ff ffb0 	bl	8000540 <cb_free_space>
 80005e0:	4602      	mov	r2, r0
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	4293      	cmp	r3, r2
 80005e6:	d901      	bls.n	80005ec <cb_buffer_push+0x1e>
 80005e8:	2300      	movs	r3, #0
 80005ea:	e044      	b.n	8000676 <cb_buffer_push+0xa8>

	size_t part = cb->max_bytes - cb->head;
 80005ec:	68fb      	ldr	r3, [r7, #12]
 80005ee:	689b      	ldr	r3, [r3, #8]
 80005f0:	68fa      	ldr	r2, [r7, #12]
 80005f2:	7912      	ldrb	r2, [r2, #4]
 80005f4:	1a9b      	subs	r3, r3, r2
 80005f6:	617b      	str	r3, [r7, #20]
	if ( part >= len ) {
 80005f8:	697a      	ldr	r2, [r7, #20]
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	429a      	cmp	r2, r3
 80005fe:	d30a      	bcc.n	8000616 <cb_buffer_push+0x48>
		memcpy(&cb->data[cb->head], data, len);
 8000600:	68fb      	ldr	r3, [r7, #12]
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	68fa      	ldr	r2, [r7, #12]
 8000606:	7912      	ldrb	r2, [r2, #4]
 8000608:	4413      	add	r3, r2
 800060a:	687a      	ldr	r2, [r7, #4]
 800060c:	68b9      	ldr	r1, [r7, #8]
 800060e:	4618      	mov	r0, r3
 8000610:	f004 f848 	bl	80046a4 <memcpy>
 8000614:	e014      	b.n	8000640 <cb_buffer_push+0x72>
	} else {
		memcpy(&cb->data[cb->head], data, part);
 8000616:	68fb      	ldr	r3, [r7, #12]
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	68fa      	ldr	r2, [r7, #12]
 800061c:	7912      	ldrb	r2, [r2, #4]
 800061e:	4413      	add	r3, r2
 8000620:	697a      	ldr	r2, [r7, #20]
 8000622:	68b9      	ldr	r1, [r7, #8]
 8000624:	4618      	mov	r0, r3
 8000626:	f004 f83d 	bl	80046a4 <memcpy>
		memcpy(&cb->data[0], data + part, len - part);
 800062a:	68fb      	ldr	r3, [r7, #12]
 800062c:	6818      	ldr	r0, [r3, #0]
 800062e:	68ba      	ldr	r2, [r7, #8]
 8000630:	697b      	ldr	r3, [r7, #20]
 8000632:	18d1      	adds	r1, r2, r3
 8000634:	687a      	ldr	r2, [r7, #4]
 8000636:	697b      	ldr	r3, [r7, #20]
 8000638:	1ad3      	subs	r3, r2, r3
 800063a:	461a      	mov	r2, r3
 800063c:	f004 f832 	bl	80046a4 <memcpy>
	}
	cb->head = (cb->head + len) % cb->max_bytes;
 8000640:	68fb      	ldr	r3, [r7, #12]
 8000642:	791b      	ldrb	r3, [r3, #4]
 8000644:	461a      	mov	r2, r3
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	4413      	add	r3, r2
 800064a:	68fa      	ldr	r2, [r7, #12]
 800064c:	6892      	ldr	r2, [r2, #8]
 800064e:	fbb3 f1f2 	udiv	r1, r3, r2
 8000652:	fb01 f202 	mul.w	r2, r1, r2
 8000656:	1a9b      	subs	r3, r3, r2
 8000658:	b2da      	uxtb	r2, r3
 800065a:	68fb      	ldr	r3, [r7, #12]
 800065c:	711a      	strb	r2, [r3, #4]
	cb->full = (cb->tail == cb->head);
 800065e:	68fb      	ldr	r3, [r7, #12]
 8000660:	795a      	ldrb	r2, [r3, #5]
 8000662:	68fb      	ldr	r3, [r7, #12]
 8000664:	791b      	ldrb	r3, [r3, #4]
 8000666:	429a      	cmp	r2, r3
 8000668:	bf0c      	ite	eq
 800066a:	2301      	moveq	r3, #1
 800066c:	2300      	movne	r3, #0
 800066e:	b2da      	uxtb	r2, r3
 8000670:	68fb      	ldr	r3, [r7, #12]
 8000672:	731a      	strb	r2, [r3, #12]
	return true;
 8000674:	2301      	movs	r3, #1
}
 8000676:	4618      	mov	r0, r3
 8000678:	3718      	adds	r7, #24
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}

0800067e <cb_buffer_pull>:

size_t cb_buffer_pull (circ_buffer_t *cb, uint8_t *data, size_t len) {
 800067e:	b580      	push	{r7, lr}
 8000680:	b088      	sub	sp, #32
 8000682:	af00      	add	r7, sp, #0
 8000684:	60f8      	str	r0, [r7, #12]
 8000686:	60b9      	str	r1, [r7, #8]
 8000688:	607a      	str	r2, [r7, #4]
	if (cb_is_empty(cb) || len == 0) return 0;
 800068a:	68f8      	ldr	r0, [r7, #12]
 800068c:	f7ff ff67 	bl	800055e <cb_is_empty>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d102      	bne.n	800069c <cb_buffer_pull+0x1e>
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	2b00      	cmp	r3, #0
 800069a:	d101      	bne.n	80006a0 <cb_buffer_pull+0x22>
 800069c:	2300      	movs	r3, #0
 800069e:	e046      	b.n	800072e <cb_buffer_pull+0xb0>

	size_t taken_space = cb_taken_space(cb);
 80006a0:	68f8      	ldr	r0, [r7, #12]
 80006a2:	f7ff ff27 	bl	80004f4 <cb_taken_space>
 80006a6:	61f8      	str	r0, [r7, #28]
	size_t to_read = (len < taken_space) ? len : taken_space;
 80006a8:	69fa      	ldr	r2, [r7, #28]
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	4293      	cmp	r3, r2
 80006ae:	bf28      	it	cs
 80006b0:	4613      	movcs	r3, r2
 80006b2:	61bb      	str	r3, [r7, #24]

	size_t part = cb->max_bytes - cb->tail;
 80006b4:	68fb      	ldr	r3, [r7, #12]
 80006b6:	689b      	ldr	r3, [r3, #8]
 80006b8:	68fa      	ldr	r2, [r7, #12]
 80006ba:	7952      	ldrb	r2, [r2, #5]
 80006bc:	1a9b      	subs	r3, r3, r2
 80006be:	617b      	str	r3, [r7, #20]
	if (part >= to_read) {
 80006c0:	697a      	ldr	r2, [r7, #20]
 80006c2:	69bb      	ldr	r3, [r7, #24]
 80006c4:	429a      	cmp	r2, r3
 80006c6:	d30a      	bcc.n	80006de <cb_buffer_pull+0x60>
		memcpy(data, &cb->data[cb->tail], to_read);
 80006c8:	68fb      	ldr	r3, [r7, #12]
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	68fa      	ldr	r2, [r7, #12]
 80006ce:	7952      	ldrb	r2, [r2, #5]
 80006d0:	4413      	add	r3, r2
 80006d2:	69ba      	ldr	r2, [r7, #24]
 80006d4:	4619      	mov	r1, r3
 80006d6:	68b8      	ldr	r0, [r7, #8]
 80006d8:	f003 ffe4 	bl	80046a4 <memcpy>
 80006dc:	e014      	b.n	8000708 <cb_buffer_pull+0x8a>
	} else {
		memcpy(data, &cb->data[cb->tail], part);
 80006de:	68fb      	ldr	r3, [r7, #12]
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	68fa      	ldr	r2, [r7, #12]
 80006e4:	7952      	ldrb	r2, [r2, #5]
 80006e6:	4413      	add	r3, r2
 80006e8:	697a      	ldr	r2, [r7, #20]
 80006ea:	4619      	mov	r1, r3
 80006ec:	68b8      	ldr	r0, [r7, #8]
 80006ee:	f003 ffd9 	bl	80046a4 <memcpy>
		memcpy(data + part, &cb->data[0], to_read - part);
 80006f2:	68ba      	ldr	r2, [r7, #8]
 80006f4:	697b      	ldr	r3, [r7, #20]
 80006f6:	18d0      	adds	r0, r2, r3
 80006f8:	68fb      	ldr	r3, [r7, #12]
 80006fa:	6819      	ldr	r1, [r3, #0]
 80006fc:	69ba      	ldr	r2, [r7, #24]
 80006fe:	697b      	ldr	r3, [r7, #20]
 8000700:	1ad3      	subs	r3, r2, r3
 8000702:	461a      	mov	r2, r3
 8000704:	f003 ffce 	bl	80046a4 <memcpy>
	}
	cb->tail = (cb->tail + to_read) % cb->max_bytes;
 8000708:	68fb      	ldr	r3, [r7, #12]
 800070a:	795b      	ldrb	r3, [r3, #5]
 800070c:	461a      	mov	r2, r3
 800070e:	69bb      	ldr	r3, [r7, #24]
 8000710:	4413      	add	r3, r2
 8000712:	68fa      	ldr	r2, [r7, #12]
 8000714:	6892      	ldr	r2, [r2, #8]
 8000716:	fbb3 f1f2 	udiv	r1, r3, r2
 800071a:	fb01 f202 	mul.w	r2, r1, r2
 800071e:	1a9b      	subs	r3, r3, r2
 8000720:	b2da      	uxtb	r2, r3
 8000722:	68fb      	ldr	r3, [r7, #12]
 8000724:	715a      	strb	r2, [r3, #5]
	cb->full = false;
 8000726:	68fb      	ldr	r3, [r7, #12]
 8000728:	2200      	movs	r2, #0
 800072a:	731a      	strb	r2, [r3, #12]
	return to_read;
 800072c:	69bb      	ldr	r3, [r7, #24]
}
 800072e:	4618      	mov	r0, r3
 8000730:	3720      	adds	r7, #32
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}
	...

08000738 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b08a      	sub	sp, #40	@ 0x28
 800073c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800073e:	f107 0314 	add.w	r3, r7, #20
 8000742:	2200      	movs	r2, #0
 8000744:	601a      	str	r2, [r3, #0]
 8000746:	605a      	str	r2, [r3, #4]
 8000748:	609a      	str	r2, [r3, #8]
 800074a:	60da      	str	r2, [r3, #12]
 800074c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800074e:	4b2b      	ldr	r3, [pc, #172]	@ (80007fc <MX_GPIO_Init+0xc4>)
 8000750:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000752:	4a2a      	ldr	r2, [pc, #168]	@ (80007fc <MX_GPIO_Init+0xc4>)
 8000754:	f043 0304 	orr.w	r3, r3, #4
 8000758:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800075a:	4b28      	ldr	r3, [pc, #160]	@ (80007fc <MX_GPIO_Init+0xc4>)
 800075c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800075e:	f003 0304 	and.w	r3, r3, #4
 8000762:	613b      	str	r3, [r7, #16]
 8000764:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000766:	4b25      	ldr	r3, [pc, #148]	@ (80007fc <MX_GPIO_Init+0xc4>)
 8000768:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800076a:	4a24      	ldr	r2, [pc, #144]	@ (80007fc <MX_GPIO_Init+0xc4>)
 800076c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000770:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000772:	4b22      	ldr	r3, [pc, #136]	@ (80007fc <MX_GPIO_Init+0xc4>)
 8000774:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000776:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800077a:	60fb      	str	r3, [r7, #12]
 800077c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800077e:	4b1f      	ldr	r3, [pc, #124]	@ (80007fc <MX_GPIO_Init+0xc4>)
 8000780:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000782:	4a1e      	ldr	r2, [pc, #120]	@ (80007fc <MX_GPIO_Init+0xc4>)
 8000784:	f043 0301 	orr.w	r3, r3, #1
 8000788:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800078a:	4b1c      	ldr	r3, [pc, #112]	@ (80007fc <MX_GPIO_Init+0xc4>)
 800078c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800078e:	f003 0301 	and.w	r3, r3, #1
 8000792:	60bb      	str	r3, [r7, #8]
 8000794:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000796:	4b19      	ldr	r3, [pc, #100]	@ (80007fc <MX_GPIO_Init+0xc4>)
 8000798:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800079a:	4a18      	ldr	r2, [pc, #96]	@ (80007fc <MX_GPIO_Init+0xc4>)
 800079c:	f043 0302 	orr.w	r3, r3, #2
 80007a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007a2:	4b16      	ldr	r3, [pc, #88]	@ (80007fc <MX_GPIO_Init+0xc4>)
 80007a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007a6:	f003 0302 	and.w	r3, r3, #2
 80007aa:	607b      	str	r3, [r7, #4]
 80007ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_STATUSD_GPIO_Port, LED_STATUSD_Pin, GPIO_PIN_RESET);
 80007ae:	2200      	movs	r2, #0
 80007b0:	2120      	movs	r1, #32
 80007b2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007b6:	f001 f827 	bl	8001808 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007ba:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80007be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007c0:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80007c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c6:	2300      	movs	r3, #0
 80007c8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007ca:	f107 0314 	add.w	r3, r7, #20
 80007ce:	4619      	mov	r1, r3
 80007d0:	480b      	ldr	r0, [pc, #44]	@ (8000800 <MX_GPIO_Init+0xc8>)
 80007d2:	f000 fe6f 	bl	80014b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_STATUSD_Pin */
  GPIO_InitStruct.Pin = LED_STATUSD_Pin;
 80007d6:	2320      	movs	r3, #32
 80007d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007da:	2301      	movs	r3, #1
 80007dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007de:	2300      	movs	r3, #0
 80007e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e2:	2300      	movs	r3, #0
 80007e4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_STATUSD_GPIO_Port, &GPIO_InitStruct);
 80007e6:	f107 0314 	add.w	r3, r7, #20
 80007ea:	4619      	mov	r1, r3
 80007ec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007f0:	f000 fe60 	bl	80014b4 <HAL_GPIO_Init>

}
 80007f4:	bf00      	nop
 80007f6:	3728      	adds	r7, #40	@ 0x28
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	40021000 	.word	0x40021000
 8000800:	48000800 	.word	0x48000800

08000804 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b082      	sub	sp, #8
 8000808:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800080a:	f000 fc23 	bl	8001054 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800080e:	f000 f813 	bl	8000838 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000812:	f7ff ff91 	bl	8000738 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000816:	f000 fb0f 	bl	8000e38 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 800081a:	f000 fadb 	bl	8000dd4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  mb_init();
 800081e:	f000 f9ff 	bl	8000c20 <mb_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  bool status = false;
 8000822:	2300      	movs	r3, #0
 8000824:	71fb      	strb	r3, [r7, #7]
  while (1)
  {
	  status = mb_read();
 8000826:	f000 fa13 	bl	8000c50 <mb_read>
 800082a:	4603      	mov	r3, r0
 800082c:	71fb      	strb	r3, [r7, #7]
	  HAL_Delay(1);
 800082e:	2001      	movs	r0, #1
 8000830:	f000 fc8c 	bl	800114c <HAL_Delay>
	  status = mb_read();
 8000834:	bf00      	nop
 8000836:	e7f6      	b.n	8000826 <main+0x22>

08000838 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b096      	sub	sp, #88	@ 0x58
 800083c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800083e:	f107 0314 	add.w	r3, r7, #20
 8000842:	2244      	movs	r2, #68	@ 0x44
 8000844:	2100      	movs	r1, #0
 8000846:	4618      	mov	r0, r3
 8000848:	f003 ff00 	bl	800464c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800084c:	463b      	mov	r3, r7
 800084e:	2200      	movs	r2, #0
 8000850:	601a      	str	r2, [r3, #0]
 8000852:	605a      	str	r2, [r3, #4]
 8000854:	609a      	str	r2, [r3, #8]
 8000856:	60da      	str	r2, [r3, #12]
 8000858:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800085a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800085e:	f000 fff9 	bl	8001854 <HAL_PWREx_ControlVoltageScaling>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000868:	f000 f837 	bl	80008da <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800086c:	2302      	movs	r3, #2
 800086e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000870:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000874:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000876:	2310      	movs	r3, #16
 8000878:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800087a:	2302      	movs	r3, #2
 800087c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800087e:	2302      	movs	r3, #2
 8000880:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000882:	2301      	movs	r3, #1
 8000884:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000886:	230a      	movs	r3, #10
 8000888:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800088a:	2307      	movs	r3, #7
 800088c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800088e:	2302      	movs	r3, #2
 8000890:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000892:	2302      	movs	r3, #2
 8000894:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000896:	f107 0314 	add.w	r3, r7, #20
 800089a:	4618      	mov	r0, r3
 800089c:	f001 f830 	bl	8001900 <HAL_RCC_OscConfig>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d001      	beq.n	80008aa <SystemClock_Config+0x72>
  {
    Error_Handler();
 80008a6:	f000 f818 	bl	80008da <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008aa:	230f      	movs	r3, #15
 80008ac:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008ae:	2303      	movs	r3, #3
 80008b0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008b2:	2300      	movs	r3, #0
 80008b4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008b6:	2300      	movs	r3, #0
 80008b8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008ba:	2300      	movs	r3, #0
 80008bc:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80008be:	463b      	mov	r3, r7
 80008c0:	2104      	movs	r1, #4
 80008c2:	4618      	mov	r0, r3
 80008c4:	f001 fbf8 	bl	80020b8 <HAL_RCC_ClockConfig>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d001      	beq.n	80008d2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80008ce:	f000 f804 	bl	80008da <Error_Handler>
  }
}
 80008d2:	bf00      	nop
 80008d4:	3758      	adds	r7, #88	@ 0x58
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}

080008da <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008da:	b480      	push	{r7}
 80008dc:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008de:	b672      	cpsid	i
}
 80008e0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008e2:	bf00      	nop
 80008e4:	e7fd      	b.n	80008e2 <Error_Handler+0x8>
	...

080008e8 <mb_crc16>:
uint16_t holdingRegisters[MB_REG_COUNT] = {0};

circ_buffer_t cb;
uint8_t buffer[MAX_BUFFER_SIZE] = {0};

static uint16_t mb_crc16(uint8_t *data, uint16_t length) {
 80008e8:	b480      	push	{r7}
 80008ea:	b085      	sub	sp, #20
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
 80008f0:	460b      	mov	r3, r1
 80008f2:	807b      	strh	r3, [r7, #2]
    uint16_t crc = 0xFFFF;
 80008f4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80008f8:	81fb      	strh	r3, [r7, #14]
    for (uint16_t i = 0; i < length; ++i) {
 80008fa:	2300      	movs	r3, #0
 80008fc:	81bb      	strh	r3, [r7, #12]
 80008fe:	e022      	b.n	8000946 <mb_crc16+0x5e>
        crc ^= data[i];
 8000900:	89bb      	ldrh	r3, [r7, #12]
 8000902:	687a      	ldr	r2, [r7, #4]
 8000904:	4413      	add	r3, r2
 8000906:	781b      	ldrb	r3, [r3, #0]
 8000908:	461a      	mov	r2, r3
 800090a:	89fb      	ldrh	r3, [r7, #14]
 800090c:	4053      	eors	r3, r2
 800090e:	81fb      	strh	r3, [r7, #14]
        for (uint8_t j = 0; j < 8; j++) {
 8000910:	2300      	movs	r3, #0
 8000912:	72fb      	strb	r3, [r7, #11]
 8000914:	e011      	b.n	800093a <mb_crc16+0x52>
            if (crc & 0x0001)
 8000916:	89fb      	ldrh	r3, [r7, #14]
 8000918:	f003 0301 	and.w	r3, r3, #1
 800091c:	2b00      	cmp	r3, #0
 800091e:	d006      	beq.n	800092e <mb_crc16+0x46>
                crc = (crc >> 1) ^ 0xA001;
 8000920:	89fb      	ldrh	r3, [r7, #14]
 8000922:	085b      	lsrs	r3, r3, #1
 8000924:	b29a      	uxth	r2, r3
 8000926:	4b0d      	ldr	r3, [pc, #52]	@ (800095c <mb_crc16+0x74>)
 8000928:	4053      	eors	r3, r2
 800092a:	81fb      	strh	r3, [r7, #14]
 800092c:	e002      	b.n	8000934 <mb_crc16+0x4c>
            else
                crc = crc >> 1;
 800092e:	89fb      	ldrh	r3, [r7, #14]
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	81fb      	strh	r3, [r7, #14]
        for (uint8_t j = 0; j < 8; j++) {
 8000934:	7afb      	ldrb	r3, [r7, #11]
 8000936:	3301      	adds	r3, #1
 8000938:	72fb      	strb	r3, [r7, #11]
 800093a:	7afb      	ldrb	r3, [r7, #11]
 800093c:	2b07      	cmp	r3, #7
 800093e:	d9ea      	bls.n	8000916 <mb_crc16+0x2e>
    for (uint16_t i = 0; i < length; ++i) {
 8000940:	89bb      	ldrh	r3, [r7, #12]
 8000942:	3301      	adds	r3, #1
 8000944:	81bb      	strh	r3, [r7, #12]
 8000946:	89ba      	ldrh	r2, [r7, #12]
 8000948:	887b      	ldrh	r3, [r7, #2]
 800094a:	429a      	cmp	r2, r3
 800094c:	d3d8      	bcc.n	8000900 <mb_crc16+0x18>
        }
    }
    return crc;
 800094e:	89fb      	ldrh	r3, [r7, #14]
}
 8000950:	4618      	mov	r0, r3
 8000952:	3714      	adds	r7, #20
 8000954:	46bd      	mov	sp, r7
 8000956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095a:	4770      	bx	lr
 800095c:	ffffa001 	.word	0xffffa001

08000960 <mb_led_hand>:


static void mb_led_hand (bool func) {
 8000960:	b580      	push	{r7, lr}
 8000962:	b082      	sub	sp, #8
 8000964:	af00      	add	r7, sp, #0
 8000966:	4603      	mov	r3, r0
 8000968:	71fb      	strb	r3, [r7, #7]
	static uint32_t lastSysTick = 0;
	if (func) {
 800096a:	79fb      	ldrb	r3, [r7, #7]
 800096c:	2b00      	cmp	r3, #0
 800096e:	d00b      	beq.n	8000988 <mb_led_hand+0x28>
		HAL_GPIO_WritePin(LED_STATUSD_GPIO_Port, LED_STATUSD_Pin, GPIO_PIN_SET);
 8000970:	2201      	movs	r2, #1
 8000972:	2120      	movs	r1, #32
 8000974:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000978:	f000 ff46 	bl	8001808 <HAL_GPIO_WritePin>
		lastSysTick = HAL_GetTick();
 800097c:	f000 fbda 	bl	8001134 <HAL_GetTick>
 8000980:	4603      	mov	r3, r0
 8000982:	4a0a      	ldr	r2, [pc, #40]	@ (80009ac <mb_led_hand+0x4c>)
 8000984:	6013      	str	r3, [r2, #0]
	} else if (HAL_GetTick() - lastSysTick > 40) {
		HAL_GPIO_WritePin(LED_STATUSD_GPIO_Port, LED_STATUSD_Pin, GPIO_PIN_RESET);
	}
}
 8000986:	e00d      	b.n	80009a4 <mb_led_hand+0x44>
	} else if (HAL_GetTick() - lastSysTick > 40) {
 8000988:	f000 fbd4 	bl	8001134 <HAL_GetTick>
 800098c:	4602      	mov	r2, r0
 800098e:	4b07      	ldr	r3, [pc, #28]	@ (80009ac <mb_led_hand+0x4c>)
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	1ad3      	subs	r3, r2, r3
 8000994:	2b28      	cmp	r3, #40	@ 0x28
 8000996:	d905      	bls.n	80009a4 <mb_led_hand+0x44>
		HAL_GPIO_WritePin(LED_STATUSD_GPIO_Port, LED_STATUSD_Pin, GPIO_PIN_RESET);
 8000998:	2200      	movs	r2, #0
 800099a:	2120      	movs	r1, #32
 800099c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009a0:	f000 ff32 	bl	8001808 <HAL_GPIO_WritePin>
}
 80009a4:	bf00      	nop
 80009a6:	3708      	adds	r7, #8
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	200000c0 	.word	0x200000c0

080009b0 <mb_send_regs>:


static bool mb_send_regs(uint16_t addr, uint16_t count) {
 80009b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80009b4:	b089      	sub	sp, #36	@ 0x24
 80009b6:	af00      	add	r7, sp, #0
 80009b8:	4603      	mov	r3, r0
 80009ba:	460a      	mov	r2, r1
 80009bc:	80fb      	strh	r3, [r7, #6]
 80009be:	4613      	mov	r3, r2
 80009c0:	80bb      	strh	r3, [r7, #4]
 80009c2:	466b      	mov	r3, sp
 80009c4:	461e      	mov	r6, r3
	// id // 0x03 // byte count // data // crc
	if (addr > MB_REG_COUNT) return false;
 80009c6:	88fb      	ldrh	r3, [r7, #6]
 80009c8:	2b02      	cmp	r3, #2
 80009ca:	d901      	bls.n	80009d0 <mb_send_regs+0x20>
 80009cc:	2300      	movs	r3, #0
 80009ce:	e085      	b.n	8000adc <mb_send_regs+0x12c>
	uint16_t size = (addr + count > MB_REG_COUNT) ? (MB_REG_COUNT - addr) : count;
 80009d0:	88fa      	ldrh	r2, [r7, #6]
 80009d2:	88bb      	ldrh	r3, [r7, #4]
 80009d4:	4413      	add	r3, r2
 80009d6:	2b02      	cmp	r3, #2
 80009d8:	dd04      	ble.n	80009e4 <mb_send_regs+0x34>
 80009da:	88fb      	ldrh	r3, [r7, #6]
 80009dc:	f1c3 0302 	rsb	r3, r3, #2
 80009e0:	b29b      	uxth	r3, r3
 80009e2:	e000      	b.n	80009e6 <mb_send_regs+0x36>
 80009e4:	88bb      	ldrh	r3, [r7, #4]
 80009e6:	83bb      	strh	r3, [r7, #28]

	uint8_t frame[5 + size];
 80009e8:	8bbb      	ldrh	r3, [r7, #28]
 80009ea:	1d59      	adds	r1, r3, #5
 80009ec:	1e4b      	subs	r3, r1, #1
 80009ee:	61bb      	str	r3, [r7, #24]
 80009f0:	460a      	mov	r2, r1
 80009f2:	2300      	movs	r3, #0
 80009f4:	4690      	mov	r8, r2
 80009f6:	4699      	mov	r9, r3
 80009f8:	f04f 0200 	mov.w	r2, #0
 80009fc:	f04f 0300 	mov.w	r3, #0
 8000a00:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000a04:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000a08:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000a0c:	460a      	mov	r2, r1
 8000a0e:	2300      	movs	r3, #0
 8000a10:	4614      	mov	r4, r2
 8000a12:	461d      	mov	r5, r3
 8000a14:	f04f 0200 	mov.w	r2, #0
 8000a18:	f04f 0300 	mov.w	r3, #0
 8000a1c:	00eb      	lsls	r3, r5, #3
 8000a1e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000a22:	00e2      	lsls	r2, r4, #3
 8000a24:	460b      	mov	r3, r1
 8000a26:	3307      	adds	r3, #7
 8000a28:	08db      	lsrs	r3, r3, #3
 8000a2a:	00db      	lsls	r3, r3, #3
 8000a2c:	ebad 0d03 	sub.w	sp, sp, r3
 8000a30:	466b      	mov	r3, sp
 8000a32:	3300      	adds	r3, #0
 8000a34:	617b      	str	r3, [r7, #20]
	frame[0] = uC;
 8000a36:	697b      	ldr	r3, [r7, #20]
 8000a38:	2201      	movs	r2, #1
 8000a3a:	701a      	strb	r2, [r3, #0]
	frame[1] = READ_HOLDING_REGS;
 8000a3c:	697b      	ldr	r3, [r7, #20]
 8000a3e:	2203      	movs	r2, #3
 8000a40:	705a      	strb	r2, [r3, #1]
	frame[2] = size * 2;
 8000a42:	8bbb      	ldrh	r3, [r7, #28]
 8000a44:	b2db      	uxtb	r3, r3
 8000a46:	005b      	lsls	r3, r3, #1
 8000a48:	b2da      	uxtb	r2, r3
 8000a4a:	697b      	ldr	r3, [r7, #20]
 8000a4c:	709a      	strb	r2, [r3, #2]

	for (uint16_t i = 0; i < size; ++i) {
 8000a4e:	2300      	movs	r3, #0
 8000a50:	83fb      	strh	r3, [r7, #30]
 8000a52:	e019      	b.n	8000a88 <mb_send_regs+0xd8>
		uint16_t reg = holdingRegisters[addr + i];
 8000a54:	88fa      	ldrh	r2, [r7, #6]
 8000a56:	8bfb      	ldrh	r3, [r7, #30]
 8000a58:	4413      	add	r3, r2
 8000a5a:	4a23      	ldr	r2, [pc, #140]	@ (8000ae8 <mb_send_regs+0x138>)
 8000a5c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a60:	81fb      	strh	r3, [r7, #14]
		frame[3 + i*2] = reg >> 8;
 8000a62:	89fb      	ldrh	r3, [r7, #14]
 8000a64:	0a1b      	lsrs	r3, r3, #8
 8000a66:	b29a      	uxth	r2, r3
 8000a68:	8bfb      	ldrh	r3, [r7, #30]
 8000a6a:	005b      	lsls	r3, r3, #1
 8000a6c:	3303      	adds	r3, #3
 8000a6e:	b2d1      	uxtb	r1, r2
 8000a70:	697a      	ldr	r2, [r7, #20]
 8000a72:	54d1      	strb	r1, [r2, r3]
		frame[4 + i*2] = reg & 0xFF;
 8000a74:	8bfb      	ldrh	r3, [r7, #30]
 8000a76:	3302      	adds	r3, #2
 8000a78:	005b      	lsls	r3, r3, #1
 8000a7a:	89fa      	ldrh	r2, [r7, #14]
 8000a7c:	b2d1      	uxtb	r1, r2
 8000a7e:	697a      	ldr	r2, [r7, #20]
 8000a80:	54d1      	strb	r1, [r2, r3]
	for (uint16_t i = 0; i < size; ++i) {
 8000a82:	8bfb      	ldrh	r3, [r7, #30]
 8000a84:	3301      	adds	r3, #1
 8000a86:	83fb      	strh	r3, [r7, #30]
 8000a88:	8bfa      	ldrh	r2, [r7, #30]
 8000a8a:	8bbb      	ldrh	r3, [r7, #28]
 8000a8c:	429a      	cmp	r2, r3
 8000a8e:	d3e1      	bcc.n	8000a54 <mb_send_regs+0xa4>
	}

	uint16_t length = 3 + size * 2;
 8000a90:	8bbb      	ldrh	r3, [r7, #28]
 8000a92:	005b      	lsls	r3, r3, #1
 8000a94:	b29b      	uxth	r3, r3
 8000a96:	3303      	adds	r3, #3
 8000a98:	827b      	strh	r3, [r7, #18]
	uint16_t crc = mb_crc16(frame, length);
 8000a9a:	8a7b      	ldrh	r3, [r7, #18]
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	6978      	ldr	r0, [r7, #20]
 8000aa0:	f7ff ff22 	bl	80008e8 <mb_crc16>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	823b      	strh	r3, [r7, #16]
	frame[length] = crc >> 8;
 8000aa8:	8a3b      	ldrh	r3, [r7, #16]
 8000aaa:	0a1b      	lsrs	r3, r3, #8
 8000aac:	b29a      	uxth	r2, r3
 8000aae:	8a7b      	ldrh	r3, [r7, #18]
 8000ab0:	b2d1      	uxtb	r1, r2
 8000ab2:	697a      	ldr	r2, [r7, #20]
 8000ab4:	54d1      	strb	r1, [r2, r3]
	frame[length + 1] = crc & 0xFF;
 8000ab6:	8a7b      	ldrh	r3, [r7, #18]
 8000ab8:	3301      	adds	r3, #1
 8000aba:	8a3a      	ldrh	r2, [r7, #16]
 8000abc:	b2d1      	uxtb	r1, r2
 8000abe:	697a      	ldr	r2, [r7, #20]
 8000ac0:	54d1      	strb	r1, [r2, r3]

	mb_led_hand(true);
 8000ac2:	2001      	movs	r0, #1
 8000ac4:	f7ff ff4c 	bl	8000960 <mb_led_hand>
	HAL_UART_Transmit(&huart1, frame, (length + 2), HAL_MAX_DELAY);
 8000ac8:	8a7b      	ldrh	r3, [r7, #18]
 8000aca:	3302      	adds	r3, #2
 8000acc:	b29a      	uxth	r2, r3
 8000ace:	f04f 33ff 	mov.w	r3, #4294967295
 8000ad2:	6979      	ldr	r1, [r7, #20]
 8000ad4:	4805      	ldr	r0, [pc, #20]	@ (8000aec <mb_send_regs+0x13c>)
 8000ad6:	f002 fa1d 	bl	8002f14 <HAL_UART_Transmit>
	return true;
 8000ada:	2301      	movs	r3, #1
 8000adc:	46b5      	mov	sp, r6
}
 8000ade:	4618      	mov	r0, r3
 8000ae0:	3724      	adds	r7, #36	@ 0x24
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000ae8:	20000028 	.word	0x20000028
 8000aec:	200000c4 	.word	0x200000c4

08000af0 <mb_parse_frame>:

static bool mb_parse_frame(uint8_t *frame) {
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b084      	sub	sp, #16
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]

	Func func = frame[1];
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	785b      	ldrb	r3, [r3, #1]
 8000afc:	73fb      	strb	r3, [r7, #15]
	switch (func) {
 8000afe:	7bfb      	ldrb	r3, [r7, #15]
 8000b00:	3b01      	subs	r3, #1
 8000b02:	2b10      	cmp	r3, #16
 8000b04:	d848      	bhi.n	8000b98 <mb_parse_frame+0xa8>
 8000b06:	a201      	add	r2, pc, #4	@ (adr r2, 8000b0c <mb_parse_frame+0x1c>)
 8000b08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b0c:	08000b99 	.word	0x08000b99
 8000b10:	08000b99 	.word	0x08000b99
 8000b14:	08000b51 	.word	0x08000b51
 8000b18:	08000b99 	.word	0x08000b99
 8000b1c:	08000b99 	.word	0x08000b99
 8000b20:	08000b99 	.word	0x08000b99
 8000b24:	08000b99 	.word	0x08000b99
 8000b28:	08000b99 	.word	0x08000b99
 8000b2c:	08000b99 	.word	0x08000b99
 8000b30:	08000b99 	.word	0x08000b99
 8000b34:	08000b99 	.word	0x08000b99
 8000b38:	08000b99 	.word	0x08000b99
 8000b3c:	08000b99 	.word	0x08000b99
 8000b40:	08000b99 	.word	0x08000b99
 8000b44:	08000b99 	.word	0x08000b99
 8000b48:	08000b99 	.word	0x08000b99
 8000b4c:	08000b99 	.word	0x08000b99
	case READ_COILS:
		break;
	case READ_DISC_INPUTS:
		break;
	case READ_HOLDING_REGS:
		uint16_t addr = (frame[2] << 8) | frame[3];
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	3302      	adds	r3, #2
 8000b54:	781b      	ldrb	r3, [r3, #0]
 8000b56:	b21b      	sxth	r3, r3
 8000b58:	021b      	lsls	r3, r3, #8
 8000b5a:	b21a      	sxth	r2, r3
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	3303      	adds	r3, #3
 8000b60:	781b      	ldrb	r3, [r3, #0]
 8000b62:	b21b      	sxth	r3, r3
 8000b64:	4313      	orrs	r3, r2
 8000b66:	b21b      	sxth	r3, r3
 8000b68:	81bb      	strh	r3, [r7, #12]
		uint16_t count = (frame[4] << 8) | frame[5];
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	3304      	adds	r3, #4
 8000b6e:	781b      	ldrb	r3, [r3, #0]
 8000b70:	b21b      	sxth	r3, r3
 8000b72:	021b      	lsls	r3, r3, #8
 8000b74:	b21a      	sxth	r2, r3
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	3305      	adds	r3, #5
 8000b7a:	781b      	ldrb	r3, [r3, #0]
 8000b7c:	b21b      	sxth	r3, r3
 8000b7e:	4313      	orrs	r3, r2
 8000b80:	b21b      	sxth	r3, r3
 8000b82:	817b      	strh	r3, [r7, #10]
		return mb_send_regs(addr - 1, count);
 8000b84:	89bb      	ldrh	r3, [r7, #12]
 8000b86:	3b01      	subs	r3, #1
 8000b88:	b29b      	uxth	r3, r3
 8000b8a:	897a      	ldrh	r2, [r7, #10]
 8000b8c:	4611      	mov	r1, r2
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f7ff ff0e 	bl	80009b0 <mb_send_regs>
 8000b94:	4603      	mov	r3, r0
 8000b96:	e000      	b.n	8000b9a <mb_parse_frame+0xaa>
	case WRITE_MULT_REGS:
		break;
	case REPORT_SLAVE_ID:
		break;
	}
	return false;
 8000b98:	2300      	movs	r3, #0
}
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	3710      	adds	r7, #16
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop

08000ba4 <mb_reg_init>:


static void mb_reg_init(void) {
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
	holdingRegisters[0] = 0x1234;
 8000ba8:	4b06      	ldr	r3, [pc, #24]	@ (8000bc4 <mb_reg_init+0x20>)
 8000baa:	f241 2234 	movw	r2, #4660	@ 0x1234
 8000bae:	801a      	strh	r2, [r3, #0]
	holdingRegisters[1] = 0x4321;
 8000bb0:	4b04      	ldr	r3, [pc, #16]	@ (8000bc4 <mb_reg_init+0x20>)
 8000bb2:	f244 3221 	movw	r2, #17185	@ 0x4321
 8000bb6:	805a      	strh	r2, [r3, #2]
}
 8000bb8:	bf00      	nop
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc0:	4770      	bx	lr
 8000bc2:	bf00      	nop
 8000bc4:	20000028 	.word	0x20000028

08000bc8 <HAL_UART_RxCpltCallback>:


uint8_t uart_byte = 0;
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b082      	sub	sp, #8
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1) {
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	4a0e      	ldr	r2, [pc, #56]	@ (8000c10 <HAL_UART_RxCpltCallback+0x48>)
 8000bd6:	4293      	cmp	r3, r2
 8000bd8:	d115      	bne.n	8000c06 <HAL_UART_RxCpltCallback+0x3e>
		if (!cb_buffer_push(&cb, (uint8_t*)&uart_byte, sizeof(uint8_t))) {
 8000bda:	2201      	movs	r2, #1
 8000bdc:	490d      	ldr	r1, [pc, #52]	@ (8000c14 <HAL_UART_RxCpltCallback+0x4c>)
 8000bde:	480e      	ldr	r0, [pc, #56]	@ (8000c18 <HAL_UART_RxCpltCallback+0x50>)
 8000be0:	f7ff fcf5 	bl	80005ce <cb_buffer_push>
 8000be4:	4603      	mov	r3, r0
 8000be6:	f083 0301 	eor.w	r3, r3, #1
 8000bea:	b2db      	uxtb	r3, r3
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d005      	beq.n	8000bfc <HAL_UART_RxCpltCallback+0x34>
			HAL_GPIO_WritePin(LED_STATUSD_GPIO_Port, LED_STATUSD_Pin, GPIO_PIN_SET);
 8000bf0:	2201      	movs	r2, #1
 8000bf2:	2120      	movs	r1, #32
 8000bf4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bf8:	f000 fe06 	bl	8001808 <HAL_GPIO_WritePin>
		}
		HAL_UART_Receive_IT(&huart1, &uart_byte, sizeof(uint8_t));
 8000bfc:	2201      	movs	r2, #1
 8000bfe:	4905      	ldr	r1, [pc, #20]	@ (8000c14 <HAL_UART_RxCpltCallback+0x4c>)
 8000c00:	4806      	ldr	r0, [pc, #24]	@ (8000c1c <HAL_UART_RxCpltCallback+0x54>)
 8000c02:	f002 fa11 	bl	8003028 <HAL_UART_Receive_IT>
	}
}
 8000c06:	bf00      	nop
 8000c08:	3708      	adds	r7, #8
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	40013800 	.word	0x40013800
 8000c14:	200000bc 	.word	0x200000bc
 8000c18:	2000002c 	.word	0x2000002c
 8000c1c:	200000c4 	.word	0x200000c4

08000c20 <mb_init>:


void mb_init(void) {
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
	mb_reg_init();
 8000c24:	f7ff ffbe 	bl	8000ba4 <mb_reg_init>
	cb_buffer_init(&cb, buffer, MAX_BUFFER_SIZE);
 8000c28:	2280      	movs	r2, #128	@ 0x80
 8000c2a:	4905      	ldr	r1, [pc, #20]	@ (8000c40 <mb_init+0x20>)
 8000c2c:	4805      	ldr	r0, [pc, #20]	@ (8000c44 <mb_init+0x24>)
 8000c2e:	f7ff fcb3 	bl	8000598 <cb_buffer_init>
	HAL_UART_Receive_IT(&huart1, &uart_byte, sizeof(uint8_t));
 8000c32:	2201      	movs	r2, #1
 8000c34:	4904      	ldr	r1, [pc, #16]	@ (8000c48 <mb_init+0x28>)
 8000c36:	4805      	ldr	r0, [pc, #20]	@ (8000c4c <mb_init+0x2c>)
 8000c38:	f002 f9f6 	bl	8003028 <HAL_UART_Receive_IT>
}
 8000c3c:	bf00      	nop
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	2000003c 	.word	0x2000003c
 8000c44:	2000002c 	.word	0x2000002c
 8000c48:	200000bc 	.word	0x200000bc
 8000c4c:	200000c4 	.word	0x200000c4

08000c50 <mb_read>:


bool mb_read(void) {
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b084      	sub	sp, #16
 8000c54:	af00      	add	r7, sp, #0
	mb_led_hand(false);
 8000c56:	2000      	movs	r0, #0
 8000c58:	f7ff fe82 	bl	8000960 <mb_led_hand>
	if (cb_taken_space(&cb) >= 8) {
 8000c5c:	481f      	ldr	r0, [pc, #124]	@ (8000cdc <mb_read+0x8c>)
 8000c5e:	f7ff fc49 	bl	80004f4 <cb_taken_space>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b07      	cmp	r3, #7
 8000c66:	d933      	bls.n	8000cd0 <mb_read+0x80>
		uint8_t frame[8];
		if (cb_buffer_pull(&cb, frame, 1) == 0) return false;
 8000c68:	1d3b      	adds	r3, r7, #4
 8000c6a:	2201      	movs	r2, #1
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	481b      	ldr	r0, [pc, #108]	@ (8000cdc <mb_read+0x8c>)
 8000c70:	f7ff fd05 	bl	800067e <cb_buffer_pull>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d101      	bne.n	8000c7e <mb_read+0x2e>
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	e029      	b.n	8000cd2 <mb_read+0x82>

		if (frame[0] == uC) {
 8000c7e:	793b      	ldrb	r3, [r7, #4]
 8000c80:	2b01      	cmp	r3, #1
 8000c82:	d125      	bne.n	8000cd0 <mb_read+0x80>
			if (cb_buffer_pull(&cb, frame + 1, 7) == 7) {
 8000c84:	1d3b      	adds	r3, r7, #4
 8000c86:	3301      	adds	r3, #1
 8000c88:	2207      	movs	r2, #7
 8000c8a:	4619      	mov	r1, r3
 8000c8c:	4813      	ldr	r0, [pc, #76]	@ (8000cdc <mb_read+0x8c>)
 8000c8e:	f7ff fcf6 	bl	800067e <cb_buffer_pull>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b07      	cmp	r3, #7
 8000c96:	d119      	bne.n	8000ccc <mb_read+0x7c>
				uint16_t received_crc = (frame[6] << 8) | frame[7];
 8000c98:	7abb      	ldrb	r3, [r7, #10]
 8000c9a:	b21b      	sxth	r3, r3
 8000c9c:	021b      	lsls	r3, r3, #8
 8000c9e:	b21a      	sxth	r2, r3
 8000ca0:	7afb      	ldrb	r3, [r7, #11]
 8000ca2:	b21b      	sxth	r3, r3
 8000ca4:	4313      	orrs	r3, r2
 8000ca6:	b21b      	sxth	r3, r3
 8000ca8:	81fb      	strh	r3, [r7, #14]
				uint16_t crc = mb_crc16(frame, 6);
 8000caa:	1d3b      	adds	r3, r7, #4
 8000cac:	2106      	movs	r1, #6
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f7ff fe1a 	bl	80008e8 <mb_crc16>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	81bb      	strh	r3, [r7, #12]
				if (crc == received_crc)
 8000cb8:	89ba      	ldrh	r2, [r7, #12]
 8000cba:	89fb      	ldrh	r3, [r7, #14]
 8000cbc:	429a      	cmp	r2, r3
 8000cbe:	d107      	bne.n	8000cd0 <mb_read+0x80>
					return mb_parse_frame(frame);
 8000cc0:	1d3b      	adds	r3, r7, #4
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f7ff ff14 	bl	8000af0 <mb_parse_frame>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	e002      	b.n	8000cd2 <mb_read+0x82>
			} else {
				return false;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	e000      	b.n	8000cd2 <mb_read+0x82>
			}
		}
	}
	return false;
 8000cd0:	2300      	movs	r3, #0
}
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	3710      	adds	r7, #16
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	2000002c 	.word	0x2000002c

08000ce0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b083      	sub	sp, #12
 8000ce4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ce6:	4b0f      	ldr	r3, [pc, #60]	@ (8000d24 <HAL_MspInit+0x44>)
 8000ce8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000cea:	4a0e      	ldr	r2, [pc, #56]	@ (8000d24 <HAL_MspInit+0x44>)
 8000cec:	f043 0301 	orr.w	r3, r3, #1
 8000cf0:	6613      	str	r3, [r2, #96]	@ 0x60
 8000cf2:	4b0c      	ldr	r3, [pc, #48]	@ (8000d24 <HAL_MspInit+0x44>)
 8000cf4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000cf6:	f003 0301 	and.w	r3, r3, #1
 8000cfa:	607b      	str	r3, [r7, #4]
 8000cfc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cfe:	4b09      	ldr	r3, [pc, #36]	@ (8000d24 <HAL_MspInit+0x44>)
 8000d00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d02:	4a08      	ldr	r2, [pc, #32]	@ (8000d24 <HAL_MspInit+0x44>)
 8000d04:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d08:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d0a:	4b06      	ldr	r3, [pc, #24]	@ (8000d24 <HAL_MspInit+0x44>)
 8000d0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d12:	603b      	str	r3, [r7, #0]
 8000d14:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d16:	bf00      	nop
 8000d18:	370c      	adds	r7, #12
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr
 8000d22:	bf00      	nop
 8000d24:	40021000 	.word	0x40021000

08000d28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d2c:	bf00      	nop
 8000d2e:	e7fd      	b.n	8000d2c <NMI_Handler+0x4>

08000d30 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d34:	bf00      	nop
 8000d36:	e7fd      	b.n	8000d34 <HardFault_Handler+0x4>

08000d38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d3c:	bf00      	nop
 8000d3e:	e7fd      	b.n	8000d3c <MemManage_Handler+0x4>

08000d40 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d44:	bf00      	nop
 8000d46:	e7fd      	b.n	8000d44 <BusFault_Handler+0x4>

08000d48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d4c:	bf00      	nop
 8000d4e:	e7fd      	b.n	8000d4c <UsageFault_Handler+0x4>

08000d50 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d54:	bf00      	nop
 8000d56:	46bd      	mov	sp, r7
 8000d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5c:	4770      	bx	lr

08000d5e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d5e:	b480      	push	{r7}
 8000d60:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d62:	bf00      	nop
 8000d64:	46bd      	mov	sp, r7
 8000d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6a:	4770      	bx	lr

08000d6c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d70:	bf00      	nop
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr

08000d7a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d7a:	b580      	push	{r7, lr}
 8000d7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d7e:	f000 f9c5 	bl	800110c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d82:	bf00      	nop
 8000d84:	bd80      	pop	{r7, pc}
	...

08000d88 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000d8c:	4802      	ldr	r0, [pc, #8]	@ (8000d98 <USART1_IRQHandler+0x10>)
 8000d8e:	f002 f997 	bl	80030c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000d92:	bf00      	nop
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	200000c4 	.word	0x200000c4

08000d9c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000da0:	4802      	ldr	r0, [pc, #8]	@ (8000dac <USART2_IRQHandler+0x10>)
 8000da2:	f002 f98d 	bl	80030c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000da6:	bf00      	nop
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	2000014c 	.word	0x2000014c

08000db0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000db4:	4b06      	ldr	r3, [pc, #24]	@ (8000dd0 <SystemInit+0x20>)
 8000db6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000dba:	4a05      	ldr	r2, [pc, #20]	@ (8000dd0 <SystemInit+0x20>)
 8000dbc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000dc0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000dc4:	bf00      	nop
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr
 8000dce:	bf00      	nop
 8000dd0:	e000ed00 	.word	0xe000ed00

08000dd4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000dd8:	4b15      	ldr	r3, [pc, #84]	@ (8000e30 <MX_USART1_UART_Init+0x5c>)
 8000dda:	4a16      	ldr	r2, [pc, #88]	@ (8000e34 <MX_USART1_UART_Init+0x60>)
 8000ddc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000dde:	4b14      	ldr	r3, [pc, #80]	@ (8000e30 <MX_USART1_UART_Init+0x5c>)
 8000de0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000de4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_9B;
 8000de6:	4b12      	ldr	r3, [pc, #72]	@ (8000e30 <MX_USART1_UART_Init+0x5c>)
 8000de8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000dec:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000dee:	4b10      	ldr	r3, [pc, #64]	@ (8000e30 <MX_USART1_UART_Init+0x5c>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_EVEN;
 8000df4:	4b0e      	ldr	r3, [pc, #56]	@ (8000e30 <MX_USART1_UART_Init+0x5c>)
 8000df6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000dfa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000dfc:	4b0c      	ldr	r3, [pc, #48]	@ (8000e30 <MX_USART1_UART_Init+0x5c>)
 8000dfe:	220c      	movs	r2, #12
 8000e00:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e02:	4b0b      	ldr	r3, [pc, #44]	@ (8000e30 <MX_USART1_UART_Init+0x5c>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e08:	4b09      	ldr	r3, [pc, #36]	@ (8000e30 <MX_USART1_UART_Init+0x5c>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e0e:	4b08      	ldr	r3, [pc, #32]	@ (8000e30 <MX_USART1_UART_Init+0x5c>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e14:	4b06      	ldr	r3, [pc, #24]	@ (8000e30 <MX_USART1_UART_Init+0x5c>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000e1a:	4805      	ldr	r0, [pc, #20]	@ (8000e30 <MX_USART1_UART_Init+0x5c>)
 8000e1c:	f002 f82c 	bl	8002e78 <HAL_UART_Init>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d001      	beq.n	8000e2a <MX_USART1_UART_Init+0x56>
  {
    Error_Handler();
 8000e26:	f7ff fd58 	bl	80008da <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000e2a:	bf00      	nop
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	200000c4 	.word	0x200000c4
 8000e34:	40013800 	.word	0x40013800

08000e38 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e3c:	4b15      	ldr	r3, [pc, #84]	@ (8000e94 <MX_USART2_UART_Init+0x5c>)
 8000e3e:	4a16      	ldr	r2, [pc, #88]	@ (8000e98 <MX_USART2_UART_Init+0x60>)
 8000e40:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000e42:	4b14      	ldr	r3, [pc, #80]	@ (8000e94 <MX_USART2_UART_Init+0x5c>)
 8000e44:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000e48:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8000e4a:	4b12      	ldr	r3, [pc, #72]	@ (8000e94 <MX_USART2_UART_Init+0x5c>)
 8000e4c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000e50:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e52:	4b10      	ldr	r3, [pc, #64]	@ (8000e94 <MX_USART2_UART_Init+0x5c>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8000e58:	4b0e      	ldr	r3, [pc, #56]	@ (8000e94 <MX_USART2_UART_Init+0x5c>)
 8000e5a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000e5e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e60:	4b0c      	ldr	r3, [pc, #48]	@ (8000e94 <MX_USART2_UART_Init+0x5c>)
 8000e62:	220c      	movs	r2, #12
 8000e64:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e66:	4b0b      	ldr	r3, [pc, #44]	@ (8000e94 <MX_USART2_UART_Init+0x5c>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e6c:	4b09      	ldr	r3, [pc, #36]	@ (8000e94 <MX_USART2_UART_Init+0x5c>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e72:	4b08      	ldr	r3, [pc, #32]	@ (8000e94 <MX_USART2_UART_Init+0x5c>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e78:	4b06      	ldr	r3, [pc, #24]	@ (8000e94 <MX_USART2_UART_Init+0x5c>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e7e:	4805      	ldr	r0, [pc, #20]	@ (8000e94 <MX_USART2_UART_Init+0x5c>)
 8000e80:	f001 fffa 	bl	8002e78 <HAL_UART_Init>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d001      	beq.n	8000e8e <MX_USART2_UART_Init+0x56>
  {
    Error_Handler();
 8000e8a:	f7ff fd26 	bl	80008da <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e8e:	bf00      	nop
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	2000014c 	.word	0x2000014c
 8000e98:	40004400 	.word	0x40004400

08000e9c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b0ae      	sub	sp, #184	@ 0xb8
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea4:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	601a      	str	r2, [r3, #0]
 8000eac:	605a      	str	r2, [r3, #4]
 8000eae:	609a      	str	r2, [r3, #8]
 8000eb0:	60da      	str	r2, [r3, #12]
 8000eb2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000eb4:	f107 031c 	add.w	r3, r7, #28
 8000eb8:	2288      	movs	r2, #136	@ 0x88
 8000eba:	2100      	movs	r1, #0
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f003 fbc5 	bl	800464c <memset>
  if(uartHandle->Instance==USART1)
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	4a4b      	ldr	r2, [pc, #300]	@ (8000ff4 <HAL_UART_MspInit+0x158>)
 8000ec8:	4293      	cmp	r3, r2
 8000eca:	d145      	bne.n	8000f58 <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000ecc:	2301      	movs	r3, #1
 8000ece:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ed4:	f107 031c 	add.w	r3, r7, #28
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f001 fb11 	bl	8002500 <HAL_RCCEx_PeriphCLKConfig>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d001      	beq.n	8000ee8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000ee4:	f7ff fcf9 	bl	80008da <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ee8:	4b43      	ldr	r3, [pc, #268]	@ (8000ff8 <HAL_UART_MspInit+0x15c>)
 8000eea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000eec:	4a42      	ldr	r2, [pc, #264]	@ (8000ff8 <HAL_UART_MspInit+0x15c>)
 8000eee:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ef2:	6613      	str	r3, [r2, #96]	@ 0x60
 8000ef4:	4b40      	ldr	r3, [pc, #256]	@ (8000ff8 <HAL_UART_MspInit+0x15c>)
 8000ef6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ef8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000efc:	61bb      	str	r3, [r7, #24]
 8000efe:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f00:	4b3d      	ldr	r3, [pc, #244]	@ (8000ff8 <HAL_UART_MspInit+0x15c>)
 8000f02:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f04:	4a3c      	ldr	r2, [pc, #240]	@ (8000ff8 <HAL_UART_MspInit+0x15c>)
 8000f06:	f043 0301 	orr.w	r3, r3, #1
 8000f0a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f0c:	4b3a      	ldr	r3, [pc, #232]	@ (8000ff8 <HAL_UART_MspInit+0x15c>)
 8000f0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f10:	f003 0301 	and.w	r3, r3, #1
 8000f14:	617b      	str	r3, [r7, #20]
 8000f16:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000f18:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000f1c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f20:	2302      	movs	r3, #2
 8000f22:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f26:	2300      	movs	r3, #0
 8000f28:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f2c:	2303      	movs	r3, #3
 8000f2e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000f32:	2307      	movs	r3, #7
 8000f34:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f38:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f42:	f000 fab7 	bl	80014b4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000f46:	2200      	movs	r2, #0
 8000f48:	2100      	movs	r1, #0
 8000f4a:	2025      	movs	r0, #37	@ 0x25
 8000f4c:	f000 f9fd 	bl	800134a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000f50:	2025      	movs	r0, #37	@ 0x25
 8000f52:	f000 fa16 	bl	8001382 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000f56:	e048      	b.n	8000fea <HAL_UART_MspInit+0x14e>
  else if(uartHandle->Instance==USART2)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	4a27      	ldr	r2, [pc, #156]	@ (8000ffc <HAL_UART_MspInit+0x160>)
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d143      	bne.n	8000fea <HAL_UART_MspInit+0x14e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000f62:	2302      	movs	r3, #2
 8000f64:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000f66:	2300      	movs	r3, #0
 8000f68:	65bb      	str	r3, [r7, #88]	@ 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f6a:	f107 031c 	add.w	r3, r7, #28
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f001 fac6 	bl	8002500 <HAL_RCCEx_PeriphCLKConfig>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d001      	beq.n	8000f7e <HAL_UART_MspInit+0xe2>
      Error_Handler();
 8000f7a:	f7ff fcae 	bl	80008da <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f7e:	4b1e      	ldr	r3, [pc, #120]	@ (8000ff8 <HAL_UART_MspInit+0x15c>)
 8000f80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f82:	4a1d      	ldr	r2, [pc, #116]	@ (8000ff8 <HAL_UART_MspInit+0x15c>)
 8000f84:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f88:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f8a:	4b1b      	ldr	r3, [pc, #108]	@ (8000ff8 <HAL_UART_MspInit+0x15c>)
 8000f8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f92:	613b      	str	r3, [r7, #16]
 8000f94:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f96:	4b18      	ldr	r3, [pc, #96]	@ (8000ff8 <HAL_UART_MspInit+0x15c>)
 8000f98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f9a:	4a17      	ldr	r2, [pc, #92]	@ (8000ff8 <HAL_UART_MspInit+0x15c>)
 8000f9c:	f043 0301 	orr.w	r3, r3, #1
 8000fa0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fa2:	4b15      	ldr	r3, [pc, #84]	@ (8000ff8 <HAL_UART_MspInit+0x15c>)
 8000fa4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fa6:	f003 0301 	and.w	r3, r3, #1
 8000faa:	60fb      	str	r3, [r7, #12]
 8000fac:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000fae:	230c      	movs	r3, #12
 8000fb0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb4:	2302      	movs	r3, #2
 8000fb6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fc0:	2303      	movs	r3, #3
 8000fc2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000fc6:	2307      	movs	r3, #7
 8000fc8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fcc:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fd6:	f000 fa6d 	bl	80014b4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000fda:	2200      	movs	r2, #0
 8000fdc:	2100      	movs	r1, #0
 8000fde:	2026      	movs	r0, #38	@ 0x26
 8000fe0:	f000 f9b3 	bl	800134a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000fe4:	2026      	movs	r0, #38	@ 0x26
 8000fe6:	f000 f9cc 	bl	8001382 <HAL_NVIC_EnableIRQ>
}
 8000fea:	bf00      	nop
 8000fec:	37b8      	adds	r7, #184	@ 0xb8
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	40013800 	.word	0x40013800
 8000ff8:	40021000 	.word	0x40021000
 8000ffc:	40004400 	.word	0x40004400

08001000 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001000:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001038 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001004:	f7ff fed4 	bl	8000db0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001008:	480c      	ldr	r0, [pc, #48]	@ (800103c <LoopForever+0x6>)
  ldr r1, =_edata
 800100a:	490d      	ldr	r1, [pc, #52]	@ (8001040 <LoopForever+0xa>)
  ldr r2, =_sidata
 800100c:	4a0d      	ldr	r2, [pc, #52]	@ (8001044 <LoopForever+0xe>)
  movs r3, #0
 800100e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001010:	e002      	b.n	8001018 <LoopCopyDataInit>

08001012 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001012:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001014:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001016:	3304      	adds	r3, #4

08001018 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001018:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800101a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800101c:	d3f9      	bcc.n	8001012 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800101e:	4a0a      	ldr	r2, [pc, #40]	@ (8001048 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001020:	4c0a      	ldr	r4, [pc, #40]	@ (800104c <LoopForever+0x16>)
  movs r3, #0
 8001022:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001024:	e001      	b.n	800102a <LoopFillZerobss>

08001026 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001026:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001028:	3204      	adds	r2, #4

0800102a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800102a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800102c:	d3fb      	bcc.n	8001026 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800102e:	f003 fb15 	bl	800465c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001032:	f7ff fbe7 	bl	8000804 <main>

08001036 <LoopForever>:

LoopForever:
    b LoopForever
 8001036:	e7fe      	b.n	8001036 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001038:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800103c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001040:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001044:	08004730 	.word	0x08004730
  ldr r2, =_sbss
 8001048:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800104c:	200001d8 	.word	0x200001d8

08001050 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001050:	e7fe      	b.n	8001050 <ADC1_2_IRQHandler>
	...

08001054 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800105a:	2300      	movs	r3, #0
 800105c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800105e:	4b0c      	ldr	r3, [pc, #48]	@ (8001090 <HAL_Init+0x3c>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	4a0b      	ldr	r2, [pc, #44]	@ (8001090 <HAL_Init+0x3c>)
 8001064:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001068:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800106a:	2003      	movs	r0, #3
 800106c:	f000 f962 	bl	8001334 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001070:	2000      	movs	r0, #0
 8001072:	f000 f80f 	bl	8001094 <HAL_InitTick>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d002      	beq.n	8001082 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800107c:	2301      	movs	r3, #1
 800107e:	71fb      	strb	r3, [r7, #7]
 8001080:	e001      	b.n	8001086 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001082:	f7ff fe2d 	bl	8000ce0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001086:	79fb      	ldrb	r3, [r7, #7]
}
 8001088:	4618      	mov	r0, r3
 800108a:	3708      	adds	r7, #8
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	40022000 	.word	0x40022000

08001094 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b084      	sub	sp, #16
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800109c:	2300      	movs	r3, #0
 800109e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80010a0:	4b17      	ldr	r3, [pc, #92]	@ (8001100 <HAL_InitTick+0x6c>)
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d023      	beq.n	80010f0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80010a8:	4b16      	ldr	r3, [pc, #88]	@ (8001104 <HAL_InitTick+0x70>)
 80010aa:	681a      	ldr	r2, [r3, #0]
 80010ac:	4b14      	ldr	r3, [pc, #80]	@ (8001100 <HAL_InitTick+0x6c>)
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	4619      	mov	r1, r3
 80010b2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80010ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80010be:	4618      	mov	r0, r3
 80010c0:	f000 f96d 	bl	800139e <HAL_SYSTICK_Config>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d10f      	bne.n	80010ea <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	2b0f      	cmp	r3, #15
 80010ce:	d809      	bhi.n	80010e4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010d0:	2200      	movs	r2, #0
 80010d2:	6879      	ldr	r1, [r7, #4]
 80010d4:	f04f 30ff 	mov.w	r0, #4294967295
 80010d8:	f000 f937 	bl	800134a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80010dc:	4a0a      	ldr	r2, [pc, #40]	@ (8001108 <HAL_InitTick+0x74>)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	6013      	str	r3, [r2, #0]
 80010e2:	e007      	b.n	80010f4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80010e4:	2301      	movs	r3, #1
 80010e6:	73fb      	strb	r3, [r7, #15]
 80010e8:	e004      	b.n	80010f4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80010ea:	2301      	movs	r3, #1
 80010ec:	73fb      	strb	r3, [r7, #15]
 80010ee:	e001      	b.n	80010f4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80010f0:	2301      	movs	r3, #1
 80010f2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80010f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	3710      	adds	r7, #16
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	20000008 	.word	0x20000008
 8001104:	20000000 	.word	0x20000000
 8001108:	20000004 	.word	0x20000004

0800110c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001110:	4b06      	ldr	r3, [pc, #24]	@ (800112c <HAL_IncTick+0x20>)
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	461a      	mov	r2, r3
 8001116:	4b06      	ldr	r3, [pc, #24]	@ (8001130 <HAL_IncTick+0x24>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	4413      	add	r3, r2
 800111c:	4a04      	ldr	r2, [pc, #16]	@ (8001130 <HAL_IncTick+0x24>)
 800111e:	6013      	str	r3, [r2, #0]
}
 8001120:	bf00      	nop
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr
 800112a:	bf00      	nop
 800112c:	20000008 	.word	0x20000008
 8001130:	200001d4 	.word	0x200001d4

08001134 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
  return uwTick;
 8001138:	4b03      	ldr	r3, [pc, #12]	@ (8001148 <HAL_GetTick+0x14>)
 800113a:	681b      	ldr	r3, [r3, #0]
}
 800113c:	4618      	mov	r0, r3
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr
 8001146:	bf00      	nop
 8001148:	200001d4 	.word	0x200001d4

0800114c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b084      	sub	sp, #16
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001154:	f7ff ffee 	bl	8001134 <HAL_GetTick>
 8001158:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001164:	d005      	beq.n	8001172 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001166:	4b0a      	ldr	r3, [pc, #40]	@ (8001190 <HAL_Delay+0x44>)
 8001168:	781b      	ldrb	r3, [r3, #0]
 800116a:	461a      	mov	r2, r3
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	4413      	add	r3, r2
 8001170:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001172:	bf00      	nop
 8001174:	f7ff ffde 	bl	8001134 <HAL_GetTick>
 8001178:	4602      	mov	r2, r0
 800117a:	68bb      	ldr	r3, [r7, #8]
 800117c:	1ad3      	subs	r3, r2, r3
 800117e:	68fa      	ldr	r2, [r7, #12]
 8001180:	429a      	cmp	r2, r3
 8001182:	d8f7      	bhi.n	8001174 <HAL_Delay+0x28>
  {
  }
}
 8001184:	bf00      	nop
 8001186:	bf00      	nop
 8001188:	3710      	adds	r7, #16
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	20000008 	.word	0x20000008

08001194 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001194:	b480      	push	{r7}
 8001196:	b085      	sub	sp, #20
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	f003 0307 	and.w	r3, r3, #7
 80011a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011a4:	4b0c      	ldr	r3, [pc, #48]	@ (80011d8 <__NVIC_SetPriorityGrouping+0x44>)
 80011a6:	68db      	ldr	r3, [r3, #12]
 80011a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011aa:	68ba      	ldr	r2, [r7, #8]
 80011ac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80011b0:	4013      	ands	r3, r2
 80011b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011b8:	68bb      	ldr	r3, [r7, #8]
 80011ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011bc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80011c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011c6:	4a04      	ldr	r2, [pc, #16]	@ (80011d8 <__NVIC_SetPriorityGrouping+0x44>)
 80011c8:	68bb      	ldr	r3, [r7, #8]
 80011ca:	60d3      	str	r3, [r2, #12]
}
 80011cc:	bf00      	nop
 80011ce:	3714      	adds	r7, #20
 80011d0:	46bd      	mov	sp, r7
 80011d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d6:	4770      	bx	lr
 80011d8:	e000ed00 	.word	0xe000ed00

080011dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011e0:	4b04      	ldr	r3, [pc, #16]	@ (80011f4 <__NVIC_GetPriorityGrouping+0x18>)
 80011e2:	68db      	ldr	r3, [r3, #12]
 80011e4:	0a1b      	lsrs	r3, r3, #8
 80011e6:	f003 0307 	and.w	r3, r3, #7
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	46bd      	mov	sp, r7
 80011ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f2:	4770      	bx	lr
 80011f4:	e000ed00 	.word	0xe000ed00

080011f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b083      	sub	sp, #12
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	4603      	mov	r3, r0
 8001200:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001202:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001206:	2b00      	cmp	r3, #0
 8001208:	db0b      	blt.n	8001222 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800120a:	79fb      	ldrb	r3, [r7, #7]
 800120c:	f003 021f 	and.w	r2, r3, #31
 8001210:	4907      	ldr	r1, [pc, #28]	@ (8001230 <__NVIC_EnableIRQ+0x38>)
 8001212:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001216:	095b      	lsrs	r3, r3, #5
 8001218:	2001      	movs	r0, #1
 800121a:	fa00 f202 	lsl.w	r2, r0, r2
 800121e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001222:	bf00      	nop
 8001224:	370c      	adds	r7, #12
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr
 800122e:	bf00      	nop
 8001230:	e000e100 	.word	0xe000e100

08001234 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001234:	b480      	push	{r7}
 8001236:	b083      	sub	sp, #12
 8001238:	af00      	add	r7, sp, #0
 800123a:	4603      	mov	r3, r0
 800123c:	6039      	str	r1, [r7, #0]
 800123e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001240:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001244:	2b00      	cmp	r3, #0
 8001246:	db0a      	blt.n	800125e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	b2da      	uxtb	r2, r3
 800124c:	490c      	ldr	r1, [pc, #48]	@ (8001280 <__NVIC_SetPriority+0x4c>)
 800124e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001252:	0112      	lsls	r2, r2, #4
 8001254:	b2d2      	uxtb	r2, r2
 8001256:	440b      	add	r3, r1
 8001258:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800125c:	e00a      	b.n	8001274 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	b2da      	uxtb	r2, r3
 8001262:	4908      	ldr	r1, [pc, #32]	@ (8001284 <__NVIC_SetPriority+0x50>)
 8001264:	79fb      	ldrb	r3, [r7, #7]
 8001266:	f003 030f 	and.w	r3, r3, #15
 800126a:	3b04      	subs	r3, #4
 800126c:	0112      	lsls	r2, r2, #4
 800126e:	b2d2      	uxtb	r2, r2
 8001270:	440b      	add	r3, r1
 8001272:	761a      	strb	r2, [r3, #24]
}
 8001274:	bf00      	nop
 8001276:	370c      	adds	r7, #12
 8001278:	46bd      	mov	sp, r7
 800127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127e:	4770      	bx	lr
 8001280:	e000e100 	.word	0xe000e100
 8001284:	e000ed00 	.word	0xe000ed00

08001288 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001288:	b480      	push	{r7}
 800128a:	b089      	sub	sp, #36	@ 0x24
 800128c:	af00      	add	r7, sp, #0
 800128e:	60f8      	str	r0, [r7, #12]
 8001290:	60b9      	str	r1, [r7, #8]
 8001292:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	f003 0307 	and.w	r3, r3, #7
 800129a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800129c:	69fb      	ldr	r3, [r7, #28]
 800129e:	f1c3 0307 	rsb	r3, r3, #7
 80012a2:	2b04      	cmp	r3, #4
 80012a4:	bf28      	it	cs
 80012a6:	2304      	movcs	r3, #4
 80012a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012aa:	69fb      	ldr	r3, [r7, #28]
 80012ac:	3304      	adds	r3, #4
 80012ae:	2b06      	cmp	r3, #6
 80012b0:	d902      	bls.n	80012b8 <NVIC_EncodePriority+0x30>
 80012b2:	69fb      	ldr	r3, [r7, #28]
 80012b4:	3b03      	subs	r3, #3
 80012b6:	e000      	b.n	80012ba <NVIC_EncodePriority+0x32>
 80012b8:	2300      	movs	r3, #0
 80012ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012bc:	f04f 32ff 	mov.w	r2, #4294967295
 80012c0:	69bb      	ldr	r3, [r7, #24]
 80012c2:	fa02 f303 	lsl.w	r3, r2, r3
 80012c6:	43da      	mvns	r2, r3
 80012c8:	68bb      	ldr	r3, [r7, #8]
 80012ca:	401a      	ands	r2, r3
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012d0:	f04f 31ff 	mov.w	r1, #4294967295
 80012d4:	697b      	ldr	r3, [r7, #20]
 80012d6:	fa01 f303 	lsl.w	r3, r1, r3
 80012da:	43d9      	mvns	r1, r3
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012e0:	4313      	orrs	r3, r2
         );
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	3724      	adds	r7, #36	@ 0x24
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr
	...

080012f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	3b01      	subs	r3, #1
 80012fc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001300:	d301      	bcc.n	8001306 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001302:	2301      	movs	r3, #1
 8001304:	e00f      	b.n	8001326 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001306:	4a0a      	ldr	r2, [pc, #40]	@ (8001330 <SysTick_Config+0x40>)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	3b01      	subs	r3, #1
 800130c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800130e:	210f      	movs	r1, #15
 8001310:	f04f 30ff 	mov.w	r0, #4294967295
 8001314:	f7ff ff8e 	bl	8001234 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001318:	4b05      	ldr	r3, [pc, #20]	@ (8001330 <SysTick_Config+0x40>)
 800131a:	2200      	movs	r2, #0
 800131c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800131e:	4b04      	ldr	r3, [pc, #16]	@ (8001330 <SysTick_Config+0x40>)
 8001320:	2207      	movs	r2, #7
 8001322:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001324:	2300      	movs	r3, #0
}
 8001326:	4618      	mov	r0, r3
 8001328:	3708      	adds	r7, #8
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	e000e010 	.word	0xe000e010

08001334 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800133c:	6878      	ldr	r0, [r7, #4]
 800133e:	f7ff ff29 	bl	8001194 <__NVIC_SetPriorityGrouping>
}
 8001342:	bf00      	nop
 8001344:	3708      	adds	r7, #8
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}

0800134a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800134a:	b580      	push	{r7, lr}
 800134c:	b086      	sub	sp, #24
 800134e:	af00      	add	r7, sp, #0
 8001350:	4603      	mov	r3, r0
 8001352:	60b9      	str	r1, [r7, #8]
 8001354:	607a      	str	r2, [r7, #4]
 8001356:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001358:	2300      	movs	r3, #0
 800135a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800135c:	f7ff ff3e 	bl	80011dc <__NVIC_GetPriorityGrouping>
 8001360:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001362:	687a      	ldr	r2, [r7, #4]
 8001364:	68b9      	ldr	r1, [r7, #8]
 8001366:	6978      	ldr	r0, [r7, #20]
 8001368:	f7ff ff8e 	bl	8001288 <NVIC_EncodePriority>
 800136c:	4602      	mov	r2, r0
 800136e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001372:	4611      	mov	r1, r2
 8001374:	4618      	mov	r0, r3
 8001376:	f7ff ff5d 	bl	8001234 <__NVIC_SetPriority>
}
 800137a:	bf00      	nop
 800137c:	3718      	adds	r7, #24
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}

08001382 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001382:	b580      	push	{r7, lr}
 8001384:	b082      	sub	sp, #8
 8001386:	af00      	add	r7, sp, #0
 8001388:	4603      	mov	r3, r0
 800138a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800138c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001390:	4618      	mov	r0, r3
 8001392:	f7ff ff31 	bl	80011f8 <__NVIC_EnableIRQ>
}
 8001396:	bf00      	nop
 8001398:	3708      	adds	r7, #8
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}

0800139e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800139e:	b580      	push	{r7, lr}
 80013a0:	b082      	sub	sp, #8
 80013a2:	af00      	add	r7, sp, #0
 80013a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013a6:	6878      	ldr	r0, [r7, #4]
 80013a8:	f7ff ffa2 	bl	80012f0 <SysTick_Config>
 80013ac:	4603      	mov	r3, r0
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	3708      	adds	r7, #8
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}

080013b6 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80013b6:	b480      	push	{r7}
 80013b8:	b085      	sub	sp, #20
 80013ba:	af00      	add	r7, sp, #0
 80013bc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80013be:	2300      	movs	r3, #0
 80013c0:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80013c8:	b2db      	uxtb	r3, r3
 80013ca:	2b02      	cmp	r3, #2
 80013cc:	d008      	beq.n	80013e0 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	2204      	movs	r2, #4
 80013d2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	2200      	movs	r2, #0
 80013d8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80013dc:	2301      	movs	r3, #1
 80013de:	e022      	b.n	8001426 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	681a      	ldr	r2, [r3, #0]
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f022 020e 	bic.w	r2, r2, #14
 80013ee:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	681a      	ldr	r2, [r3, #0]
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f022 0201 	bic.w	r2, r2, #1
 80013fe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001404:	f003 021c 	and.w	r2, r3, #28
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800140c:	2101      	movs	r1, #1
 800140e:	fa01 f202 	lsl.w	r2, r1, r2
 8001412:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	2201      	movs	r2, #1
 8001418:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	2200      	movs	r2, #0
 8001420:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8001424:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001426:	4618      	mov	r0, r3
 8001428:	3714      	adds	r7, #20
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr

08001432 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001432:	b580      	push	{r7, lr}
 8001434:	b084      	sub	sp, #16
 8001436:	af00      	add	r7, sp, #0
 8001438:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800143a:	2300      	movs	r3, #0
 800143c:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001444:	b2db      	uxtb	r3, r3
 8001446:	2b02      	cmp	r3, #2
 8001448:	d005      	beq.n	8001456 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	2204      	movs	r2, #4
 800144e:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001450:	2301      	movs	r3, #1
 8001452:	73fb      	strb	r3, [r7, #15]
 8001454:	e029      	b.n	80014aa <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	681a      	ldr	r2, [r3, #0]
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f022 020e 	bic.w	r2, r2, #14
 8001464:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	681a      	ldr	r2, [r3, #0]
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f022 0201 	bic.w	r2, r2, #1
 8001474:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800147a:	f003 021c 	and.w	r2, r3, #28
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001482:	2101      	movs	r1, #1
 8001484:	fa01 f202 	lsl.w	r2, r1, r2
 8001488:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	2201      	movs	r2, #1
 800148e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	2200      	movs	r2, #0
 8001496:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d003      	beq.n	80014aa <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80014a6:	6878      	ldr	r0, [r7, #4]
 80014a8:	4798      	blx	r3
    }
  }
  return status;
 80014aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80014ac:	4618      	mov	r0, r3
 80014ae:	3710      	adds	r7, #16
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}

080014b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b087      	sub	sp, #28
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
 80014bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80014be:	2300      	movs	r3, #0
 80014c0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014c2:	e17f      	b.n	80017c4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	681a      	ldr	r2, [r3, #0]
 80014c8:	2101      	movs	r1, #1
 80014ca:	697b      	ldr	r3, [r7, #20]
 80014cc:	fa01 f303 	lsl.w	r3, r1, r3
 80014d0:	4013      	ands	r3, r2
 80014d2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	f000 8171 	beq.w	80017be <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	f003 0303 	and.w	r3, r3, #3
 80014e4:	2b01      	cmp	r3, #1
 80014e6:	d005      	beq.n	80014f4 <HAL_GPIO_Init+0x40>
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	f003 0303 	and.w	r3, r3, #3
 80014f0:	2b02      	cmp	r3, #2
 80014f2:	d130      	bne.n	8001556 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	689b      	ldr	r3, [r3, #8]
 80014f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80014fa:	697b      	ldr	r3, [r7, #20]
 80014fc:	005b      	lsls	r3, r3, #1
 80014fe:	2203      	movs	r2, #3
 8001500:	fa02 f303 	lsl.w	r3, r2, r3
 8001504:	43db      	mvns	r3, r3
 8001506:	693a      	ldr	r2, [r7, #16]
 8001508:	4013      	ands	r3, r2
 800150a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	68da      	ldr	r2, [r3, #12]
 8001510:	697b      	ldr	r3, [r7, #20]
 8001512:	005b      	lsls	r3, r3, #1
 8001514:	fa02 f303 	lsl.w	r3, r2, r3
 8001518:	693a      	ldr	r2, [r7, #16]
 800151a:	4313      	orrs	r3, r2
 800151c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	693a      	ldr	r2, [r7, #16]
 8001522:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800152a:	2201      	movs	r2, #1
 800152c:	697b      	ldr	r3, [r7, #20]
 800152e:	fa02 f303 	lsl.w	r3, r2, r3
 8001532:	43db      	mvns	r3, r3
 8001534:	693a      	ldr	r2, [r7, #16]
 8001536:	4013      	ands	r3, r2
 8001538:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	091b      	lsrs	r3, r3, #4
 8001540:	f003 0201 	and.w	r2, r3, #1
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	fa02 f303 	lsl.w	r3, r2, r3
 800154a:	693a      	ldr	r2, [r7, #16]
 800154c:	4313      	orrs	r3, r2
 800154e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	693a      	ldr	r2, [r7, #16]
 8001554:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	f003 0303 	and.w	r3, r3, #3
 800155e:	2b03      	cmp	r3, #3
 8001560:	d118      	bne.n	8001594 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001566:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001568:	2201      	movs	r2, #1
 800156a:	697b      	ldr	r3, [r7, #20]
 800156c:	fa02 f303 	lsl.w	r3, r2, r3
 8001570:	43db      	mvns	r3, r3
 8001572:	693a      	ldr	r2, [r7, #16]
 8001574:	4013      	ands	r3, r2
 8001576:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	08db      	lsrs	r3, r3, #3
 800157e:	f003 0201 	and.w	r2, r3, #1
 8001582:	697b      	ldr	r3, [r7, #20]
 8001584:	fa02 f303 	lsl.w	r3, r2, r3
 8001588:	693a      	ldr	r2, [r7, #16]
 800158a:	4313      	orrs	r3, r2
 800158c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	693a      	ldr	r2, [r7, #16]
 8001592:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	f003 0303 	and.w	r3, r3, #3
 800159c:	2b03      	cmp	r3, #3
 800159e:	d017      	beq.n	80015d0 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	68db      	ldr	r3, [r3, #12]
 80015a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80015a6:	697b      	ldr	r3, [r7, #20]
 80015a8:	005b      	lsls	r3, r3, #1
 80015aa:	2203      	movs	r2, #3
 80015ac:	fa02 f303 	lsl.w	r3, r2, r3
 80015b0:	43db      	mvns	r3, r3
 80015b2:	693a      	ldr	r2, [r7, #16]
 80015b4:	4013      	ands	r3, r2
 80015b6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	689a      	ldr	r2, [r3, #8]
 80015bc:	697b      	ldr	r3, [r7, #20]
 80015be:	005b      	lsls	r3, r3, #1
 80015c0:	fa02 f303 	lsl.w	r3, r2, r3
 80015c4:	693a      	ldr	r2, [r7, #16]
 80015c6:	4313      	orrs	r3, r2
 80015c8:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	693a      	ldr	r2, [r7, #16]
 80015ce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	f003 0303 	and.w	r3, r3, #3
 80015d8:	2b02      	cmp	r3, #2
 80015da:	d123      	bne.n	8001624 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	08da      	lsrs	r2, r3, #3
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	3208      	adds	r2, #8
 80015e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015e8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80015ea:	697b      	ldr	r3, [r7, #20]
 80015ec:	f003 0307 	and.w	r3, r3, #7
 80015f0:	009b      	lsls	r3, r3, #2
 80015f2:	220f      	movs	r2, #15
 80015f4:	fa02 f303 	lsl.w	r3, r2, r3
 80015f8:	43db      	mvns	r3, r3
 80015fa:	693a      	ldr	r2, [r7, #16]
 80015fc:	4013      	ands	r3, r2
 80015fe:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	691a      	ldr	r2, [r3, #16]
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	f003 0307 	and.w	r3, r3, #7
 800160a:	009b      	lsls	r3, r3, #2
 800160c:	fa02 f303 	lsl.w	r3, r2, r3
 8001610:	693a      	ldr	r2, [r7, #16]
 8001612:	4313      	orrs	r3, r2
 8001614:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001616:	697b      	ldr	r3, [r7, #20]
 8001618:	08da      	lsrs	r2, r3, #3
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	3208      	adds	r2, #8
 800161e:	6939      	ldr	r1, [r7, #16]
 8001620:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800162a:	697b      	ldr	r3, [r7, #20]
 800162c:	005b      	lsls	r3, r3, #1
 800162e:	2203      	movs	r2, #3
 8001630:	fa02 f303 	lsl.w	r3, r2, r3
 8001634:	43db      	mvns	r3, r3
 8001636:	693a      	ldr	r2, [r7, #16]
 8001638:	4013      	ands	r3, r2
 800163a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	f003 0203 	and.w	r2, r3, #3
 8001644:	697b      	ldr	r3, [r7, #20]
 8001646:	005b      	lsls	r3, r3, #1
 8001648:	fa02 f303 	lsl.w	r3, r2, r3
 800164c:	693a      	ldr	r2, [r7, #16]
 800164e:	4313      	orrs	r3, r2
 8001650:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	693a      	ldr	r2, [r7, #16]
 8001656:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001660:	2b00      	cmp	r3, #0
 8001662:	f000 80ac 	beq.w	80017be <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001666:	4b5f      	ldr	r3, [pc, #380]	@ (80017e4 <HAL_GPIO_Init+0x330>)
 8001668:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800166a:	4a5e      	ldr	r2, [pc, #376]	@ (80017e4 <HAL_GPIO_Init+0x330>)
 800166c:	f043 0301 	orr.w	r3, r3, #1
 8001670:	6613      	str	r3, [r2, #96]	@ 0x60
 8001672:	4b5c      	ldr	r3, [pc, #368]	@ (80017e4 <HAL_GPIO_Init+0x330>)
 8001674:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001676:	f003 0301 	and.w	r3, r3, #1
 800167a:	60bb      	str	r3, [r7, #8]
 800167c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800167e:	4a5a      	ldr	r2, [pc, #360]	@ (80017e8 <HAL_GPIO_Init+0x334>)
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	089b      	lsrs	r3, r3, #2
 8001684:	3302      	adds	r3, #2
 8001686:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800168a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	f003 0303 	and.w	r3, r3, #3
 8001692:	009b      	lsls	r3, r3, #2
 8001694:	220f      	movs	r2, #15
 8001696:	fa02 f303 	lsl.w	r3, r2, r3
 800169a:	43db      	mvns	r3, r3
 800169c:	693a      	ldr	r2, [r7, #16]
 800169e:	4013      	ands	r3, r2
 80016a0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80016a8:	d025      	beq.n	80016f6 <HAL_GPIO_Init+0x242>
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	4a4f      	ldr	r2, [pc, #316]	@ (80017ec <HAL_GPIO_Init+0x338>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d01f      	beq.n	80016f2 <HAL_GPIO_Init+0x23e>
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	4a4e      	ldr	r2, [pc, #312]	@ (80017f0 <HAL_GPIO_Init+0x33c>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d019      	beq.n	80016ee <HAL_GPIO_Init+0x23a>
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	4a4d      	ldr	r2, [pc, #308]	@ (80017f4 <HAL_GPIO_Init+0x340>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d013      	beq.n	80016ea <HAL_GPIO_Init+0x236>
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	4a4c      	ldr	r2, [pc, #304]	@ (80017f8 <HAL_GPIO_Init+0x344>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d00d      	beq.n	80016e6 <HAL_GPIO_Init+0x232>
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	4a4b      	ldr	r2, [pc, #300]	@ (80017fc <HAL_GPIO_Init+0x348>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d007      	beq.n	80016e2 <HAL_GPIO_Init+0x22e>
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	4a4a      	ldr	r2, [pc, #296]	@ (8001800 <HAL_GPIO_Init+0x34c>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d101      	bne.n	80016de <HAL_GPIO_Init+0x22a>
 80016da:	2306      	movs	r3, #6
 80016dc:	e00c      	b.n	80016f8 <HAL_GPIO_Init+0x244>
 80016de:	2307      	movs	r3, #7
 80016e0:	e00a      	b.n	80016f8 <HAL_GPIO_Init+0x244>
 80016e2:	2305      	movs	r3, #5
 80016e4:	e008      	b.n	80016f8 <HAL_GPIO_Init+0x244>
 80016e6:	2304      	movs	r3, #4
 80016e8:	e006      	b.n	80016f8 <HAL_GPIO_Init+0x244>
 80016ea:	2303      	movs	r3, #3
 80016ec:	e004      	b.n	80016f8 <HAL_GPIO_Init+0x244>
 80016ee:	2302      	movs	r3, #2
 80016f0:	e002      	b.n	80016f8 <HAL_GPIO_Init+0x244>
 80016f2:	2301      	movs	r3, #1
 80016f4:	e000      	b.n	80016f8 <HAL_GPIO_Init+0x244>
 80016f6:	2300      	movs	r3, #0
 80016f8:	697a      	ldr	r2, [r7, #20]
 80016fa:	f002 0203 	and.w	r2, r2, #3
 80016fe:	0092      	lsls	r2, r2, #2
 8001700:	4093      	lsls	r3, r2
 8001702:	693a      	ldr	r2, [r7, #16]
 8001704:	4313      	orrs	r3, r2
 8001706:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001708:	4937      	ldr	r1, [pc, #220]	@ (80017e8 <HAL_GPIO_Init+0x334>)
 800170a:	697b      	ldr	r3, [r7, #20]
 800170c:	089b      	lsrs	r3, r3, #2
 800170e:	3302      	adds	r3, #2
 8001710:	693a      	ldr	r2, [r7, #16]
 8001712:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001716:	4b3b      	ldr	r3, [pc, #236]	@ (8001804 <HAL_GPIO_Init+0x350>)
 8001718:	689b      	ldr	r3, [r3, #8]
 800171a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	43db      	mvns	r3, r3
 8001720:	693a      	ldr	r2, [r7, #16]
 8001722:	4013      	ands	r3, r2
 8001724:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800172e:	2b00      	cmp	r3, #0
 8001730:	d003      	beq.n	800173a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001732:	693a      	ldr	r2, [r7, #16]
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	4313      	orrs	r3, r2
 8001738:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800173a:	4a32      	ldr	r2, [pc, #200]	@ (8001804 <HAL_GPIO_Init+0x350>)
 800173c:	693b      	ldr	r3, [r7, #16]
 800173e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001740:	4b30      	ldr	r3, [pc, #192]	@ (8001804 <HAL_GPIO_Init+0x350>)
 8001742:	68db      	ldr	r3, [r3, #12]
 8001744:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	43db      	mvns	r3, r3
 800174a:	693a      	ldr	r2, [r7, #16]
 800174c:	4013      	ands	r3, r2
 800174e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001758:	2b00      	cmp	r3, #0
 800175a:	d003      	beq.n	8001764 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800175c:	693a      	ldr	r2, [r7, #16]
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	4313      	orrs	r3, r2
 8001762:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001764:	4a27      	ldr	r2, [pc, #156]	@ (8001804 <HAL_GPIO_Init+0x350>)
 8001766:	693b      	ldr	r3, [r7, #16]
 8001768:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800176a:	4b26      	ldr	r3, [pc, #152]	@ (8001804 <HAL_GPIO_Init+0x350>)
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	43db      	mvns	r3, r3
 8001774:	693a      	ldr	r2, [r7, #16]
 8001776:	4013      	ands	r3, r2
 8001778:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001782:	2b00      	cmp	r3, #0
 8001784:	d003      	beq.n	800178e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001786:	693a      	ldr	r2, [r7, #16]
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	4313      	orrs	r3, r2
 800178c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800178e:	4a1d      	ldr	r2, [pc, #116]	@ (8001804 <HAL_GPIO_Init+0x350>)
 8001790:	693b      	ldr	r3, [r7, #16]
 8001792:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001794:	4b1b      	ldr	r3, [pc, #108]	@ (8001804 <HAL_GPIO_Init+0x350>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	43db      	mvns	r3, r3
 800179e:	693a      	ldr	r2, [r7, #16]
 80017a0:	4013      	ands	r3, r2
 80017a2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d003      	beq.n	80017b8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80017b0:	693a      	ldr	r2, [r7, #16]
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	4313      	orrs	r3, r2
 80017b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80017b8:	4a12      	ldr	r2, [pc, #72]	@ (8001804 <HAL_GPIO_Init+0x350>)
 80017ba:	693b      	ldr	r3, [r7, #16]
 80017bc:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80017be:	697b      	ldr	r3, [r7, #20]
 80017c0:	3301      	adds	r3, #1
 80017c2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	681a      	ldr	r2, [r3, #0]
 80017c8:	697b      	ldr	r3, [r7, #20]
 80017ca:	fa22 f303 	lsr.w	r3, r2, r3
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	f47f ae78 	bne.w	80014c4 <HAL_GPIO_Init+0x10>
  }
}
 80017d4:	bf00      	nop
 80017d6:	bf00      	nop
 80017d8:	371c      	adds	r7, #28
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr
 80017e2:	bf00      	nop
 80017e4:	40021000 	.word	0x40021000
 80017e8:	40010000 	.word	0x40010000
 80017ec:	48000400 	.word	0x48000400
 80017f0:	48000800 	.word	0x48000800
 80017f4:	48000c00 	.word	0x48000c00
 80017f8:	48001000 	.word	0x48001000
 80017fc:	48001400 	.word	0x48001400
 8001800:	48001800 	.word	0x48001800
 8001804:	40010400 	.word	0x40010400

08001808 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001808:	b480      	push	{r7}
 800180a:	b083      	sub	sp, #12
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
 8001810:	460b      	mov	r3, r1
 8001812:	807b      	strh	r3, [r7, #2]
 8001814:	4613      	mov	r3, r2
 8001816:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001818:	787b      	ldrb	r3, [r7, #1]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d003      	beq.n	8001826 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800181e:	887a      	ldrh	r2, [r7, #2]
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001824:	e002      	b.n	800182c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001826:	887a      	ldrh	r2, [r7, #2]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800182c:	bf00      	nop
 800182e:	370c      	adds	r7, #12
 8001830:	46bd      	mov	sp, r7
 8001832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001836:	4770      	bx	lr

08001838 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800183c:	4b04      	ldr	r3, [pc, #16]	@ (8001850 <HAL_PWREx_GetVoltageRange+0x18>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001844:	4618      	mov	r0, r3
 8001846:	46bd      	mov	sp, r7
 8001848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184c:	4770      	bx	lr
 800184e:	bf00      	nop
 8001850:	40007000 	.word	0x40007000

08001854 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001854:	b480      	push	{r7}
 8001856:	b085      	sub	sp, #20
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001862:	d130      	bne.n	80018c6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001864:	4b23      	ldr	r3, [pc, #140]	@ (80018f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800186c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001870:	d038      	beq.n	80018e4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001872:	4b20      	ldr	r3, [pc, #128]	@ (80018f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800187a:	4a1e      	ldr	r2, [pc, #120]	@ (80018f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800187c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001880:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001882:	4b1d      	ldr	r3, [pc, #116]	@ (80018f8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	2232      	movs	r2, #50	@ 0x32
 8001888:	fb02 f303 	mul.w	r3, r2, r3
 800188c:	4a1b      	ldr	r2, [pc, #108]	@ (80018fc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800188e:	fba2 2303 	umull	r2, r3, r2, r3
 8001892:	0c9b      	lsrs	r3, r3, #18
 8001894:	3301      	adds	r3, #1
 8001896:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001898:	e002      	b.n	80018a0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	3b01      	subs	r3, #1
 800189e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80018a0:	4b14      	ldr	r3, [pc, #80]	@ (80018f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018a2:	695b      	ldr	r3, [r3, #20]
 80018a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80018a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80018ac:	d102      	bne.n	80018b4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d1f2      	bne.n	800189a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80018b4:	4b0f      	ldr	r3, [pc, #60]	@ (80018f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018b6:	695b      	ldr	r3, [r3, #20]
 80018b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80018bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80018c0:	d110      	bne.n	80018e4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80018c2:	2303      	movs	r3, #3
 80018c4:	e00f      	b.n	80018e6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80018c6:	4b0b      	ldr	r3, [pc, #44]	@ (80018f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80018ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80018d2:	d007      	beq.n	80018e4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80018d4:	4b07      	ldr	r3, [pc, #28]	@ (80018f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80018dc:	4a05      	ldr	r2, [pc, #20]	@ (80018f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018de:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80018e2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80018e4:	2300      	movs	r3, #0
}
 80018e6:	4618      	mov	r0, r3
 80018e8:	3714      	adds	r7, #20
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr
 80018f2:	bf00      	nop
 80018f4:	40007000 	.word	0x40007000
 80018f8:	20000000 	.word	0x20000000
 80018fc:	431bde83 	.word	0x431bde83

08001900 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b088      	sub	sp, #32
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d101      	bne.n	8001912 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800190e:	2301      	movs	r3, #1
 8001910:	e3ca      	b.n	80020a8 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001912:	4b97      	ldr	r3, [pc, #604]	@ (8001b70 <HAL_RCC_OscConfig+0x270>)
 8001914:	689b      	ldr	r3, [r3, #8]
 8001916:	f003 030c 	and.w	r3, r3, #12
 800191a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800191c:	4b94      	ldr	r3, [pc, #592]	@ (8001b70 <HAL_RCC_OscConfig+0x270>)
 800191e:	68db      	ldr	r3, [r3, #12]
 8001920:	f003 0303 	and.w	r3, r3, #3
 8001924:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f003 0310 	and.w	r3, r3, #16
 800192e:	2b00      	cmp	r3, #0
 8001930:	f000 80e4 	beq.w	8001afc <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001934:	69bb      	ldr	r3, [r7, #24]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d007      	beq.n	800194a <HAL_RCC_OscConfig+0x4a>
 800193a:	69bb      	ldr	r3, [r7, #24]
 800193c:	2b0c      	cmp	r3, #12
 800193e:	f040 808b 	bne.w	8001a58 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001942:	697b      	ldr	r3, [r7, #20]
 8001944:	2b01      	cmp	r3, #1
 8001946:	f040 8087 	bne.w	8001a58 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800194a:	4b89      	ldr	r3, [pc, #548]	@ (8001b70 <HAL_RCC_OscConfig+0x270>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f003 0302 	and.w	r3, r3, #2
 8001952:	2b00      	cmp	r3, #0
 8001954:	d005      	beq.n	8001962 <HAL_RCC_OscConfig+0x62>
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	699b      	ldr	r3, [r3, #24]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d101      	bne.n	8001962 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800195e:	2301      	movs	r3, #1
 8001960:	e3a2      	b.n	80020a8 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6a1a      	ldr	r2, [r3, #32]
 8001966:	4b82      	ldr	r3, [pc, #520]	@ (8001b70 <HAL_RCC_OscConfig+0x270>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f003 0308 	and.w	r3, r3, #8
 800196e:	2b00      	cmp	r3, #0
 8001970:	d004      	beq.n	800197c <HAL_RCC_OscConfig+0x7c>
 8001972:	4b7f      	ldr	r3, [pc, #508]	@ (8001b70 <HAL_RCC_OscConfig+0x270>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800197a:	e005      	b.n	8001988 <HAL_RCC_OscConfig+0x88>
 800197c:	4b7c      	ldr	r3, [pc, #496]	@ (8001b70 <HAL_RCC_OscConfig+0x270>)
 800197e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001982:	091b      	lsrs	r3, r3, #4
 8001984:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001988:	4293      	cmp	r3, r2
 800198a:	d223      	bcs.n	80019d4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6a1b      	ldr	r3, [r3, #32]
 8001990:	4618      	mov	r0, r3
 8001992:	f000 fd55 	bl	8002440 <RCC_SetFlashLatencyFromMSIRange>
 8001996:	4603      	mov	r3, r0
 8001998:	2b00      	cmp	r3, #0
 800199a:	d001      	beq.n	80019a0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800199c:	2301      	movs	r3, #1
 800199e:	e383      	b.n	80020a8 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80019a0:	4b73      	ldr	r3, [pc, #460]	@ (8001b70 <HAL_RCC_OscConfig+0x270>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a72      	ldr	r2, [pc, #456]	@ (8001b70 <HAL_RCC_OscConfig+0x270>)
 80019a6:	f043 0308 	orr.w	r3, r3, #8
 80019aa:	6013      	str	r3, [r2, #0]
 80019ac:	4b70      	ldr	r3, [pc, #448]	@ (8001b70 <HAL_RCC_OscConfig+0x270>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6a1b      	ldr	r3, [r3, #32]
 80019b8:	496d      	ldr	r1, [pc, #436]	@ (8001b70 <HAL_RCC_OscConfig+0x270>)
 80019ba:	4313      	orrs	r3, r2
 80019bc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80019be:	4b6c      	ldr	r3, [pc, #432]	@ (8001b70 <HAL_RCC_OscConfig+0x270>)
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	69db      	ldr	r3, [r3, #28]
 80019ca:	021b      	lsls	r3, r3, #8
 80019cc:	4968      	ldr	r1, [pc, #416]	@ (8001b70 <HAL_RCC_OscConfig+0x270>)
 80019ce:	4313      	orrs	r3, r2
 80019d0:	604b      	str	r3, [r1, #4]
 80019d2:	e025      	b.n	8001a20 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80019d4:	4b66      	ldr	r3, [pc, #408]	@ (8001b70 <HAL_RCC_OscConfig+0x270>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a65      	ldr	r2, [pc, #404]	@ (8001b70 <HAL_RCC_OscConfig+0x270>)
 80019da:	f043 0308 	orr.w	r3, r3, #8
 80019de:	6013      	str	r3, [r2, #0]
 80019e0:	4b63      	ldr	r3, [pc, #396]	@ (8001b70 <HAL_RCC_OscConfig+0x270>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6a1b      	ldr	r3, [r3, #32]
 80019ec:	4960      	ldr	r1, [pc, #384]	@ (8001b70 <HAL_RCC_OscConfig+0x270>)
 80019ee:	4313      	orrs	r3, r2
 80019f0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80019f2:	4b5f      	ldr	r3, [pc, #380]	@ (8001b70 <HAL_RCC_OscConfig+0x270>)
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	69db      	ldr	r3, [r3, #28]
 80019fe:	021b      	lsls	r3, r3, #8
 8001a00:	495b      	ldr	r1, [pc, #364]	@ (8001b70 <HAL_RCC_OscConfig+0x270>)
 8001a02:	4313      	orrs	r3, r2
 8001a04:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001a06:	69bb      	ldr	r3, [r7, #24]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d109      	bne.n	8001a20 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6a1b      	ldr	r3, [r3, #32]
 8001a10:	4618      	mov	r0, r3
 8001a12:	f000 fd15 	bl	8002440 <RCC_SetFlashLatencyFromMSIRange>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d001      	beq.n	8001a20 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	e343      	b.n	80020a8 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001a20:	f000 fc4a 	bl	80022b8 <HAL_RCC_GetSysClockFreq>
 8001a24:	4602      	mov	r2, r0
 8001a26:	4b52      	ldr	r3, [pc, #328]	@ (8001b70 <HAL_RCC_OscConfig+0x270>)
 8001a28:	689b      	ldr	r3, [r3, #8]
 8001a2a:	091b      	lsrs	r3, r3, #4
 8001a2c:	f003 030f 	and.w	r3, r3, #15
 8001a30:	4950      	ldr	r1, [pc, #320]	@ (8001b74 <HAL_RCC_OscConfig+0x274>)
 8001a32:	5ccb      	ldrb	r3, [r1, r3]
 8001a34:	f003 031f 	and.w	r3, r3, #31
 8001a38:	fa22 f303 	lsr.w	r3, r2, r3
 8001a3c:	4a4e      	ldr	r2, [pc, #312]	@ (8001b78 <HAL_RCC_OscConfig+0x278>)
 8001a3e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001a40:	4b4e      	ldr	r3, [pc, #312]	@ (8001b7c <HAL_RCC_OscConfig+0x27c>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4618      	mov	r0, r3
 8001a46:	f7ff fb25 	bl	8001094 <HAL_InitTick>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001a4e:	7bfb      	ldrb	r3, [r7, #15]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d052      	beq.n	8001afa <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001a54:	7bfb      	ldrb	r3, [r7, #15]
 8001a56:	e327      	b.n	80020a8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	699b      	ldr	r3, [r3, #24]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d032      	beq.n	8001ac6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001a60:	4b43      	ldr	r3, [pc, #268]	@ (8001b70 <HAL_RCC_OscConfig+0x270>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a42      	ldr	r2, [pc, #264]	@ (8001b70 <HAL_RCC_OscConfig+0x270>)
 8001a66:	f043 0301 	orr.w	r3, r3, #1
 8001a6a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001a6c:	f7ff fb62 	bl	8001134 <HAL_GetTick>
 8001a70:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001a72:	e008      	b.n	8001a86 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001a74:	f7ff fb5e 	bl	8001134 <HAL_GetTick>
 8001a78:	4602      	mov	r2, r0
 8001a7a:	693b      	ldr	r3, [r7, #16]
 8001a7c:	1ad3      	subs	r3, r2, r3
 8001a7e:	2b02      	cmp	r3, #2
 8001a80:	d901      	bls.n	8001a86 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001a82:	2303      	movs	r3, #3
 8001a84:	e310      	b.n	80020a8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001a86:	4b3a      	ldr	r3, [pc, #232]	@ (8001b70 <HAL_RCC_OscConfig+0x270>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f003 0302 	and.w	r3, r3, #2
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d0f0      	beq.n	8001a74 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a92:	4b37      	ldr	r3, [pc, #220]	@ (8001b70 <HAL_RCC_OscConfig+0x270>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4a36      	ldr	r2, [pc, #216]	@ (8001b70 <HAL_RCC_OscConfig+0x270>)
 8001a98:	f043 0308 	orr.w	r3, r3, #8
 8001a9c:	6013      	str	r3, [r2, #0]
 8001a9e:	4b34      	ldr	r3, [pc, #208]	@ (8001b70 <HAL_RCC_OscConfig+0x270>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6a1b      	ldr	r3, [r3, #32]
 8001aaa:	4931      	ldr	r1, [pc, #196]	@ (8001b70 <HAL_RCC_OscConfig+0x270>)
 8001aac:	4313      	orrs	r3, r2
 8001aae:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ab0:	4b2f      	ldr	r3, [pc, #188]	@ (8001b70 <HAL_RCC_OscConfig+0x270>)
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	69db      	ldr	r3, [r3, #28]
 8001abc:	021b      	lsls	r3, r3, #8
 8001abe:	492c      	ldr	r1, [pc, #176]	@ (8001b70 <HAL_RCC_OscConfig+0x270>)
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	604b      	str	r3, [r1, #4]
 8001ac4:	e01a      	b.n	8001afc <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001ac6:	4b2a      	ldr	r3, [pc, #168]	@ (8001b70 <HAL_RCC_OscConfig+0x270>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4a29      	ldr	r2, [pc, #164]	@ (8001b70 <HAL_RCC_OscConfig+0x270>)
 8001acc:	f023 0301 	bic.w	r3, r3, #1
 8001ad0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001ad2:	f7ff fb2f 	bl	8001134 <HAL_GetTick>
 8001ad6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001ad8:	e008      	b.n	8001aec <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001ada:	f7ff fb2b 	bl	8001134 <HAL_GetTick>
 8001ade:	4602      	mov	r2, r0
 8001ae0:	693b      	ldr	r3, [r7, #16]
 8001ae2:	1ad3      	subs	r3, r2, r3
 8001ae4:	2b02      	cmp	r3, #2
 8001ae6:	d901      	bls.n	8001aec <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001ae8:	2303      	movs	r3, #3
 8001aea:	e2dd      	b.n	80020a8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001aec:	4b20      	ldr	r3, [pc, #128]	@ (8001b70 <HAL_RCC_OscConfig+0x270>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f003 0302 	and.w	r3, r3, #2
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d1f0      	bne.n	8001ada <HAL_RCC_OscConfig+0x1da>
 8001af8:	e000      	b.n	8001afc <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001afa:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f003 0301 	and.w	r3, r3, #1
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d074      	beq.n	8001bf2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001b08:	69bb      	ldr	r3, [r7, #24]
 8001b0a:	2b08      	cmp	r3, #8
 8001b0c:	d005      	beq.n	8001b1a <HAL_RCC_OscConfig+0x21a>
 8001b0e:	69bb      	ldr	r3, [r7, #24]
 8001b10:	2b0c      	cmp	r3, #12
 8001b12:	d10e      	bne.n	8001b32 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	2b03      	cmp	r3, #3
 8001b18:	d10b      	bne.n	8001b32 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b1a:	4b15      	ldr	r3, [pc, #84]	@ (8001b70 <HAL_RCC_OscConfig+0x270>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d064      	beq.n	8001bf0 <HAL_RCC_OscConfig+0x2f0>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d160      	bne.n	8001bf0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e2ba      	b.n	80020a8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b3a:	d106      	bne.n	8001b4a <HAL_RCC_OscConfig+0x24a>
 8001b3c:	4b0c      	ldr	r3, [pc, #48]	@ (8001b70 <HAL_RCC_OscConfig+0x270>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a0b      	ldr	r2, [pc, #44]	@ (8001b70 <HAL_RCC_OscConfig+0x270>)
 8001b42:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b46:	6013      	str	r3, [r2, #0]
 8001b48:	e026      	b.n	8001b98 <HAL_RCC_OscConfig+0x298>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001b52:	d115      	bne.n	8001b80 <HAL_RCC_OscConfig+0x280>
 8001b54:	4b06      	ldr	r3, [pc, #24]	@ (8001b70 <HAL_RCC_OscConfig+0x270>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a05      	ldr	r2, [pc, #20]	@ (8001b70 <HAL_RCC_OscConfig+0x270>)
 8001b5a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001b5e:	6013      	str	r3, [r2, #0]
 8001b60:	4b03      	ldr	r3, [pc, #12]	@ (8001b70 <HAL_RCC_OscConfig+0x270>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a02      	ldr	r2, [pc, #8]	@ (8001b70 <HAL_RCC_OscConfig+0x270>)
 8001b66:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b6a:	6013      	str	r3, [r2, #0]
 8001b6c:	e014      	b.n	8001b98 <HAL_RCC_OscConfig+0x298>
 8001b6e:	bf00      	nop
 8001b70:	40021000 	.word	0x40021000
 8001b74:	080046d8 	.word	0x080046d8
 8001b78:	20000000 	.word	0x20000000
 8001b7c:	20000004 	.word	0x20000004
 8001b80:	4ba0      	ldr	r3, [pc, #640]	@ (8001e04 <HAL_RCC_OscConfig+0x504>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a9f      	ldr	r2, [pc, #636]	@ (8001e04 <HAL_RCC_OscConfig+0x504>)
 8001b86:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001b8a:	6013      	str	r3, [r2, #0]
 8001b8c:	4b9d      	ldr	r3, [pc, #628]	@ (8001e04 <HAL_RCC_OscConfig+0x504>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a9c      	ldr	r2, [pc, #624]	@ (8001e04 <HAL_RCC_OscConfig+0x504>)
 8001b92:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001b96:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d013      	beq.n	8001bc8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ba0:	f7ff fac8 	bl	8001134 <HAL_GetTick>
 8001ba4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ba6:	e008      	b.n	8001bba <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ba8:	f7ff fac4 	bl	8001134 <HAL_GetTick>
 8001bac:	4602      	mov	r2, r0
 8001bae:	693b      	ldr	r3, [r7, #16]
 8001bb0:	1ad3      	subs	r3, r2, r3
 8001bb2:	2b64      	cmp	r3, #100	@ 0x64
 8001bb4:	d901      	bls.n	8001bba <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001bb6:	2303      	movs	r3, #3
 8001bb8:	e276      	b.n	80020a8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001bba:	4b92      	ldr	r3, [pc, #584]	@ (8001e04 <HAL_RCC_OscConfig+0x504>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d0f0      	beq.n	8001ba8 <HAL_RCC_OscConfig+0x2a8>
 8001bc6:	e014      	b.n	8001bf2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bc8:	f7ff fab4 	bl	8001134 <HAL_GetTick>
 8001bcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001bce:	e008      	b.n	8001be2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bd0:	f7ff fab0 	bl	8001134 <HAL_GetTick>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	693b      	ldr	r3, [r7, #16]
 8001bd8:	1ad3      	subs	r3, r2, r3
 8001bda:	2b64      	cmp	r3, #100	@ 0x64
 8001bdc:	d901      	bls.n	8001be2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001bde:	2303      	movs	r3, #3
 8001be0:	e262      	b.n	80020a8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001be2:	4b88      	ldr	r3, [pc, #544]	@ (8001e04 <HAL_RCC_OscConfig+0x504>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d1f0      	bne.n	8001bd0 <HAL_RCC_OscConfig+0x2d0>
 8001bee:	e000      	b.n	8001bf2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bf0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f003 0302 	and.w	r3, r3, #2
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d060      	beq.n	8001cc0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001bfe:	69bb      	ldr	r3, [r7, #24]
 8001c00:	2b04      	cmp	r3, #4
 8001c02:	d005      	beq.n	8001c10 <HAL_RCC_OscConfig+0x310>
 8001c04:	69bb      	ldr	r3, [r7, #24]
 8001c06:	2b0c      	cmp	r3, #12
 8001c08:	d119      	bne.n	8001c3e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001c0a:	697b      	ldr	r3, [r7, #20]
 8001c0c:	2b02      	cmp	r3, #2
 8001c0e:	d116      	bne.n	8001c3e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c10:	4b7c      	ldr	r3, [pc, #496]	@ (8001e04 <HAL_RCC_OscConfig+0x504>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d005      	beq.n	8001c28 <HAL_RCC_OscConfig+0x328>
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	68db      	ldr	r3, [r3, #12]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d101      	bne.n	8001c28 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001c24:	2301      	movs	r3, #1
 8001c26:	e23f      	b.n	80020a8 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c28:	4b76      	ldr	r3, [pc, #472]	@ (8001e04 <HAL_RCC_OscConfig+0x504>)
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	691b      	ldr	r3, [r3, #16]
 8001c34:	061b      	lsls	r3, r3, #24
 8001c36:	4973      	ldr	r1, [pc, #460]	@ (8001e04 <HAL_RCC_OscConfig+0x504>)
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c3c:	e040      	b.n	8001cc0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	68db      	ldr	r3, [r3, #12]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d023      	beq.n	8001c8e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c46:	4b6f      	ldr	r3, [pc, #444]	@ (8001e04 <HAL_RCC_OscConfig+0x504>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a6e      	ldr	r2, [pc, #440]	@ (8001e04 <HAL_RCC_OscConfig+0x504>)
 8001c4c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c52:	f7ff fa6f 	bl	8001134 <HAL_GetTick>
 8001c56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c58:	e008      	b.n	8001c6c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c5a:	f7ff fa6b 	bl	8001134 <HAL_GetTick>
 8001c5e:	4602      	mov	r2, r0
 8001c60:	693b      	ldr	r3, [r7, #16]
 8001c62:	1ad3      	subs	r3, r2, r3
 8001c64:	2b02      	cmp	r3, #2
 8001c66:	d901      	bls.n	8001c6c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001c68:	2303      	movs	r3, #3
 8001c6a:	e21d      	b.n	80020a8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c6c:	4b65      	ldr	r3, [pc, #404]	@ (8001e04 <HAL_RCC_OscConfig+0x504>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d0f0      	beq.n	8001c5a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c78:	4b62      	ldr	r3, [pc, #392]	@ (8001e04 <HAL_RCC_OscConfig+0x504>)
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	691b      	ldr	r3, [r3, #16]
 8001c84:	061b      	lsls	r3, r3, #24
 8001c86:	495f      	ldr	r1, [pc, #380]	@ (8001e04 <HAL_RCC_OscConfig+0x504>)
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	604b      	str	r3, [r1, #4]
 8001c8c:	e018      	b.n	8001cc0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c8e:	4b5d      	ldr	r3, [pc, #372]	@ (8001e04 <HAL_RCC_OscConfig+0x504>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4a5c      	ldr	r2, [pc, #368]	@ (8001e04 <HAL_RCC_OscConfig+0x504>)
 8001c94:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001c98:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c9a:	f7ff fa4b 	bl	8001134 <HAL_GetTick>
 8001c9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ca0:	e008      	b.n	8001cb4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ca2:	f7ff fa47 	bl	8001134 <HAL_GetTick>
 8001ca6:	4602      	mov	r2, r0
 8001ca8:	693b      	ldr	r3, [r7, #16]
 8001caa:	1ad3      	subs	r3, r2, r3
 8001cac:	2b02      	cmp	r3, #2
 8001cae:	d901      	bls.n	8001cb4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001cb0:	2303      	movs	r3, #3
 8001cb2:	e1f9      	b.n	80020a8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001cb4:	4b53      	ldr	r3, [pc, #332]	@ (8001e04 <HAL_RCC_OscConfig+0x504>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d1f0      	bne.n	8001ca2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f003 0308 	and.w	r3, r3, #8
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d03c      	beq.n	8001d46 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	695b      	ldr	r3, [r3, #20]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d01c      	beq.n	8001d0e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cd4:	4b4b      	ldr	r3, [pc, #300]	@ (8001e04 <HAL_RCC_OscConfig+0x504>)
 8001cd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001cda:	4a4a      	ldr	r2, [pc, #296]	@ (8001e04 <HAL_RCC_OscConfig+0x504>)
 8001cdc:	f043 0301 	orr.w	r3, r3, #1
 8001ce0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ce4:	f7ff fa26 	bl	8001134 <HAL_GetTick>
 8001ce8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001cea:	e008      	b.n	8001cfe <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cec:	f7ff fa22 	bl	8001134 <HAL_GetTick>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	1ad3      	subs	r3, r2, r3
 8001cf6:	2b02      	cmp	r3, #2
 8001cf8:	d901      	bls.n	8001cfe <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	e1d4      	b.n	80020a8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001cfe:	4b41      	ldr	r3, [pc, #260]	@ (8001e04 <HAL_RCC_OscConfig+0x504>)
 8001d00:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001d04:	f003 0302 	and.w	r3, r3, #2
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d0ef      	beq.n	8001cec <HAL_RCC_OscConfig+0x3ec>
 8001d0c:	e01b      	b.n	8001d46 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d0e:	4b3d      	ldr	r3, [pc, #244]	@ (8001e04 <HAL_RCC_OscConfig+0x504>)
 8001d10:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001d14:	4a3b      	ldr	r2, [pc, #236]	@ (8001e04 <HAL_RCC_OscConfig+0x504>)
 8001d16:	f023 0301 	bic.w	r3, r3, #1
 8001d1a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d1e:	f7ff fa09 	bl	8001134 <HAL_GetTick>
 8001d22:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d24:	e008      	b.n	8001d38 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d26:	f7ff fa05 	bl	8001134 <HAL_GetTick>
 8001d2a:	4602      	mov	r2, r0
 8001d2c:	693b      	ldr	r3, [r7, #16]
 8001d2e:	1ad3      	subs	r3, r2, r3
 8001d30:	2b02      	cmp	r3, #2
 8001d32:	d901      	bls.n	8001d38 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001d34:	2303      	movs	r3, #3
 8001d36:	e1b7      	b.n	80020a8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d38:	4b32      	ldr	r3, [pc, #200]	@ (8001e04 <HAL_RCC_OscConfig+0x504>)
 8001d3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001d3e:	f003 0302 	and.w	r3, r3, #2
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d1ef      	bne.n	8001d26 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f003 0304 	and.w	r3, r3, #4
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	f000 80a6 	beq.w	8001ea0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d54:	2300      	movs	r3, #0
 8001d56:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001d58:	4b2a      	ldr	r3, [pc, #168]	@ (8001e04 <HAL_RCC_OscConfig+0x504>)
 8001d5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d5c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d10d      	bne.n	8001d80 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d64:	4b27      	ldr	r3, [pc, #156]	@ (8001e04 <HAL_RCC_OscConfig+0x504>)
 8001d66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d68:	4a26      	ldr	r2, [pc, #152]	@ (8001e04 <HAL_RCC_OscConfig+0x504>)
 8001d6a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d6e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001d70:	4b24      	ldr	r3, [pc, #144]	@ (8001e04 <HAL_RCC_OscConfig+0x504>)
 8001d72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d74:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d78:	60bb      	str	r3, [r7, #8]
 8001d7a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d80:	4b21      	ldr	r3, [pc, #132]	@ (8001e08 <HAL_RCC_OscConfig+0x508>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d118      	bne.n	8001dbe <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001d8c:	4b1e      	ldr	r3, [pc, #120]	@ (8001e08 <HAL_RCC_OscConfig+0x508>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a1d      	ldr	r2, [pc, #116]	@ (8001e08 <HAL_RCC_OscConfig+0x508>)
 8001d92:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d96:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d98:	f7ff f9cc 	bl	8001134 <HAL_GetTick>
 8001d9c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d9e:	e008      	b.n	8001db2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001da0:	f7ff f9c8 	bl	8001134 <HAL_GetTick>
 8001da4:	4602      	mov	r2, r0
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	1ad3      	subs	r3, r2, r3
 8001daa:	2b02      	cmp	r3, #2
 8001dac:	d901      	bls.n	8001db2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001dae:	2303      	movs	r3, #3
 8001db0:	e17a      	b.n	80020a8 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001db2:	4b15      	ldr	r3, [pc, #84]	@ (8001e08 <HAL_RCC_OscConfig+0x508>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d0f0      	beq.n	8001da0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	689b      	ldr	r3, [r3, #8]
 8001dc2:	2b01      	cmp	r3, #1
 8001dc4:	d108      	bne.n	8001dd8 <HAL_RCC_OscConfig+0x4d8>
 8001dc6:	4b0f      	ldr	r3, [pc, #60]	@ (8001e04 <HAL_RCC_OscConfig+0x504>)
 8001dc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001dcc:	4a0d      	ldr	r2, [pc, #52]	@ (8001e04 <HAL_RCC_OscConfig+0x504>)
 8001dce:	f043 0301 	orr.w	r3, r3, #1
 8001dd2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001dd6:	e029      	b.n	8001e2c <HAL_RCC_OscConfig+0x52c>
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	2b05      	cmp	r3, #5
 8001dde:	d115      	bne.n	8001e0c <HAL_RCC_OscConfig+0x50c>
 8001de0:	4b08      	ldr	r3, [pc, #32]	@ (8001e04 <HAL_RCC_OscConfig+0x504>)
 8001de2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001de6:	4a07      	ldr	r2, [pc, #28]	@ (8001e04 <HAL_RCC_OscConfig+0x504>)
 8001de8:	f043 0304 	orr.w	r3, r3, #4
 8001dec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001df0:	4b04      	ldr	r3, [pc, #16]	@ (8001e04 <HAL_RCC_OscConfig+0x504>)
 8001df2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001df6:	4a03      	ldr	r2, [pc, #12]	@ (8001e04 <HAL_RCC_OscConfig+0x504>)
 8001df8:	f043 0301 	orr.w	r3, r3, #1
 8001dfc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001e00:	e014      	b.n	8001e2c <HAL_RCC_OscConfig+0x52c>
 8001e02:	bf00      	nop
 8001e04:	40021000 	.word	0x40021000
 8001e08:	40007000 	.word	0x40007000
 8001e0c:	4b9c      	ldr	r3, [pc, #624]	@ (8002080 <HAL_RCC_OscConfig+0x780>)
 8001e0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e12:	4a9b      	ldr	r2, [pc, #620]	@ (8002080 <HAL_RCC_OscConfig+0x780>)
 8001e14:	f023 0301 	bic.w	r3, r3, #1
 8001e18:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001e1c:	4b98      	ldr	r3, [pc, #608]	@ (8002080 <HAL_RCC_OscConfig+0x780>)
 8001e1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e22:	4a97      	ldr	r2, [pc, #604]	@ (8002080 <HAL_RCC_OscConfig+0x780>)
 8001e24:	f023 0304 	bic.w	r3, r3, #4
 8001e28:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	689b      	ldr	r3, [r3, #8]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d016      	beq.n	8001e62 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e34:	f7ff f97e 	bl	8001134 <HAL_GetTick>
 8001e38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e3a:	e00a      	b.n	8001e52 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e3c:	f7ff f97a 	bl	8001134 <HAL_GetTick>
 8001e40:	4602      	mov	r2, r0
 8001e42:	693b      	ldr	r3, [r7, #16]
 8001e44:	1ad3      	subs	r3, r2, r3
 8001e46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d901      	bls.n	8001e52 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001e4e:	2303      	movs	r3, #3
 8001e50:	e12a      	b.n	80020a8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e52:	4b8b      	ldr	r3, [pc, #556]	@ (8002080 <HAL_RCC_OscConfig+0x780>)
 8001e54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e58:	f003 0302 	and.w	r3, r3, #2
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d0ed      	beq.n	8001e3c <HAL_RCC_OscConfig+0x53c>
 8001e60:	e015      	b.n	8001e8e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e62:	f7ff f967 	bl	8001134 <HAL_GetTick>
 8001e66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e68:	e00a      	b.n	8001e80 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e6a:	f7ff f963 	bl	8001134 <HAL_GetTick>
 8001e6e:	4602      	mov	r2, r0
 8001e70:	693b      	ldr	r3, [r7, #16]
 8001e72:	1ad3      	subs	r3, r2, r3
 8001e74:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d901      	bls.n	8001e80 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001e7c:	2303      	movs	r3, #3
 8001e7e:	e113      	b.n	80020a8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e80:	4b7f      	ldr	r3, [pc, #508]	@ (8002080 <HAL_RCC_OscConfig+0x780>)
 8001e82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e86:	f003 0302 	and.w	r3, r3, #2
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d1ed      	bne.n	8001e6a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001e8e:	7ffb      	ldrb	r3, [r7, #31]
 8001e90:	2b01      	cmp	r3, #1
 8001e92:	d105      	bne.n	8001ea0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e94:	4b7a      	ldr	r3, [pc, #488]	@ (8002080 <HAL_RCC_OscConfig+0x780>)
 8001e96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e98:	4a79      	ldr	r2, [pc, #484]	@ (8002080 <HAL_RCC_OscConfig+0x780>)
 8001e9a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001e9e:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	f000 80fe 	beq.w	80020a6 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001eae:	2b02      	cmp	r3, #2
 8001eb0:	f040 80d0 	bne.w	8002054 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001eb4:	4b72      	ldr	r3, [pc, #456]	@ (8002080 <HAL_RCC_OscConfig+0x780>)
 8001eb6:	68db      	ldr	r3, [r3, #12]
 8001eb8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001eba:	697b      	ldr	r3, [r7, #20]
 8001ebc:	f003 0203 	and.w	r2, r3, #3
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	d130      	bne.n	8001f2a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ed2:	3b01      	subs	r3, #1
 8001ed4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ed6:	429a      	cmp	r2, r3
 8001ed8:	d127      	bne.n	8001f2a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001eda:	697b      	ldr	r3, [r7, #20]
 8001edc:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ee4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001ee6:	429a      	cmp	r2, r3
 8001ee8:	d11f      	bne.n	8001f2a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001eea:	697b      	ldr	r3, [r7, #20]
 8001eec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ef0:	687a      	ldr	r2, [r7, #4]
 8001ef2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001ef4:	2a07      	cmp	r2, #7
 8001ef6:	bf14      	ite	ne
 8001ef8:	2201      	movne	r2, #1
 8001efa:	2200      	moveq	r2, #0
 8001efc:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d113      	bne.n	8001f2a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f02:	697b      	ldr	r3, [r7, #20]
 8001f04:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f0c:	085b      	lsrs	r3, r3, #1
 8001f0e:	3b01      	subs	r3, #1
 8001f10:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001f12:	429a      	cmp	r2, r3
 8001f14:	d109      	bne.n	8001f2a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001f16:	697b      	ldr	r3, [r7, #20]
 8001f18:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f20:	085b      	lsrs	r3, r3, #1
 8001f22:	3b01      	subs	r3, #1
 8001f24:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f26:	429a      	cmp	r2, r3
 8001f28:	d06e      	beq.n	8002008 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001f2a:	69bb      	ldr	r3, [r7, #24]
 8001f2c:	2b0c      	cmp	r3, #12
 8001f2e:	d069      	beq.n	8002004 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001f30:	4b53      	ldr	r3, [pc, #332]	@ (8002080 <HAL_RCC_OscConfig+0x780>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d105      	bne.n	8001f48 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001f3c:	4b50      	ldr	r3, [pc, #320]	@ (8002080 <HAL_RCC_OscConfig+0x780>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d001      	beq.n	8001f4c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001f48:	2301      	movs	r3, #1
 8001f4a:	e0ad      	b.n	80020a8 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001f4c:	4b4c      	ldr	r3, [pc, #304]	@ (8002080 <HAL_RCC_OscConfig+0x780>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a4b      	ldr	r2, [pc, #300]	@ (8002080 <HAL_RCC_OscConfig+0x780>)
 8001f52:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001f56:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001f58:	f7ff f8ec 	bl	8001134 <HAL_GetTick>
 8001f5c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f5e:	e008      	b.n	8001f72 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f60:	f7ff f8e8 	bl	8001134 <HAL_GetTick>
 8001f64:	4602      	mov	r2, r0
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	1ad3      	subs	r3, r2, r3
 8001f6a:	2b02      	cmp	r3, #2
 8001f6c:	d901      	bls.n	8001f72 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001f6e:	2303      	movs	r3, #3
 8001f70:	e09a      	b.n	80020a8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f72:	4b43      	ldr	r3, [pc, #268]	@ (8002080 <HAL_RCC_OscConfig+0x780>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d1f0      	bne.n	8001f60 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f7e:	4b40      	ldr	r3, [pc, #256]	@ (8002080 <HAL_RCC_OscConfig+0x780>)
 8001f80:	68da      	ldr	r2, [r3, #12]
 8001f82:	4b40      	ldr	r3, [pc, #256]	@ (8002084 <HAL_RCC_OscConfig+0x784>)
 8001f84:	4013      	ands	r3, r2
 8001f86:	687a      	ldr	r2, [r7, #4]
 8001f88:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001f8a:	687a      	ldr	r2, [r7, #4]
 8001f8c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001f8e:	3a01      	subs	r2, #1
 8001f90:	0112      	lsls	r2, r2, #4
 8001f92:	4311      	orrs	r1, r2
 8001f94:	687a      	ldr	r2, [r7, #4]
 8001f96:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001f98:	0212      	lsls	r2, r2, #8
 8001f9a:	4311      	orrs	r1, r2
 8001f9c:	687a      	ldr	r2, [r7, #4]
 8001f9e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001fa0:	0852      	lsrs	r2, r2, #1
 8001fa2:	3a01      	subs	r2, #1
 8001fa4:	0552      	lsls	r2, r2, #21
 8001fa6:	4311      	orrs	r1, r2
 8001fa8:	687a      	ldr	r2, [r7, #4]
 8001faa:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001fac:	0852      	lsrs	r2, r2, #1
 8001fae:	3a01      	subs	r2, #1
 8001fb0:	0652      	lsls	r2, r2, #25
 8001fb2:	4311      	orrs	r1, r2
 8001fb4:	687a      	ldr	r2, [r7, #4]
 8001fb6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001fb8:	0912      	lsrs	r2, r2, #4
 8001fba:	0452      	lsls	r2, r2, #17
 8001fbc:	430a      	orrs	r2, r1
 8001fbe:	4930      	ldr	r1, [pc, #192]	@ (8002080 <HAL_RCC_OscConfig+0x780>)
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001fc4:	4b2e      	ldr	r3, [pc, #184]	@ (8002080 <HAL_RCC_OscConfig+0x780>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a2d      	ldr	r2, [pc, #180]	@ (8002080 <HAL_RCC_OscConfig+0x780>)
 8001fca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001fce:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001fd0:	4b2b      	ldr	r3, [pc, #172]	@ (8002080 <HAL_RCC_OscConfig+0x780>)
 8001fd2:	68db      	ldr	r3, [r3, #12]
 8001fd4:	4a2a      	ldr	r2, [pc, #168]	@ (8002080 <HAL_RCC_OscConfig+0x780>)
 8001fd6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001fda:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001fdc:	f7ff f8aa 	bl	8001134 <HAL_GetTick>
 8001fe0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fe2:	e008      	b.n	8001ff6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fe4:	f7ff f8a6 	bl	8001134 <HAL_GetTick>
 8001fe8:	4602      	mov	r2, r0
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	1ad3      	subs	r3, r2, r3
 8001fee:	2b02      	cmp	r3, #2
 8001ff0:	d901      	bls.n	8001ff6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001ff2:	2303      	movs	r3, #3
 8001ff4:	e058      	b.n	80020a8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ff6:	4b22      	ldr	r3, [pc, #136]	@ (8002080 <HAL_RCC_OscConfig+0x780>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d0f0      	beq.n	8001fe4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002002:	e050      	b.n	80020a6 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002004:	2301      	movs	r3, #1
 8002006:	e04f      	b.n	80020a8 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002008:	4b1d      	ldr	r3, [pc, #116]	@ (8002080 <HAL_RCC_OscConfig+0x780>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002010:	2b00      	cmp	r3, #0
 8002012:	d148      	bne.n	80020a6 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002014:	4b1a      	ldr	r3, [pc, #104]	@ (8002080 <HAL_RCC_OscConfig+0x780>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a19      	ldr	r2, [pc, #100]	@ (8002080 <HAL_RCC_OscConfig+0x780>)
 800201a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800201e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002020:	4b17      	ldr	r3, [pc, #92]	@ (8002080 <HAL_RCC_OscConfig+0x780>)
 8002022:	68db      	ldr	r3, [r3, #12]
 8002024:	4a16      	ldr	r2, [pc, #88]	@ (8002080 <HAL_RCC_OscConfig+0x780>)
 8002026:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800202a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800202c:	f7ff f882 	bl	8001134 <HAL_GetTick>
 8002030:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002032:	e008      	b.n	8002046 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002034:	f7ff f87e 	bl	8001134 <HAL_GetTick>
 8002038:	4602      	mov	r2, r0
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	1ad3      	subs	r3, r2, r3
 800203e:	2b02      	cmp	r3, #2
 8002040:	d901      	bls.n	8002046 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002042:	2303      	movs	r3, #3
 8002044:	e030      	b.n	80020a8 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002046:	4b0e      	ldr	r3, [pc, #56]	@ (8002080 <HAL_RCC_OscConfig+0x780>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800204e:	2b00      	cmp	r3, #0
 8002050:	d0f0      	beq.n	8002034 <HAL_RCC_OscConfig+0x734>
 8002052:	e028      	b.n	80020a6 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002054:	69bb      	ldr	r3, [r7, #24]
 8002056:	2b0c      	cmp	r3, #12
 8002058:	d023      	beq.n	80020a2 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800205a:	4b09      	ldr	r3, [pc, #36]	@ (8002080 <HAL_RCC_OscConfig+0x780>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4a08      	ldr	r2, [pc, #32]	@ (8002080 <HAL_RCC_OscConfig+0x780>)
 8002060:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002064:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002066:	f7ff f865 	bl	8001134 <HAL_GetTick>
 800206a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800206c:	e00c      	b.n	8002088 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800206e:	f7ff f861 	bl	8001134 <HAL_GetTick>
 8002072:	4602      	mov	r2, r0
 8002074:	693b      	ldr	r3, [r7, #16]
 8002076:	1ad3      	subs	r3, r2, r3
 8002078:	2b02      	cmp	r3, #2
 800207a:	d905      	bls.n	8002088 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800207c:	2303      	movs	r3, #3
 800207e:	e013      	b.n	80020a8 <HAL_RCC_OscConfig+0x7a8>
 8002080:	40021000 	.word	0x40021000
 8002084:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002088:	4b09      	ldr	r3, [pc, #36]	@ (80020b0 <HAL_RCC_OscConfig+0x7b0>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002090:	2b00      	cmp	r3, #0
 8002092:	d1ec      	bne.n	800206e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002094:	4b06      	ldr	r3, [pc, #24]	@ (80020b0 <HAL_RCC_OscConfig+0x7b0>)
 8002096:	68da      	ldr	r2, [r3, #12]
 8002098:	4905      	ldr	r1, [pc, #20]	@ (80020b0 <HAL_RCC_OscConfig+0x7b0>)
 800209a:	4b06      	ldr	r3, [pc, #24]	@ (80020b4 <HAL_RCC_OscConfig+0x7b4>)
 800209c:	4013      	ands	r3, r2
 800209e:	60cb      	str	r3, [r1, #12]
 80020a0:	e001      	b.n	80020a6 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80020a2:	2301      	movs	r3, #1
 80020a4:	e000      	b.n	80020a8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80020a6:	2300      	movs	r3, #0
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	3720      	adds	r7, #32
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}
 80020b0:	40021000 	.word	0x40021000
 80020b4:	feeefffc 	.word	0xfeeefffc

080020b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b084      	sub	sp, #16
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
 80020c0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d101      	bne.n	80020cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020c8:	2301      	movs	r3, #1
 80020ca:	e0e7      	b.n	800229c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80020cc:	4b75      	ldr	r3, [pc, #468]	@ (80022a4 <HAL_RCC_ClockConfig+0x1ec>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f003 0307 	and.w	r3, r3, #7
 80020d4:	683a      	ldr	r2, [r7, #0]
 80020d6:	429a      	cmp	r2, r3
 80020d8:	d910      	bls.n	80020fc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020da:	4b72      	ldr	r3, [pc, #456]	@ (80022a4 <HAL_RCC_ClockConfig+0x1ec>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f023 0207 	bic.w	r2, r3, #7
 80020e2:	4970      	ldr	r1, [pc, #448]	@ (80022a4 <HAL_RCC_ClockConfig+0x1ec>)
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	4313      	orrs	r3, r2
 80020e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020ea:	4b6e      	ldr	r3, [pc, #440]	@ (80022a4 <HAL_RCC_ClockConfig+0x1ec>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f003 0307 	and.w	r3, r3, #7
 80020f2:	683a      	ldr	r2, [r7, #0]
 80020f4:	429a      	cmp	r2, r3
 80020f6:	d001      	beq.n	80020fc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80020f8:	2301      	movs	r3, #1
 80020fa:	e0cf      	b.n	800229c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f003 0302 	and.w	r3, r3, #2
 8002104:	2b00      	cmp	r3, #0
 8002106:	d010      	beq.n	800212a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	689a      	ldr	r2, [r3, #8]
 800210c:	4b66      	ldr	r3, [pc, #408]	@ (80022a8 <HAL_RCC_ClockConfig+0x1f0>)
 800210e:	689b      	ldr	r3, [r3, #8]
 8002110:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002114:	429a      	cmp	r2, r3
 8002116:	d908      	bls.n	800212a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002118:	4b63      	ldr	r3, [pc, #396]	@ (80022a8 <HAL_RCC_ClockConfig+0x1f0>)
 800211a:	689b      	ldr	r3, [r3, #8]
 800211c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	689b      	ldr	r3, [r3, #8]
 8002124:	4960      	ldr	r1, [pc, #384]	@ (80022a8 <HAL_RCC_ClockConfig+0x1f0>)
 8002126:	4313      	orrs	r3, r2
 8002128:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f003 0301 	and.w	r3, r3, #1
 8002132:	2b00      	cmp	r3, #0
 8002134:	d04c      	beq.n	80021d0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	2b03      	cmp	r3, #3
 800213c:	d107      	bne.n	800214e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800213e:	4b5a      	ldr	r3, [pc, #360]	@ (80022a8 <HAL_RCC_ClockConfig+0x1f0>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002146:	2b00      	cmp	r3, #0
 8002148:	d121      	bne.n	800218e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800214a:	2301      	movs	r3, #1
 800214c:	e0a6      	b.n	800229c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	2b02      	cmp	r3, #2
 8002154:	d107      	bne.n	8002166 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002156:	4b54      	ldr	r3, [pc, #336]	@ (80022a8 <HAL_RCC_ClockConfig+0x1f0>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800215e:	2b00      	cmp	r3, #0
 8002160:	d115      	bne.n	800218e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002162:	2301      	movs	r3, #1
 8002164:	e09a      	b.n	800229c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d107      	bne.n	800217e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800216e:	4b4e      	ldr	r3, [pc, #312]	@ (80022a8 <HAL_RCC_ClockConfig+0x1f0>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f003 0302 	and.w	r3, r3, #2
 8002176:	2b00      	cmp	r3, #0
 8002178:	d109      	bne.n	800218e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800217a:	2301      	movs	r3, #1
 800217c:	e08e      	b.n	800229c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800217e:	4b4a      	ldr	r3, [pc, #296]	@ (80022a8 <HAL_RCC_ClockConfig+0x1f0>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002186:	2b00      	cmp	r3, #0
 8002188:	d101      	bne.n	800218e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	e086      	b.n	800229c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800218e:	4b46      	ldr	r3, [pc, #280]	@ (80022a8 <HAL_RCC_ClockConfig+0x1f0>)
 8002190:	689b      	ldr	r3, [r3, #8]
 8002192:	f023 0203 	bic.w	r2, r3, #3
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	4943      	ldr	r1, [pc, #268]	@ (80022a8 <HAL_RCC_ClockConfig+0x1f0>)
 800219c:	4313      	orrs	r3, r2
 800219e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80021a0:	f7fe ffc8 	bl	8001134 <HAL_GetTick>
 80021a4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021a6:	e00a      	b.n	80021be <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021a8:	f7fe ffc4 	bl	8001134 <HAL_GetTick>
 80021ac:	4602      	mov	r2, r0
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	1ad3      	subs	r3, r2, r3
 80021b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d901      	bls.n	80021be <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80021ba:	2303      	movs	r3, #3
 80021bc:	e06e      	b.n	800229c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021be:	4b3a      	ldr	r3, [pc, #232]	@ (80022a8 <HAL_RCC_ClockConfig+0x1f0>)
 80021c0:	689b      	ldr	r3, [r3, #8]
 80021c2:	f003 020c 	and.w	r2, r3, #12
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	009b      	lsls	r3, r3, #2
 80021cc:	429a      	cmp	r2, r3
 80021ce:	d1eb      	bne.n	80021a8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f003 0302 	and.w	r3, r3, #2
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d010      	beq.n	80021fe <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	689a      	ldr	r2, [r3, #8]
 80021e0:	4b31      	ldr	r3, [pc, #196]	@ (80022a8 <HAL_RCC_ClockConfig+0x1f0>)
 80021e2:	689b      	ldr	r3, [r3, #8]
 80021e4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80021e8:	429a      	cmp	r2, r3
 80021ea:	d208      	bcs.n	80021fe <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021ec:	4b2e      	ldr	r3, [pc, #184]	@ (80022a8 <HAL_RCC_ClockConfig+0x1f0>)
 80021ee:	689b      	ldr	r3, [r3, #8]
 80021f0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	689b      	ldr	r3, [r3, #8]
 80021f8:	492b      	ldr	r1, [pc, #172]	@ (80022a8 <HAL_RCC_ClockConfig+0x1f0>)
 80021fa:	4313      	orrs	r3, r2
 80021fc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80021fe:	4b29      	ldr	r3, [pc, #164]	@ (80022a4 <HAL_RCC_ClockConfig+0x1ec>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f003 0307 	and.w	r3, r3, #7
 8002206:	683a      	ldr	r2, [r7, #0]
 8002208:	429a      	cmp	r2, r3
 800220a:	d210      	bcs.n	800222e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800220c:	4b25      	ldr	r3, [pc, #148]	@ (80022a4 <HAL_RCC_ClockConfig+0x1ec>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f023 0207 	bic.w	r2, r3, #7
 8002214:	4923      	ldr	r1, [pc, #140]	@ (80022a4 <HAL_RCC_ClockConfig+0x1ec>)
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	4313      	orrs	r3, r2
 800221a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800221c:	4b21      	ldr	r3, [pc, #132]	@ (80022a4 <HAL_RCC_ClockConfig+0x1ec>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f003 0307 	and.w	r3, r3, #7
 8002224:	683a      	ldr	r2, [r7, #0]
 8002226:	429a      	cmp	r2, r3
 8002228:	d001      	beq.n	800222e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800222a:	2301      	movs	r3, #1
 800222c:	e036      	b.n	800229c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f003 0304 	and.w	r3, r3, #4
 8002236:	2b00      	cmp	r3, #0
 8002238:	d008      	beq.n	800224c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800223a:	4b1b      	ldr	r3, [pc, #108]	@ (80022a8 <HAL_RCC_ClockConfig+0x1f0>)
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	68db      	ldr	r3, [r3, #12]
 8002246:	4918      	ldr	r1, [pc, #96]	@ (80022a8 <HAL_RCC_ClockConfig+0x1f0>)
 8002248:	4313      	orrs	r3, r2
 800224a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f003 0308 	and.w	r3, r3, #8
 8002254:	2b00      	cmp	r3, #0
 8002256:	d009      	beq.n	800226c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002258:	4b13      	ldr	r3, [pc, #76]	@ (80022a8 <HAL_RCC_ClockConfig+0x1f0>)
 800225a:	689b      	ldr	r3, [r3, #8]
 800225c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	691b      	ldr	r3, [r3, #16]
 8002264:	00db      	lsls	r3, r3, #3
 8002266:	4910      	ldr	r1, [pc, #64]	@ (80022a8 <HAL_RCC_ClockConfig+0x1f0>)
 8002268:	4313      	orrs	r3, r2
 800226a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800226c:	f000 f824 	bl	80022b8 <HAL_RCC_GetSysClockFreq>
 8002270:	4602      	mov	r2, r0
 8002272:	4b0d      	ldr	r3, [pc, #52]	@ (80022a8 <HAL_RCC_ClockConfig+0x1f0>)
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	091b      	lsrs	r3, r3, #4
 8002278:	f003 030f 	and.w	r3, r3, #15
 800227c:	490b      	ldr	r1, [pc, #44]	@ (80022ac <HAL_RCC_ClockConfig+0x1f4>)
 800227e:	5ccb      	ldrb	r3, [r1, r3]
 8002280:	f003 031f 	and.w	r3, r3, #31
 8002284:	fa22 f303 	lsr.w	r3, r2, r3
 8002288:	4a09      	ldr	r2, [pc, #36]	@ (80022b0 <HAL_RCC_ClockConfig+0x1f8>)
 800228a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800228c:	4b09      	ldr	r3, [pc, #36]	@ (80022b4 <HAL_RCC_ClockConfig+0x1fc>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4618      	mov	r0, r3
 8002292:	f7fe feff 	bl	8001094 <HAL_InitTick>
 8002296:	4603      	mov	r3, r0
 8002298:	72fb      	strb	r3, [r7, #11]

  return status;
 800229a:	7afb      	ldrb	r3, [r7, #11]
}
 800229c:	4618      	mov	r0, r3
 800229e:	3710      	adds	r7, #16
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}
 80022a4:	40022000 	.word	0x40022000
 80022a8:	40021000 	.word	0x40021000
 80022ac:	080046d8 	.word	0x080046d8
 80022b0:	20000000 	.word	0x20000000
 80022b4:	20000004 	.word	0x20000004

080022b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b089      	sub	sp, #36	@ 0x24
 80022bc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80022be:	2300      	movs	r3, #0
 80022c0:	61fb      	str	r3, [r7, #28]
 80022c2:	2300      	movs	r3, #0
 80022c4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80022c6:	4b3e      	ldr	r3, [pc, #248]	@ (80023c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80022c8:	689b      	ldr	r3, [r3, #8]
 80022ca:	f003 030c 	and.w	r3, r3, #12
 80022ce:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80022d0:	4b3b      	ldr	r3, [pc, #236]	@ (80023c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80022d2:	68db      	ldr	r3, [r3, #12]
 80022d4:	f003 0303 	and.w	r3, r3, #3
 80022d8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d005      	beq.n	80022ec <HAL_RCC_GetSysClockFreq+0x34>
 80022e0:	693b      	ldr	r3, [r7, #16]
 80022e2:	2b0c      	cmp	r3, #12
 80022e4:	d121      	bne.n	800232a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	2b01      	cmp	r3, #1
 80022ea:	d11e      	bne.n	800232a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80022ec:	4b34      	ldr	r3, [pc, #208]	@ (80023c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f003 0308 	and.w	r3, r3, #8
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d107      	bne.n	8002308 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80022f8:	4b31      	ldr	r3, [pc, #196]	@ (80023c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80022fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80022fe:	0a1b      	lsrs	r3, r3, #8
 8002300:	f003 030f 	and.w	r3, r3, #15
 8002304:	61fb      	str	r3, [r7, #28]
 8002306:	e005      	b.n	8002314 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002308:	4b2d      	ldr	r3, [pc, #180]	@ (80023c0 <HAL_RCC_GetSysClockFreq+0x108>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	091b      	lsrs	r3, r3, #4
 800230e:	f003 030f 	and.w	r3, r3, #15
 8002312:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002314:	4a2b      	ldr	r2, [pc, #172]	@ (80023c4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002316:	69fb      	ldr	r3, [r7, #28]
 8002318:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800231c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d10d      	bne.n	8002340 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002324:	69fb      	ldr	r3, [r7, #28]
 8002326:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002328:	e00a      	b.n	8002340 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800232a:	693b      	ldr	r3, [r7, #16]
 800232c:	2b04      	cmp	r3, #4
 800232e:	d102      	bne.n	8002336 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002330:	4b25      	ldr	r3, [pc, #148]	@ (80023c8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002332:	61bb      	str	r3, [r7, #24]
 8002334:	e004      	b.n	8002340 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	2b08      	cmp	r3, #8
 800233a:	d101      	bne.n	8002340 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800233c:	4b23      	ldr	r3, [pc, #140]	@ (80023cc <HAL_RCC_GetSysClockFreq+0x114>)
 800233e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002340:	693b      	ldr	r3, [r7, #16]
 8002342:	2b0c      	cmp	r3, #12
 8002344:	d134      	bne.n	80023b0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002346:	4b1e      	ldr	r3, [pc, #120]	@ (80023c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002348:	68db      	ldr	r3, [r3, #12]
 800234a:	f003 0303 	and.w	r3, r3, #3
 800234e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	2b02      	cmp	r3, #2
 8002354:	d003      	beq.n	800235e <HAL_RCC_GetSysClockFreq+0xa6>
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	2b03      	cmp	r3, #3
 800235a:	d003      	beq.n	8002364 <HAL_RCC_GetSysClockFreq+0xac>
 800235c:	e005      	b.n	800236a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800235e:	4b1a      	ldr	r3, [pc, #104]	@ (80023c8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002360:	617b      	str	r3, [r7, #20]
      break;
 8002362:	e005      	b.n	8002370 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002364:	4b19      	ldr	r3, [pc, #100]	@ (80023cc <HAL_RCC_GetSysClockFreq+0x114>)
 8002366:	617b      	str	r3, [r7, #20]
      break;
 8002368:	e002      	b.n	8002370 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800236a:	69fb      	ldr	r3, [r7, #28]
 800236c:	617b      	str	r3, [r7, #20]
      break;
 800236e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002370:	4b13      	ldr	r3, [pc, #76]	@ (80023c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002372:	68db      	ldr	r3, [r3, #12]
 8002374:	091b      	lsrs	r3, r3, #4
 8002376:	f003 0307 	and.w	r3, r3, #7
 800237a:	3301      	adds	r3, #1
 800237c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800237e:	4b10      	ldr	r3, [pc, #64]	@ (80023c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002380:	68db      	ldr	r3, [r3, #12]
 8002382:	0a1b      	lsrs	r3, r3, #8
 8002384:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002388:	697a      	ldr	r2, [r7, #20]
 800238a:	fb03 f202 	mul.w	r2, r3, r2
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	fbb2 f3f3 	udiv	r3, r2, r3
 8002394:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002396:	4b0a      	ldr	r3, [pc, #40]	@ (80023c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002398:	68db      	ldr	r3, [r3, #12]
 800239a:	0e5b      	lsrs	r3, r3, #25
 800239c:	f003 0303 	and.w	r3, r3, #3
 80023a0:	3301      	adds	r3, #1
 80023a2:	005b      	lsls	r3, r3, #1
 80023a4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80023a6:	697a      	ldr	r2, [r7, #20]
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80023ae:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80023b0:	69bb      	ldr	r3, [r7, #24]
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	3724      	adds	r7, #36	@ 0x24
 80023b6:	46bd      	mov	sp, r7
 80023b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023bc:	4770      	bx	lr
 80023be:	bf00      	nop
 80023c0:	40021000 	.word	0x40021000
 80023c4:	080046f0 	.word	0x080046f0
 80023c8:	00f42400 	.word	0x00f42400
 80023cc:	007a1200 	.word	0x007a1200

080023d0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023d0:	b480      	push	{r7}
 80023d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023d4:	4b03      	ldr	r3, [pc, #12]	@ (80023e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80023d6:	681b      	ldr	r3, [r3, #0]
}
 80023d8:	4618      	mov	r0, r3
 80023da:	46bd      	mov	sp, r7
 80023dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e0:	4770      	bx	lr
 80023e2:	bf00      	nop
 80023e4:	20000000 	.word	0x20000000

080023e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80023ec:	f7ff fff0 	bl	80023d0 <HAL_RCC_GetHCLKFreq>
 80023f0:	4602      	mov	r2, r0
 80023f2:	4b06      	ldr	r3, [pc, #24]	@ (800240c <HAL_RCC_GetPCLK1Freq+0x24>)
 80023f4:	689b      	ldr	r3, [r3, #8]
 80023f6:	0a1b      	lsrs	r3, r3, #8
 80023f8:	f003 0307 	and.w	r3, r3, #7
 80023fc:	4904      	ldr	r1, [pc, #16]	@ (8002410 <HAL_RCC_GetPCLK1Freq+0x28>)
 80023fe:	5ccb      	ldrb	r3, [r1, r3]
 8002400:	f003 031f 	and.w	r3, r3, #31
 8002404:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002408:	4618      	mov	r0, r3
 800240a:	bd80      	pop	{r7, pc}
 800240c:	40021000 	.word	0x40021000
 8002410:	080046e8 	.word	0x080046e8

08002414 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002418:	f7ff ffda 	bl	80023d0 <HAL_RCC_GetHCLKFreq>
 800241c:	4602      	mov	r2, r0
 800241e:	4b06      	ldr	r3, [pc, #24]	@ (8002438 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002420:	689b      	ldr	r3, [r3, #8]
 8002422:	0adb      	lsrs	r3, r3, #11
 8002424:	f003 0307 	and.w	r3, r3, #7
 8002428:	4904      	ldr	r1, [pc, #16]	@ (800243c <HAL_RCC_GetPCLK2Freq+0x28>)
 800242a:	5ccb      	ldrb	r3, [r1, r3]
 800242c:	f003 031f 	and.w	r3, r3, #31
 8002430:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002434:	4618      	mov	r0, r3
 8002436:	bd80      	pop	{r7, pc}
 8002438:	40021000 	.word	0x40021000
 800243c:	080046e8 	.word	0x080046e8

08002440 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b086      	sub	sp, #24
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002448:	2300      	movs	r3, #0
 800244a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800244c:	4b2a      	ldr	r3, [pc, #168]	@ (80024f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800244e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002450:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002454:	2b00      	cmp	r3, #0
 8002456:	d003      	beq.n	8002460 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002458:	f7ff f9ee 	bl	8001838 <HAL_PWREx_GetVoltageRange>
 800245c:	6178      	str	r0, [r7, #20]
 800245e:	e014      	b.n	800248a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002460:	4b25      	ldr	r3, [pc, #148]	@ (80024f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002462:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002464:	4a24      	ldr	r2, [pc, #144]	@ (80024f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002466:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800246a:	6593      	str	r3, [r2, #88]	@ 0x58
 800246c:	4b22      	ldr	r3, [pc, #136]	@ (80024f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800246e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002470:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002474:	60fb      	str	r3, [r7, #12]
 8002476:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002478:	f7ff f9de 	bl	8001838 <HAL_PWREx_GetVoltageRange>
 800247c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800247e:	4b1e      	ldr	r3, [pc, #120]	@ (80024f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002480:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002482:	4a1d      	ldr	r2, [pc, #116]	@ (80024f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002484:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002488:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800248a:	697b      	ldr	r3, [r7, #20]
 800248c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002490:	d10b      	bne.n	80024aa <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2b80      	cmp	r3, #128	@ 0x80
 8002496:	d919      	bls.n	80024cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2ba0      	cmp	r3, #160	@ 0xa0
 800249c:	d902      	bls.n	80024a4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800249e:	2302      	movs	r3, #2
 80024a0:	613b      	str	r3, [r7, #16]
 80024a2:	e013      	b.n	80024cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80024a4:	2301      	movs	r3, #1
 80024a6:	613b      	str	r3, [r7, #16]
 80024a8:	e010      	b.n	80024cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2b80      	cmp	r3, #128	@ 0x80
 80024ae:	d902      	bls.n	80024b6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80024b0:	2303      	movs	r3, #3
 80024b2:	613b      	str	r3, [r7, #16]
 80024b4:	e00a      	b.n	80024cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2b80      	cmp	r3, #128	@ 0x80
 80024ba:	d102      	bne.n	80024c2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80024bc:	2302      	movs	r3, #2
 80024be:	613b      	str	r3, [r7, #16]
 80024c0:	e004      	b.n	80024cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2b70      	cmp	r3, #112	@ 0x70
 80024c6:	d101      	bne.n	80024cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80024c8:	2301      	movs	r3, #1
 80024ca:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80024cc:	4b0b      	ldr	r3, [pc, #44]	@ (80024fc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f023 0207 	bic.w	r2, r3, #7
 80024d4:	4909      	ldr	r1, [pc, #36]	@ (80024fc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	4313      	orrs	r3, r2
 80024da:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80024dc:	4b07      	ldr	r3, [pc, #28]	@ (80024fc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f003 0307 	and.w	r3, r3, #7
 80024e4:	693a      	ldr	r2, [r7, #16]
 80024e6:	429a      	cmp	r2, r3
 80024e8:	d001      	beq.n	80024ee <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	e000      	b.n	80024f0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80024ee:	2300      	movs	r3, #0
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	3718      	adds	r7, #24
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}
 80024f8:	40021000 	.word	0x40021000
 80024fc:	40022000 	.word	0x40022000

08002500 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b086      	sub	sp, #24
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002508:	2300      	movs	r3, #0
 800250a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800250c:	2300      	movs	r3, #0
 800250e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002518:	2b00      	cmp	r3, #0
 800251a:	d041      	beq.n	80025a0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002520:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002524:	d02a      	beq.n	800257c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002526:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800252a:	d824      	bhi.n	8002576 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800252c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002530:	d008      	beq.n	8002544 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002532:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002536:	d81e      	bhi.n	8002576 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002538:	2b00      	cmp	r3, #0
 800253a:	d00a      	beq.n	8002552 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800253c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002540:	d010      	beq.n	8002564 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002542:	e018      	b.n	8002576 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002544:	4b86      	ldr	r3, [pc, #536]	@ (8002760 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002546:	68db      	ldr	r3, [r3, #12]
 8002548:	4a85      	ldr	r2, [pc, #532]	@ (8002760 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800254a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800254e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002550:	e015      	b.n	800257e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	3304      	adds	r3, #4
 8002556:	2100      	movs	r1, #0
 8002558:	4618      	mov	r0, r3
 800255a:	f000 fabb 	bl	8002ad4 <RCCEx_PLLSAI1_Config>
 800255e:	4603      	mov	r3, r0
 8002560:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002562:	e00c      	b.n	800257e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	3320      	adds	r3, #32
 8002568:	2100      	movs	r1, #0
 800256a:	4618      	mov	r0, r3
 800256c:	f000 fba6 	bl	8002cbc <RCCEx_PLLSAI2_Config>
 8002570:	4603      	mov	r3, r0
 8002572:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002574:	e003      	b.n	800257e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002576:	2301      	movs	r3, #1
 8002578:	74fb      	strb	r3, [r7, #19]
      break;
 800257a:	e000      	b.n	800257e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800257c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800257e:	7cfb      	ldrb	r3, [r7, #19]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d10b      	bne.n	800259c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002584:	4b76      	ldr	r3, [pc, #472]	@ (8002760 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002586:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800258a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002592:	4973      	ldr	r1, [pc, #460]	@ (8002760 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002594:	4313      	orrs	r3, r2
 8002596:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800259a:	e001      	b.n	80025a0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800259c:	7cfb      	ldrb	r3, [r7, #19]
 800259e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d041      	beq.n	8002630 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80025b0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80025b4:	d02a      	beq.n	800260c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80025b6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80025ba:	d824      	bhi.n	8002606 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80025bc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80025c0:	d008      	beq.n	80025d4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80025c2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80025c6:	d81e      	bhi.n	8002606 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d00a      	beq.n	80025e2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80025cc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80025d0:	d010      	beq.n	80025f4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80025d2:	e018      	b.n	8002606 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80025d4:	4b62      	ldr	r3, [pc, #392]	@ (8002760 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025d6:	68db      	ldr	r3, [r3, #12]
 80025d8:	4a61      	ldr	r2, [pc, #388]	@ (8002760 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025da:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025de:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80025e0:	e015      	b.n	800260e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	3304      	adds	r3, #4
 80025e6:	2100      	movs	r1, #0
 80025e8:	4618      	mov	r0, r3
 80025ea:	f000 fa73 	bl	8002ad4 <RCCEx_PLLSAI1_Config>
 80025ee:	4603      	mov	r3, r0
 80025f0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80025f2:	e00c      	b.n	800260e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	3320      	adds	r3, #32
 80025f8:	2100      	movs	r1, #0
 80025fa:	4618      	mov	r0, r3
 80025fc:	f000 fb5e 	bl	8002cbc <RCCEx_PLLSAI2_Config>
 8002600:	4603      	mov	r3, r0
 8002602:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002604:	e003      	b.n	800260e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	74fb      	strb	r3, [r7, #19]
      break;
 800260a:	e000      	b.n	800260e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800260c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800260e:	7cfb      	ldrb	r3, [r7, #19]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d10b      	bne.n	800262c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002614:	4b52      	ldr	r3, [pc, #328]	@ (8002760 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002616:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800261a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002622:	494f      	ldr	r1, [pc, #316]	@ (8002760 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002624:	4313      	orrs	r3, r2
 8002626:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800262a:	e001      	b.n	8002630 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800262c:	7cfb      	ldrb	r3, [r7, #19]
 800262e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002638:	2b00      	cmp	r3, #0
 800263a:	f000 80a0 	beq.w	800277e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800263e:	2300      	movs	r3, #0
 8002640:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002642:	4b47      	ldr	r3, [pc, #284]	@ (8002760 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002644:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002646:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800264a:	2b00      	cmp	r3, #0
 800264c:	d101      	bne.n	8002652 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800264e:	2301      	movs	r3, #1
 8002650:	e000      	b.n	8002654 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002652:	2300      	movs	r3, #0
 8002654:	2b00      	cmp	r3, #0
 8002656:	d00d      	beq.n	8002674 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002658:	4b41      	ldr	r3, [pc, #260]	@ (8002760 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800265a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800265c:	4a40      	ldr	r2, [pc, #256]	@ (8002760 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800265e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002662:	6593      	str	r3, [r2, #88]	@ 0x58
 8002664:	4b3e      	ldr	r3, [pc, #248]	@ (8002760 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002666:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002668:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800266c:	60bb      	str	r3, [r7, #8]
 800266e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002670:	2301      	movs	r3, #1
 8002672:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002674:	4b3b      	ldr	r3, [pc, #236]	@ (8002764 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a3a      	ldr	r2, [pc, #232]	@ (8002764 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800267a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800267e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002680:	f7fe fd58 	bl	8001134 <HAL_GetTick>
 8002684:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002686:	e009      	b.n	800269c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002688:	f7fe fd54 	bl	8001134 <HAL_GetTick>
 800268c:	4602      	mov	r2, r0
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	1ad3      	subs	r3, r2, r3
 8002692:	2b02      	cmp	r3, #2
 8002694:	d902      	bls.n	800269c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002696:	2303      	movs	r3, #3
 8002698:	74fb      	strb	r3, [r7, #19]
        break;
 800269a:	e005      	b.n	80026a8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800269c:	4b31      	ldr	r3, [pc, #196]	@ (8002764 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d0ef      	beq.n	8002688 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80026a8:	7cfb      	ldrb	r3, [r7, #19]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d15c      	bne.n	8002768 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80026ae:	4b2c      	ldr	r3, [pc, #176]	@ (8002760 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026b4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80026b8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80026ba:	697b      	ldr	r3, [r7, #20]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d01f      	beq.n	8002700 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80026c6:	697a      	ldr	r2, [r7, #20]
 80026c8:	429a      	cmp	r2, r3
 80026ca:	d019      	beq.n	8002700 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80026cc:	4b24      	ldr	r3, [pc, #144]	@ (8002760 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026d2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80026d6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80026d8:	4b21      	ldr	r3, [pc, #132]	@ (8002760 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026de:	4a20      	ldr	r2, [pc, #128]	@ (8002760 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80026e8:	4b1d      	ldr	r3, [pc, #116]	@ (8002760 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026ee:	4a1c      	ldr	r2, [pc, #112]	@ (8002760 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026f0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80026f4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80026f8:	4a19      	ldr	r2, [pc, #100]	@ (8002760 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002700:	697b      	ldr	r3, [r7, #20]
 8002702:	f003 0301 	and.w	r3, r3, #1
 8002706:	2b00      	cmp	r3, #0
 8002708:	d016      	beq.n	8002738 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800270a:	f7fe fd13 	bl	8001134 <HAL_GetTick>
 800270e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002710:	e00b      	b.n	800272a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002712:	f7fe fd0f 	bl	8001134 <HAL_GetTick>
 8002716:	4602      	mov	r2, r0
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	1ad3      	subs	r3, r2, r3
 800271c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002720:	4293      	cmp	r3, r2
 8002722:	d902      	bls.n	800272a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002724:	2303      	movs	r3, #3
 8002726:	74fb      	strb	r3, [r7, #19]
            break;
 8002728:	e006      	b.n	8002738 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800272a:	4b0d      	ldr	r3, [pc, #52]	@ (8002760 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800272c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002730:	f003 0302 	and.w	r3, r3, #2
 8002734:	2b00      	cmp	r3, #0
 8002736:	d0ec      	beq.n	8002712 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002738:	7cfb      	ldrb	r3, [r7, #19]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d10c      	bne.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800273e:	4b08      	ldr	r3, [pc, #32]	@ (8002760 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002740:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002744:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800274e:	4904      	ldr	r1, [pc, #16]	@ (8002760 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002750:	4313      	orrs	r3, r2
 8002752:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002756:	e009      	b.n	800276c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002758:	7cfb      	ldrb	r3, [r7, #19]
 800275a:	74bb      	strb	r3, [r7, #18]
 800275c:	e006      	b.n	800276c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800275e:	bf00      	nop
 8002760:	40021000 	.word	0x40021000
 8002764:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002768:	7cfb      	ldrb	r3, [r7, #19]
 800276a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800276c:	7c7b      	ldrb	r3, [r7, #17]
 800276e:	2b01      	cmp	r3, #1
 8002770:	d105      	bne.n	800277e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002772:	4b9e      	ldr	r3, [pc, #632]	@ (80029ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002774:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002776:	4a9d      	ldr	r2, [pc, #628]	@ (80029ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002778:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800277c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f003 0301 	and.w	r3, r3, #1
 8002786:	2b00      	cmp	r3, #0
 8002788:	d00a      	beq.n	80027a0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800278a:	4b98      	ldr	r3, [pc, #608]	@ (80029ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800278c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002790:	f023 0203 	bic.w	r2, r3, #3
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002798:	4994      	ldr	r1, [pc, #592]	@ (80029ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800279a:	4313      	orrs	r3, r2
 800279c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f003 0302 	and.w	r3, r3, #2
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d00a      	beq.n	80027c2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80027ac:	4b8f      	ldr	r3, [pc, #572]	@ (80029ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027b2:	f023 020c 	bic.w	r2, r3, #12
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027ba:	498c      	ldr	r1, [pc, #560]	@ (80029ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027bc:	4313      	orrs	r3, r2
 80027be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f003 0304 	and.w	r3, r3, #4
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d00a      	beq.n	80027e4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80027ce:	4b87      	ldr	r3, [pc, #540]	@ (80029ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027d4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027dc:	4983      	ldr	r1, [pc, #524]	@ (80029ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027de:	4313      	orrs	r3, r2
 80027e0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f003 0308 	and.w	r3, r3, #8
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d00a      	beq.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80027f0:	4b7e      	ldr	r3, [pc, #504]	@ (80029ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027f6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027fe:	497b      	ldr	r1, [pc, #492]	@ (80029ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002800:	4313      	orrs	r3, r2
 8002802:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f003 0310 	and.w	r3, r3, #16
 800280e:	2b00      	cmp	r3, #0
 8002810:	d00a      	beq.n	8002828 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002812:	4b76      	ldr	r3, [pc, #472]	@ (80029ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002814:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002818:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002820:	4972      	ldr	r1, [pc, #456]	@ (80029ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002822:	4313      	orrs	r3, r2
 8002824:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f003 0320 	and.w	r3, r3, #32
 8002830:	2b00      	cmp	r3, #0
 8002832:	d00a      	beq.n	800284a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002834:	4b6d      	ldr	r3, [pc, #436]	@ (80029ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002836:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800283a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002842:	496a      	ldr	r1, [pc, #424]	@ (80029ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002844:	4313      	orrs	r3, r2
 8002846:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002852:	2b00      	cmp	r3, #0
 8002854:	d00a      	beq.n	800286c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002856:	4b65      	ldr	r3, [pc, #404]	@ (80029ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002858:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800285c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002864:	4961      	ldr	r1, [pc, #388]	@ (80029ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002866:	4313      	orrs	r3, r2
 8002868:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002874:	2b00      	cmp	r3, #0
 8002876:	d00a      	beq.n	800288e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002878:	4b5c      	ldr	r3, [pc, #368]	@ (80029ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800287a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800287e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002886:	4959      	ldr	r1, [pc, #356]	@ (80029ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002888:	4313      	orrs	r3, r2
 800288a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002896:	2b00      	cmp	r3, #0
 8002898:	d00a      	beq.n	80028b0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800289a:	4b54      	ldr	r3, [pc, #336]	@ (80029ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800289c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028a0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80028a8:	4950      	ldr	r1, [pc, #320]	@ (80029ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028aa:	4313      	orrs	r3, r2
 80028ac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d00a      	beq.n	80028d2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80028bc:	4b4b      	ldr	r3, [pc, #300]	@ (80029ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028c2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028ca:	4948      	ldr	r1, [pc, #288]	@ (80029ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028cc:	4313      	orrs	r3, r2
 80028ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d00a      	beq.n	80028f4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80028de:	4b43      	ldr	r3, [pc, #268]	@ (80029ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028e4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028ec:	493f      	ldr	r1, [pc, #252]	@ (80029ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028ee:	4313      	orrs	r3, r2
 80028f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d028      	beq.n	8002952 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002900:	4b3a      	ldr	r3, [pc, #232]	@ (80029ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002902:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002906:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800290e:	4937      	ldr	r1, [pc, #220]	@ (80029ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002910:	4313      	orrs	r3, r2
 8002912:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800291a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800291e:	d106      	bne.n	800292e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002920:	4b32      	ldr	r3, [pc, #200]	@ (80029ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002922:	68db      	ldr	r3, [r3, #12]
 8002924:	4a31      	ldr	r2, [pc, #196]	@ (80029ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002926:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800292a:	60d3      	str	r3, [r2, #12]
 800292c:	e011      	b.n	8002952 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002932:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002936:	d10c      	bne.n	8002952 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	3304      	adds	r3, #4
 800293c:	2101      	movs	r1, #1
 800293e:	4618      	mov	r0, r3
 8002940:	f000 f8c8 	bl	8002ad4 <RCCEx_PLLSAI1_Config>
 8002944:	4603      	mov	r3, r0
 8002946:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002948:	7cfb      	ldrb	r3, [r7, #19]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d001      	beq.n	8002952 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800294e:	7cfb      	ldrb	r3, [r7, #19]
 8002950:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800295a:	2b00      	cmp	r3, #0
 800295c:	d028      	beq.n	80029b0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800295e:	4b23      	ldr	r3, [pc, #140]	@ (80029ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002960:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002964:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800296c:	491f      	ldr	r1, [pc, #124]	@ (80029ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800296e:	4313      	orrs	r3, r2
 8002970:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002978:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800297c:	d106      	bne.n	800298c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800297e:	4b1b      	ldr	r3, [pc, #108]	@ (80029ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002980:	68db      	ldr	r3, [r3, #12]
 8002982:	4a1a      	ldr	r2, [pc, #104]	@ (80029ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002984:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002988:	60d3      	str	r3, [r2, #12]
 800298a:	e011      	b.n	80029b0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002990:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002994:	d10c      	bne.n	80029b0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	3304      	adds	r3, #4
 800299a:	2101      	movs	r1, #1
 800299c:	4618      	mov	r0, r3
 800299e:	f000 f899 	bl	8002ad4 <RCCEx_PLLSAI1_Config>
 80029a2:	4603      	mov	r3, r0
 80029a4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80029a6:	7cfb      	ldrb	r3, [r7, #19]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d001      	beq.n	80029b0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80029ac:	7cfb      	ldrb	r3, [r7, #19]
 80029ae:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d02b      	beq.n	8002a14 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80029bc:	4b0b      	ldr	r3, [pc, #44]	@ (80029ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029c2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80029ca:	4908      	ldr	r1, [pc, #32]	@ (80029ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029cc:	4313      	orrs	r3, r2
 80029ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80029d6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80029da:	d109      	bne.n	80029f0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80029dc:	4b03      	ldr	r3, [pc, #12]	@ (80029ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029de:	68db      	ldr	r3, [r3, #12]
 80029e0:	4a02      	ldr	r2, [pc, #8]	@ (80029ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029e2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80029e6:	60d3      	str	r3, [r2, #12]
 80029e8:	e014      	b.n	8002a14 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80029ea:	bf00      	nop
 80029ec:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80029f4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80029f8:	d10c      	bne.n	8002a14 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	3304      	adds	r3, #4
 80029fe:	2101      	movs	r1, #1
 8002a00:	4618      	mov	r0, r3
 8002a02:	f000 f867 	bl	8002ad4 <RCCEx_PLLSAI1_Config>
 8002a06:	4603      	mov	r3, r0
 8002a08:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002a0a:	7cfb      	ldrb	r3, [r7, #19]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d001      	beq.n	8002a14 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002a10:	7cfb      	ldrb	r3, [r7, #19]
 8002a12:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d02f      	beq.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002a20:	4b2b      	ldr	r3, [pc, #172]	@ (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002a22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a26:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002a2e:	4928      	ldr	r1, [pc, #160]	@ (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002a30:	4313      	orrs	r3, r2
 8002a32:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002a3a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002a3e:	d10d      	bne.n	8002a5c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	3304      	adds	r3, #4
 8002a44:	2102      	movs	r1, #2
 8002a46:	4618      	mov	r0, r3
 8002a48:	f000 f844 	bl	8002ad4 <RCCEx_PLLSAI1_Config>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002a50:	7cfb      	ldrb	r3, [r7, #19]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d014      	beq.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002a56:	7cfb      	ldrb	r3, [r7, #19]
 8002a58:	74bb      	strb	r3, [r7, #18]
 8002a5a:	e011      	b.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002a60:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002a64:	d10c      	bne.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	3320      	adds	r3, #32
 8002a6a:	2102      	movs	r1, #2
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f000 f925 	bl	8002cbc <RCCEx_PLLSAI2_Config>
 8002a72:	4603      	mov	r3, r0
 8002a74:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002a76:	7cfb      	ldrb	r3, [r7, #19]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d001      	beq.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002a7c:	7cfb      	ldrb	r3, [r7, #19]
 8002a7e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d00a      	beq.n	8002aa2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002a8c:	4b10      	ldr	r3, [pc, #64]	@ (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002a8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a92:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002a9a:	490d      	ldr	r1, [pc, #52]	@ (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d00b      	beq.n	8002ac6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002aae:	4b08      	ldr	r3, [pc, #32]	@ (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002ab0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ab4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002abe:	4904      	ldr	r1, [pc, #16]	@ (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002ac6:	7cbb      	ldrb	r3, [r7, #18]
}
 8002ac8:	4618      	mov	r0, r3
 8002aca:	3718      	adds	r7, #24
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bd80      	pop	{r7, pc}
 8002ad0:	40021000 	.word	0x40021000

08002ad4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b084      	sub	sp, #16
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
 8002adc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002ae2:	4b75      	ldr	r3, [pc, #468]	@ (8002cb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ae4:	68db      	ldr	r3, [r3, #12]
 8002ae6:	f003 0303 	and.w	r3, r3, #3
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d018      	beq.n	8002b20 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002aee:	4b72      	ldr	r3, [pc, #456]	@ (8002cb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002af0:	68db      	ldr	r3, [r3, #12]
 8002af2:	f003 0203 	and.w	r2, r3, #3
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	429a      	cmp	r2, r3
 8002afc:	d10d      	bne.n	8002b1a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
       ||
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d009      	beq.n	8002b1a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002b06:	4b6c      	ldr	r3, [pc, #432]	@ (8002cb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b08:	68db      	ldr	r3, [r3, #12]
 8002b0a:	091b      	lsrs	r3, r3, #4
 8002b0c:	f003 0307 	and.w	r3, r3, #7
 8002b10:	1c5a      	adds	r2, r3, #1
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	685b      	ldr	r3, [r3, #4]
       ||
 8002b16:	429a      	cmp	r2, r3
 8002b18:	d047      	beq.n	8002baa <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	73fb      	strb	r3, [r7, #15]
 8002b1e:	e044      	b.n	8002baa <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	2b03      	cmp	r3, #3
 8002b26:	d018      	beq.n	8002b5a <RCCEx_PLLSAI1_Config+0x86>
 8002b28:	2b03      	cmp	r3, #3
 8002b2a:	d825      	bhi.n	8002b78 <RCCEx_PLLSAI1_Config+0xa4>
 8002b2c:	2b01      	cmp	r3, #1
 8002b2e:	d002      	beq.n	8002b36 <RCCEx_PLLSAI1_Config+0x62>
 8002b30:	2b02      	cmp	r3, #2
 8002b32:	d009      	beq.n	8002b48 <RCCEx_PLLSAI1_Config+0x74>
 8002b34:	e020      	b.n	8002b78 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002b36:	4b60      	ldr	r3, [pc, #384]	@ (8002cb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f003 0302 	and.w	r3, r3, #2
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d11d      	bne.n	8002b7e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002b42:	2301      	movs	r3, #1
 8002b44:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b46:	e01a      	b.n	8002b7e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002b48:	4b5b      	ldr	r3, [pc, #364]	@ (8002cb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d116      	bne.n	8002b82 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002b54:	2301      	movs	r3, #1
 8002b56:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b58:	e013      	b.n	8002b82 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002b5a:	4b57      	ldr	r3, [pc, #348]	@ (8002cb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d10f      	bne.n	8002b86 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002b66:	4b54      	ldr	r3, [pc, #336]	@ (8002cb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d109      	bne.n	8002b86 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002b72:	2301      	movs	r3, #1
 8002b74:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002b76:	e006      	b.n	8002b86 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	73fb      	strb	r3, [r7, #15]
      break;
 8002b7c:	e004      	b.n	8002b88 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002b7e:	bf00      	nop
 8002b80:	e002      	b.n	8002b88 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002b82:	bf00      	nop
 8002b84:	e000      	b.n	8002b88 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002b86:	bf00      	nop
    }

    if(status == HAL_OK)
 8002b88:	7bfb      	ldrb	r3, [r7, #15]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d10d      	bne.n	8002baa <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002b8e:	4b4a      	ldr	r3, [pc, #296]	@ (8002cb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b90:	68db      	ldr	r3, [r3, #12]
 8002b92:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6819      	ldr	r1, [r3, #0]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	3b01      	subs	r3, #1
 8002ba0:	011b      	lsls	r3, r3, #4
 8002ba2:	430b      	orrs	r3, r1
 8002ba4:	4944      	ldr	r1, [pc, #272]	@ (8002cb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002baa:	7bfb      	ldrb	r3, [r7, #15]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d17d      	bne.n	8002cac <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002bb0:	4b41      	ldr	r3, [pc, #260]	@ (8002cb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a40      	ldr	r2, [pc, #256]	@ (8002cb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bb6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002bba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002bbc:	f7fe faba 	bl	8001134 <HAL_GetTick>
 8002bc0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002bc2:	e009      	b.n	8002bd8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002bc4:	f7fe fab6 	bl	8001134 <HAL_GetTick>
 8002bc8:	4602      	mov	r2, r0
 8002bca:	68bb      	ldr	r3, [r7, #8]
 8002bcc:	1ad3      	subs	r3, r2, r3
 8002bce:	2b02      	cmp	r3, #2
 8002bd0:	d902      	bls.n	8002bd8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002bd2:	2303      	movs	r3, #3
 8002bd4:	73fb      	strb	r3, [r7, #15]
        break;
 8002bd6:	e005      	b.n	8002be4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002bd8:	4b37      	ldr	r3, [pc, #220]	@ (8002cb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d1ef      	bne.n	8002bc4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002be4:	7bfb      	ldrb	r3, [r7, #15]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d160      	bne.n	8002cac <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d111      	bne.n	8002c14 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002bf0:	4b31      	ldr	r3, [pc, #196]	@ (8002cb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bf2:	691b      	ldr	r3, [r3, #16]
 8002bf4:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002bf8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002bfc:	687a      	ldr	r2, [r7, #4]
 8002bfe:	6892      	ldr	r2, [r2, #8]
 8002c00:	0211      	lsls	r1, r2, #8
 8002c02:	687a      	ldr	r2, [r7, #4]
 8002c04:	68d2      	ldr	r2, [r2, #12]
 8002c06:	0912      	lsrs	r2, r2, #4
 8002c08:	0452      	lsls	r2, r2, #17
 8002c0a:	430a      	orrs	r2, r1
 8002c0c:	492a      	ldr	r1, [pc, #168]	@ (8002cb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	610b      	str	r3, [r1, #16]
 8002c12:	e027      	b.n	8002c64 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	2b01      	cmp	r3, #1
 8002c18:	d112      	bne.n	8002c40 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002c1a:	4b27      	ldr	r3, [pc, #156]	@ (8002cb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c1c:	691b      	ldr	r3, [r3, #16]
 8002c1e:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8002c22:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002c26:	687a      	ldr	r2, [r7, #4]
 8002c28:	6892      	ldr	r2, [r2, #8]
 8002c2a:	0211      	lsls	r1, r2, #8
 8002c2c:	687a      	ldr	r2, [r7, #4]
 8002c2e:	6912      	ldr	r2, [r2, #16]
 8002c30:	0852      	lsrs	r2, r2, #1
 8002c32:	3a01      	subs	r2, #1
 8002c34:	0552      	lsls	r2, r2, #21
 8002c36:	430a      	orrs	r2, r1
 8002c38:	491f      	ldr	r1, [pc, #124]	@ (8002cb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	610b      	str	r3, [r1, #16]
 8002c3e:	e011      	b.n	8002c64 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002c40:	4b1d      	ldr	r3, [pc, #116]	@ (8002cb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c42:	691b      	ldr	r3, [r3, #16]
 8002c44:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002c48:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002c4c:	687a      	ldr	r2, [r7, #4]
 8002c4e:	6892      	ldr	r2, [r2, #8]
 8002c50:	0211      	lsls	r1, r2, #8
 8002c52:	687a      	ldr	r2, [r7, #4]
 8002c54:	6952      	ldr	r2, [r2, #20]
 8002c56:	0852      	lsrs	r2, r2, #1
 8002c58:	3a01      	subs	r2, #1
 8002c5a:	0652      	lsls	r2, r2, #25
 8002c5c:	430a      	orrs	r2, r1
 8002c5e:	4916      	ldr	r1, [pc, #88]	@ (8002cb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c60:	4313      	orrs	r3, r2
 8002c62:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002c64:	4b14      	ldr	r3, [pc, #80]	@ (8002cb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a13      	ldr	r2, [pc, #76]	@ (8002cb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c6a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002c6e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c70:	f7fe fa60 	bl	8001134 <HAL_GetTick>
 8002c74:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002c76:	e009      	b.n	8002c8c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002c78:	f7fe fa5c 	bl	8001134 <HAL_GetTick>
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	68bb      	ldr	r3, [r7, #8]
 8002c80:	1ad3      	subs	r3, r2, r3
 8002c82:	2b02      	cmp	r3, #2
 8002c84:	d902      	bls.n	8002c8c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002c86:	2303      	movs	r3, #3
 8002c88:	73fb      	strb	r3, [r7, #15]
          break;
 8002c8a:	e005      	b.n	8002c98 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002c8c:	4b0a      	ldr	r3, [pc, #40]	@ (8002cb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d0ef      	beq.n	8002c78 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002c98:	7bfb      	ldrb	r3, [r7, #15]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d106      	bne.n	8002cac <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002c9e:	4b06      	ldr	r3, [pc, #24]	@ (8002cb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ca0:	691a      	ldr	r2, [r3, #16]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	699b      	ldr	r3, [r3, #24]
 8002ca6:	4904      	ldr	r1, [pc, #16]	@ (8002cb8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002cac:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cae:	4618      	mov	r0, r3
 8002cb0:	3710      	adds	r7, #16
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}
 8002cb6:	bf00      	nop
 8002cb8:	40021000 	.word	0x40021000

08002cbc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b084      	sub	sp, #16
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
 8002cc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002cca:	4b6a      	ldr	r3, [pc, #424]	@ (8002e74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ccc:	68db      	ldr	r3, [r3, #12]
 8002cce:	f003 0303 	and.w	r3, r3, #3
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d018      	beq.n	8002d08 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002cd6:	4b67      	ldr	r3, [pc, #412]	@ (8002e74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cd8:	68db      	ldr	r3, [r3, #12]
 8002cda:	f003 0203 	and.w	r2, r3, #3
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	429a      	cmp	r2, r3
 8002ce4:	d10d      	bne.n	8002d02 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
       ||
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d009      	beq.n	8002d02 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002cee:	4b61      	ldr	r3, [pc, #388]	@ (8002e74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cf0:	68db      	ldr	r3, [r3, #12]
 8002cf2:	091b      	lsrs	r3, r3, #4
 8002cf4:	f003 0307 	and.w	r3, r3, #7
 8002cf8:	1c5a      	adds	r2, r3, #1
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	685b      	ldr	r3, [r3, #4]
       ||
 8002cfe:	429a      	cmp	r2, r3
 8002d00:	d047      	beq.n	8002d92 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002d02:	2301      	movs	r3, #1
 8002d04:	73fb      	strb	r3, [r7, #15]
 8002d06:	e044      	b.n	8002d92 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	2b03      	cmp	r3, #3
 8002d0e:	d018      	beq.n	8002d42 <RCCEx_PLLSAI2_Config+0x86>
 8002d10:	2b03      	cmp	r3, #3
 8002d12:	d825      	bhi.n	8002d60 <RCCEx_PLLSAI2_Config+0xa4>
 8002d14:	2b01      	cmp	r3, #1
 8002d16:	d002      	beq.n	8002d1e <RCCEx_PLLSAI2_Config+0x62>
 8002d18:	2b02      	cmp	r3, #2
 8002d1a:	d009      	beq.n	8002d30 <RCCEx_PLLSAI2_Config+0x74>
 8002d1c:	e020      	b.n	8002d60 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002d1e:	4b55      	ldr	r3, [pc, #340]	@ (8002e74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f003 0302 	and.w	r3, r3, #2
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d11d      	bne.n	8002d66 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d2e:	e01a      	b.n	8002d66 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002d30:	4b50      	ldr	r3, [pc, #320]	@ (8002e74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d116      	bne.n	8002d6a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d40:	e013      	b.n	8002d6a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002d42:	4b4c      	ldr	r3, [pc, #304]	@ (8002e74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d10f      	bne.n	8002d6e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002d4e:	4b49      	ldr	r3, [pc, #292]	@ (8002e74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d109      	bne.n	8002d6e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002d5e:	e006      	b.n	8002d6e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002d60:	2301      	movs	r3, #1
 8002d62:	73fb      	strb	r3, [r7, #15]
      break;
 8002d64:	e004      	b.n	8002d70 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002d66:	bf00      	nop
 8002d68:	e002      	b.n	8002d70 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002d6a:	bf00      	nop
 8002d6c:	e000      	b.n	8002d70 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002d6e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002d70:	7bfb      	ldrb	r3, [r7, #15]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d10d      	bne.n	8002d92 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002d76:	4b3f      	ldr	r3, [pc, #252]	@ (8002e74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d78:	68db      	ldr	r3, [r3, #12]
 8002d7a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6819      	ldr	r1, [r3, #0]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	3b01      	subs	r3, #1
 8002d88:	011b      	lsls	r3, r3, #4
 8002d8a:	430b      	orrs	r3, r1
 8002d8c:	4939      	ldr	r1, [pc, #228]	@ (8002e74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002d92:	7bfb      	ldrb	r3, [r7, #15]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d167      	bne.n	8002e68 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002d98:	4b36      	ldr	r3, [pc, #216]	@ (8002e74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a35      	ldr	r2, [pc, #212]	@ (8002e74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d9e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002da2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002da4:	f7fe f9c6 	bl	8001134 <HAL_GetTick>
 8002da8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002daa:	e009      	b.n	8002dc0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002dac:	f7fe f9c2 	bl	8001134 <HAL_GetTick>
 8002db0:	4602      	mov	r2, r0
 8002db2:	68bb      	ldr	r3, [r7, #8]
 8002db4:	1ad3      	subs	r3, r2, r3
 8002db6:	2b02      	cmp	r3, #2
 8002db8:	d902      	bls.n	8002dc0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002dba:	2303      	movs	r3, #3
 8002dbc:	73fb      	strb	r3, [r7, #15]
        break;
 8002dbe:	e005      	b.n	8002dcc <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002dc0:	4b2c      	ldr	r3, [pc, #176]	@ (8002e74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d1ef      	bne.n	8002dac <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002dcc:	7bfb      	ldrb	r3, [r7, #15]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d14a      	bne.n	8002e68 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d111      	bne.n	8002dfc <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002dd8:	4b26      	ldr	r3, [pc, #152]	@ (8002e74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002dda:	695b      	ldr	r3, [r3, #20]
 8002ddc:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002de0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002de4:	687a      	ldr	r2, [r7, #4]
 8002de6:	6892      	ldr	r2, [r2, #8]
 8002de8:	0211      	lsls	r1, r2, #8
 8002dea:	687a      	ldr	r2, [r7, #4]
 8002dec:	68d2      	ldr	r2, [r2, #12]
 8002dee:	0912      	lsrs	r2, r2, #4
 8002df0:	0452      	lsls	r2, r2, #17
 8002df2:	430a      	orrs	r2, r1
 8002df4:	491f      	ldr	r1, [pc, #124]	@ (8002e74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002df6:	4313      	orrs	r3, r2
 8002df8:	614b      	str	r3, [r1, #20]
 8002dfa:	e011      	b.n	8002e20 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002dfc:	4b1d      	ldr	r3, [pc, #116]	@ (8002e74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002dfe:	695b      	ldr	r3, [r3, #20]
 8002e00:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002e04:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002e08:	687a      	ldr	r2, [r7, #4]
 8002e0a:	6892      	ldr	r2, [r2, #8]
 8002e0c:	0211      	lsls	r1, r2, #8
 8002e0e:	687a      	ldr	r2, [r7, #4]
 8002e10:	6912      	ldr	r2, [r2, #16]
 8002e12:	0852      	lsrs	r2, r2, #1
 8002e14:	3a01      	subs	r2, #1
 8002e16:	0652      	lsls	r2, r2, #25
 8002e18:	430a      	orrs	r2, r1
 8002e1a:	4916      	ldr	r1, [pc, #88]	@ (8002e74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002e20:	4b14      	ldr	r3, [pc, #80]	@ (8002e74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a13      	ldr	r2, [pc, #76]	@ (8002e74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e26:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e2a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e2c:	f7fe f982 	bl	8001134 <HAL_GetTick>
 8002e30:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002e32:	e009      	b.n	8002e48 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002e34:	f7fe f97e 	bl	8001134 <HAL_GetTick>
 8002e38:	4602      	mov	r2, r0
 8002e3a:	68bb      	ldr	r3, [r7, #8]
 8002e3c:	1ad3      	subs	r3, r2, r3
 8002e3e:	2b02      	cmp	r3, #2
 8002e40:	d902      	bls.n	8002e48 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002e42:	2303      	movs	r3, #3
 8002e44:	73fb      	strb	r3, [r7, #15]
          break;
 8002e46:	e005      	b.n	8002e54 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002e48:	4b0a      	ldr	r3, [pc, #40]	@ (8002e74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d0ef      	beq.n	8002e34 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002e54:	7bfb      	ldrb	r3, [r7, #15]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d106      	bne.n	8002e68 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002e5a:	4b06      	ldr	r3, [pc, #24]	@ (8002e74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e5c:	695a      	ldr	r2, [r3, #20]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	695b      	ldr	r3, [r3, #20]
 8002e62:	4904      	ldr	r1, [pc, #16]	@ (8002e74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e64:	4313      	orrs	r3, r2
 8002e66:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002e68:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	3710      	adds	r7, #16
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}
 8002e72:	bf00      	nop
 8002e74:	40021000 	.word	0x40021000

08002e78 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b082      	sub	sp, #8
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d101      	bne.n	8002e8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e86:	2301      	movs	r3, #1
 8002e88:	e040      	b.n	8002f0c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d106      	bne.n	8002ea0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2200      	movs	r2, #0
 8002e96:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e9a:	6878      	ldr	r0, [r7, #4]
 8002e9c:	f7fd fffe 	bl	8000e9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2224      	movs	r2, #36	@ 0x24
 8002ea4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	681a      	ldr	r2, [r3, #0]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f022 0201 	bic.w	r2, r2, #1
 8002eb4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d002      	beq.n	8002ec4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002ebe:	6878      	ldr	r0, [r7, #4]
 8002ec0:	f000 fedc 	bl	8003c7c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002ec4:	6878      	ldr	r0, [r7, #4]
 8002ec6:	f000 fc21 	bl	800370c <UART_SetConfig>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	2b01      	cmp	r3, #1
 8002ece:	d101      	bne.n	8002ed4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	e01b      	b.n	8002f0c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	685a      	ldr	r2, [r3, #4]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002ee2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	689a      	ldr	r2, [r3, #8]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002ef2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	681a      	ldr	r2, [r3, #0]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f042 0201 	orr.w	r2, r2, #1
 8002f02:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002f04:	6878      	ldr	r0, [r7, #4]
 8002f06:	f000 ff5b 	bl	8003dc0 <UART_CheckIdleState>
 8002f0a:	4603      	mov	r3, r0
}
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	3708      	adds	r7, #8
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd80      	pop	{r7, pc}

08002f14 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b08a      	sub	sp, #40	@ 0x28
 8002f18:	af02      	add	r7, sp, #8
 8002f1a:	60f8      	str	r0, [r7, #12]
 8002f1c:	60b9      	str	r1, [r7, #8]
 8002f1e:	603b      	str	r3, [r7, #0]
 8002f20:	4613      	mov	r3, r2
 8002f22:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002f28:	2b20      	cmp	r3, #32
 8002f2a:	d177      	bne.n	800301c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d002      	beq.n	8002f38 <HAL_UART_Transmit+0x24>
 8002f32:	88fb      	ldrh	r3, [r7, #6]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d101      	bne.n	8002f3c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	e070      	b.n	800301e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	2221      	movs	r2, #33	@ 0x21
 8002f48:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002f4a:	f7fe f8f3 	bl	8001134 <HAL_GetTick>
 8002f4e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	88fa      	ldrh	r2, [r7, #6]
 8002f54:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	88fa      	ldrh	r2, [r7, #6]
 8002f5c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	689b      	ldr	r3, [r3, #8]
 8002f64:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002f68:	d108      	bne.n	8002f7c <HAL_UART_Transmit+0x68>
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	691b      	ldr	r3, [r3, #16]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d104      	bne.n	8002f7c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002f72:	2300      	movs	r3, #0
 8002f74:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002f76:	68bb      	ldr	r3, [r7, #8]
 8002f78:	61bb      	str	r3, [r7, #24]
 8002f7a:	e003      	b.n	8002f84 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002f80:	2300      	movs	r3, #0
 8002f82:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002f84:	e02f      	b.n	8002fe6 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	9300      	str	r3, [sp, #0]
 8002f8a:	697b      	ldr	r3, [r7, #20]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	2180      	movs	r1, #128	@ 0x80
 8002f90:	68f8      	ldr	r0, [r7, #12]
 8002f92:	f000 ffbd 	bl	8003f10 <UART_WaitOnFlagUntilTimeout>
 8002f96:	4603      	mov	r3, r0
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d004      	beq.n	8002fa6 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	2220      	movs	r2, #32
 8002fa0:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8002fa2:	2303      	movs	r3, #3
 8002fa4:	e03b      	b.n	800301e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8002fa6:	69fb      	ldr	r3, [r7, #28]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d10b      	bne.n	8002fc4 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002fac:	69bb      	ldr	r3, [r7, #24]
 8002fae:	881a      	ldrh	r2, [r3, #0]
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002fb8:	b292      	uxth	r2, r2
 8002fba:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002fbc:	69bb      	ldr	r3, [r7, #24]
 8002fbe:	3302      	adds	r3, #2
 8002fc0:	61bb      	str	r3, [r7, #24]
 8002fc2:	e007      	b.n	8002fd4 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002fc4:	69fb      	ldr	r3, [r7, #28]
 8002fc6:	781a      	ldrb	r2, [r3, #0]
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002fce:	69fb      	ldr	r3, [r7, #28]
 8002fd0:	3301      	adds	r3, #1
 8002fd2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002fda:	b29b      	uxth	r3, r3
 8002fdc:	3b01      	subs	r3, #1
 8002fde:	b29a      	uxth	r2, r3
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002fec:	b29b      	uxth	r3, r3
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d1c9      	bne.n	8002f86 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	9300      	str	r3, [sp, #0]
 8002ff6:	697b      	ldr	r3, [r7, #20]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	2140      	movs	r1, #64	@ 0x40
 8002ffc:	68f8      	ldr	r0, [r7, #12]
 8002ffe:	f000 ff87 	bl	8003f10 <UART_WaitOnFlagUntilTimeout>
 8003002:	4603      	mov	r3, r0
 8003004:	2b00      	cmp	r3, #0
 8003006:	d004      	beq.n	8003012 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	2220      	movs	r2, #32
 800300c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800300e:	2303      	movs	r3, #3
 8003010:	e005      	b.n	800301e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	2220      	movs	r2, #32
 8003016:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003018:	2300      	movs	r3, #0
 800301a:	e000      	b.n	800301e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800301c:	2302      	movs	r3, #2
  }
}
 800301e:	4618      	mov	r0, r3
 8003020:	3720      	adds	r7, #32
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}
	...

08003028 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b08a      	sub	sp, #40	@ 0x28
 800302c:	af00      	add	r7, sp, #0
 800302e:	60f8      	str	r0, [r7, #12]
 8003030:	60b9      	str	r1, [r7, #8]
 8003032:	4613      	mov	r3, r2
 8003034:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800303c:	2b20      	cmp	r3, #32
 800303e:	d137      	bne.n	80030b0 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d002      	beq.n	800304c <HAL_UART_Receive_IT+0x24>
 8003046:	88fb      	ldrh	r3, [r7, #6]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d101      	bne.n	8003050 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800304c:	2301      	movs	r3, #1
 800304e:	e030      	b.n	80030b2 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	2200      	movs	r2, #0
 8003054:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a18      	ldr	r2, [pc, #96]	@ (80030bc <HAL_UART_Receive_IT+0x94>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d01f      	beq.n	80030a0 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800306a:	2b00      	cmp	r3, #0
 800306c:	d018      	beq.n	80030a0 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	e853 3f00 	ldrex	r3, [r3]
 800307a:	613b      	str	r3, [r7, #16]
   return(result);
 800307c:	693b      	ldr	r3, [r7, #16]
 800307e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003082:	627b      	str	r3, [r7, #36]	@ 0x24
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	461a      	mov	r2, r3
 800308a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800308c:	623b      	str	r3, [r7, #32]
 800308e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003090:	69f9      	ldr	r1, [r7, #28]
 8003092:	6a3a      	ldr	r2, [r7, #32]
 8003094:	e841 2300 	strex	r3, r2, [r1]
 8003098:	61bb      	str	r3, [r7, #24]
   return(result);
 800309a:	69bb      	ldr	r3, [r7, #24]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d1e6      	bne.n	800306e <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80030a0:	88fb      	ldrh	r3, [r7, #6]
 80030a2:	461a      	mov	r2, r3
 80030a4:	68b9      	ldr	r1, [r7, #8]
 80030a6:	68f8      	ldr	r0, [r7, #12]
 80030a8:	f000 ffa0 	bl	8003fec <UART_Start_Receive_IT>
 80030ac:	4603      	mov	r3, r0
 80030ae:	e000      	b.n	80030b2 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80030b0:	2302      	movs	r3, #2
  }
}
 80030b2:	4618      	mov	r0, r3
 80030b4:	3728      	adds	r7, #40	@ 0x28
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bd80      	pop	{r7, pc}
 80030ba:	bf00      	nop
 80030bc:	40008000 	.word	0x40008000

080030c0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b0ba      	sub	sp, #232	@ 0xe8
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	69db      	ldr	r3, [r3, #28]
 80030ce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	689b      	ldr	r3, [r3, #8]
 80030e2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80030e6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80030ea:	f640 030f 	movw	r3, #2063	@ 0x80f
 80030ee:	4013      	ands	r3, r2
 80030f0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80030f4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d115      	bne.n	8003128 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80030fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003100:	f003 0320 	and.w	r3, r3, #32
 8003104:	2b00      	cmp	r3, #0
 8003106:	d00f      	beq.n	8003128 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003108:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800310c:	f003 0320 	and.w	r3, r3, #32
 8003110:	2b00      	cmp	r3, #0
 8003112:	d009      	beq.n	8003128 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003118:	2b00      	cmp	r3, #0
 800311a:	f000 82ca 	beq.w	80036b2 <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003122:	6878      	ldr	r0, [r7, #4]
 8003124:	4798      	blx	r3
      }
      return;
 8003126:	e2c4      	b.n	80036b2 <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8003128:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800312c:	2b00      	cmp	r3, #0
 800312e:	f000 8117 	beq.w	8003360 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003132:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003136:	f003 0301 	and.w	r3, r3, #1
 800313a:	2b00      	cmp	r3, #0
 800313c:	d106      	bne.n	800314c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800313e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8003142:	4b85      	ldr	r3, [pc, #532]	@ (8003358 <HAL_UART_IRQHandler+0x298>)
 8003144:	4013      	ands	r3, r2
 8003146:	2b00      	cmp	r3, #0
 8003148:	f000 810a 	beq.w	8003360 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800314c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003150:	f003 0301 	and.w	r3, r3, #1
 8003154:	2b00      	cmp	r3, #0
 8003156:	d011      	beq.n	800317c <HAL_UART_IRQHandler+0xbc>
 8003158:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800315c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003160:	2b00      	cmp	r3, #0
 8003162:	d00b      	beq.n	800317c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	2201      	movs	r2, #1
 800316a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003172:	f043 0201 	orr.w	r2, r3, #1
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800317c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003180:	f003 0302 	and.w	r3, r3, #2
 8003184:	2b00      	cmp	r3, #0
 8003186:	d011      	beq.n	80031ac <HAL_UART_IRQHandler+0xec>
 8003188:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800318c:	f003 0301 	and.w	r3, r3, #1
 8003190:	2b00      	cmp	r3, #0
 8003192:	d00b      	beq.n	80031ac <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	2202      	movs	r2, #2
 800319a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80031a2:	f043 0204 	orr.w	r2, r3, #4
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80031ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80031b0:	f003 0304 	and.w	r3, r3, #4
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d011      	beq.n	80031dc <HAL_UART_IRQHandler+0x11c>
 80031b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80031bc:	f003 0301 	and.w	r3, r3, #1
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d00b      	beq.n	80031dc <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	2204      	movs	r2, #4
 80031ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80031d2:	f043 0202 	orr.w	r2, r3, #2
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80031dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80031e0:	f003 0308 	and.w	r3, r3, #8
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d017      	beq.n	8003218 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80031e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80031ec:	f003 0320 	and.w	r3, r3, #32
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d105      	bne.n	8003200 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80031f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80031f8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d00b      	beq.n	8003218 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	2208      	movs	r2, #8
 8003206:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800320e:	f043 0208 	orr.w	r2, r3, #8
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003218:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800321c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003220:	2b00      	cmp	r3, #0
 8003222:	d012      	beq.n	800324a <HAL_UART_IRQHandler+0x18a>
 8003224:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003228:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800322c:	2b00      	cmp	r3, #0
 800322e:	d00c      	beq.n	800324a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003238:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003240:	f043 0220 	orr.w	r2, r3, #32
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003250:	2b00      	cmp	r3, #0
 8003252:	f000 8230 	beq.w	80036b6 <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003256:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800325a:	f003 0320 	and.w	r3, r3, #32
 800325e:	2b00      	cmp	r3, #0
 8003260:	d00d      	beq.n	800327e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003262:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003266:	f003 0320 	and.w	r3, r3, #32
 800326a:	2b00      	cmp	r3, #0
 800326c:	d007      	beq.n	800327e <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003272:	2b00      	cmp	r3, #0
 8003274:	d003      	beq.n	800327e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800327a:	6878      	ldr	r0, [r7, #4]
 800327c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003284:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	689b      	ldr	r3, [r3, #8]
 800328e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003292:	2b40      	cmp	r3, #64	@ 0x40
 8003294:	d005      	beq.n	80032a2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003296:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800329a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d04f      	beq.n	8003342 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80032a2:	6878      	ldr	r0, [r7, #4]
 80032a4:	f000 ff68 	bl	8004178 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	689b      	ldr	r3, [r3, #8]
 80032ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032b2:	2b40      	cmp	r3, #64	@ 0x40
 80032b4:	d141      	bne.n	800333a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	3308      	adds	r3, #8
 80032bc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80032c4:	e853 3f00 	ldrex	r3, [r3]
 80032c8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80032cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80032d0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80032d4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	3308      	adds	r3, #8
 80032de:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80032e2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80032e6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032ea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80032ee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80032f2:	e841 2300 	strex	r3, r2, [r1]
 80032f6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80032fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d1d9      	bne.n	80032b6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003306:	2b00      	cmp	r3, #0
 8003308:	d013      	beq.n	8003332 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800330e:	4a13      	ldr	r2, [pc, #76]	@ (800335c <HAL_UART_IRQHandler+0x29c>)
 8003310:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003316:	4618      	mov	r0, r3
 8003318:	f7fe f88b 	bl	8001432 <HAL_DMA_Abort_IT>
 800331c:	4603      	mov	r3, r0
 800331e:	2b00      	cmp	r3, #0
 8003320:	d017      	beq.n	8003352 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003326:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003328:	687a      	ldr	r2, [r7, #4]
 800332a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800332c:	4610      	mov	r0, r2
 800332e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003330:	e00f      	b.n	8003352 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003332:	6878      	ldr	r0, [r7, #4]
 8003334:	f000 f9d4 	bl	80036e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003338:	e00b      	b.n	8003352 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800333a:	6878      	ldr	r0, [r7, #4]
 800333c:	f000 f9d0 	bl	80036e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003340:	e007      	b.n	8003352 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003342:	6878      	ldr	r0, [r7, #4]
 8003344:	f000 f9cc 	bl	80036e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2200      	movs	r2, #0
 800334c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8003350:	e1b1      	b.n	80036b6 <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003352:	bf00      	nop
    return;
 8003354:	e1af      	b.n	80036b6 <HAL_UART_IRQHandler+0x5f6>
 8003356:	bf00      	nop
 8003358:	04000120 	.word	0x04000120
 800335c:	08004241 	.word	0x08004241

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003364:	2b01      	cmp	r3, #1
 8003366:	f040 816a 	bne.w	800363e <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800336a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800336e:	f003 0310 	and.w	r3, r3, #16
 8003372:	2b00      	cmp	r3, #0
 8003374:	f000 8163 	beq.w	800363e <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003378:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800337c:	f003 0310 	and.w	r3, r3, #16
 8003380:	2b00      	cmp	r3, #0
 8003382:	f000 815c 	beq.w	800363e <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	2210      	movs	r2, #16
 800338c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	689b      	ldr	r3, [r3, #8]
 8003394:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003398:	2b40      	cmp	r3, #64	@ 0x40
 800339a:	f040 80d4 	bne.w	8003546 <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80033aa:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	f000 80ad 	beq.w	800350e <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80033ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80033be:	429a      	cmp	r2, r3
 80033c0:	f080 80a5 	bcs.w	800350e <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80033ca:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f003 0320 	and.w	r3, r3, #32
 80033da:	2b00      	cmp	r3, #0
 80033dc:	f040 8086 	bne.w	80034ec <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033e8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80033ec:	e853 3f00 	ldrex	r3, [r3]
 80033f0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80033f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80033f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80033fc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	461a      	mov	r2, r3
 8003406:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800340a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800340e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003412:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003416:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800341a:	e841 2300 	strex	r3, r2, [r1]
 800341e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003422:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003426:	2b00      	cmp	r3, #0
 8003428:	d1da      	bne.n	80033e0 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	3308      	adds	r3, #8
 8003430:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003432:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003434:	e853 3f00 	ldrex	r3, [r3]
 8003438:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800343a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800343c:	f023 0301 	bic.w	r3, r3, #1
 8003440:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	3308      	adds	r3, #8
 800344a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800344e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003452:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003454:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003456:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800345a:	e841 2300 	strex	r3, r2, [r1]
 800345e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003460:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003462:	2b00      	cmp	r3, #0
 8003464:	d1e1      	bne.n	800342a <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	3308      	adds	r3, #8
 800346c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800346e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003470:	e853 3f00 	ldrex	r3, [r3]
 8003474:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003476:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003478:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800347c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	3308      	adds	r3, #8
 8003486:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800348a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800348c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800348e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003490:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003492:	e841 2300 	strex	r3, r2, [r1]
 8003496:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003498:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800349a:	2b00      	cmp	r3, #0
 800349c:	d1e3      	bne.n	8003466 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2220      	movs	r2, #32
 80034a2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2200      	movs	r2, #0
 80034aa:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80034b4:	e853 3f00 	ldrex	r3, [r3]
 80034b8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80034ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80034bc:	f023 0310 	bic.w	r3, r3, #16
 80034c0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	461a      	mov	r2, r3
 80034ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80034ce:	65bb      	str	r3, [r7, #88]	@ 0x58
 80034d0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034d2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80034d4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80034d6:	e841 2300 	strex	r3, r2, [r1]
 80034da:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80034dc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d1e4      	bne.n	80034ac <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80034e6:	4618      	mov	r0, r3
 80034e8:	f7fd ff65 	bl	80013b6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2202      	movs	r2, #2
 80034f0:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80034fe:	b29b      	uxth	r3, r3
 8003500:	1ad3      	subs	r3, r2, r3
 8003502:	b29b      	uxth	r3, r3
 8003504:	4619      	mov	r1, r3
 8003506:	6878      	ldr	r0, [r7, #4]
 8003508:	f000 f8f4 	bl	80036f4 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800350c:	e0d5      	b.n	80036ba <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003514:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003518:	429a      	cmp	r2, r3
 800351a:	f040 80ce 	bne.w	80036ba <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f003 0320 	and.w	r3, r3, #32
 800352a:	2b20      	cmp	r3, #32
 800352c:	f040 80c5 	bne.w	80036ba <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2202      	movs	r2, #2
 8003534:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800353c:	4619      	mov	r1, r3
 800353e:	6878      	ldr	r0, [r7, #4]
 8003540:	f000 f8d8 	bl	80036f4 <HAL_UARTEx_RxEventCallback>
      return;
 8003544:	e0b9      	b.n	80036ba <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003552:	b29b      	uxth	r3, r3
 8003554:	1ad3      	subs	r3, r2, r3
 8003556:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003560:	b29b      	uxth	r3, r3
 8003562:	2b00      	cmp	r3, #0
 8003564:	f000 80ab 	beq.w	80036be <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8003568:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800356c:	2b00      	cmp	r3, #0
 800356e:	f000 80a6 	beq.w	80036be <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003578:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800357a:	e853 3f00 	ldrex	r3, [r3]
 800357e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003580:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003582:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003586:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	461a      	mov	r2, r3
 8003590:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003594:	647b      	str	r3, [r7, #68]	@ 0x44
 8003596:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003598:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800359a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800359c:	e841 2300 	strex	r3, r2, [r1]
 80035a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80035a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d1e4      	bne.n	8003572 <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	3308      	adds	r3, #8
 80035ae:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035b2:	e853 3f00 	ldrex	r3, [r3]
 80035b6:	623b      	str	r3, [r7, #32]
   return(result);
 80035b8:	6a3b      	ldr	r3, [r7, #32]
 80035ba:	f023 0301 	bic.w	r3, r3, #1
 80035be:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	3308      	adds	r3, #8
 80035c8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80035cc:	633a      	str	r2, [r7, #48]	@ 0x30
 80035ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035d0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80035d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80035d4:	e841 2300 	strex	r3, r2, [r1]
 80035d8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80035da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d1e3      	bne.n	80035a8 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2220      	movs	r2, #32
 80035e4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2200      	movs	r2, #0
 80035ec:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2200      	movs	r2, #0
 80035f2:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035fa:	693b      	ldr	r3, [r7, #16]
 80035fc:	e853 3f00 	ldrex	r3, [r3]
 8003600:	60fb      	str	r3, [r7, #12]
   return(result);
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	f023 0310 	bic.w	r3, r3, #16
 8003608:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	461a      	mov	r2, r3
 8003612:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003616:	61fb      	str	r3, [r7, #28]
 8003618:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800361a:	69b9      	ldr	r1, [r7, #24]
 800361c:	69fa      	ldr	r2, [r7, #28]
 800361e:	e841 2300 	strex	r3, r2, [r1]
 8003622:	617b      	str	r3, [r7, #20]
   return(result);
 8003624:	697b      	ldr	r3, [r7, #20]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d1e4      	bne.n	80035f4 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2202      	movs	r2, #2
 800362e:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003630:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003634:	4619      	mov	r1, r3
 8003636:	6878      	ldr	r0, [r7, #4]
 8003638:	f000 f85c 	bl	80036f4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800363c:	e03f      	b.n	80036be <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800363e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003642:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003646:	2b00      	cmp	r3, #0
 8003648:	d00e      	beq.n	8003668 <HAL_UART_IRQHandler+0x5a8>
 800364a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800364e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003652:	2b00      	cmp	r3, #0
 8003654:	d008      	beq.n	8003668 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800365e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003660:	6878      	ldr	r0, [r7, #4]
 8003662:	f000 ffe9 	bl	8004638 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003666:	e02d      	b.n	80036c4 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003668:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800366c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003670:	2b00      	cmp	r3, #0
 8003672:	d00e      	beq.n	8003692 <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003674:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003678:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800367c:	2b00      	cmp	r3, #0
 800367e:	d008      	beq.n	8003692 <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003684:	2b00      	cmp	r3, #0
 8003686:	d01c      	beq.n	80036c2 <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800368c:	6878      	ldr	r0, [r7, #4]
 800368e:	4798      	blx	r3
    }
    return;
 8003690:	e017      	b.n	80036c2 <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003692:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003696:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800369a:	2b00      	cmp	r3, #0
 800369c:	d012      	beq.n	80036c4 <HAL_UART_IRQHandler+0x604>
 800369e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80036a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d00c      	beq.n	80036c4 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 80036aa:	6878      	ldr	r0, [r7, #4]
 80036ac:	f000 fdde 	bl	800426c <UART_EndTransmit_IT>
    return;
 80036b0:	e008      	b.n	80036c4 <HAL_UART_IRQHandler+0x604>
      return;
 80036b2:	bf00      	nop
 80036b4:	e006      	b.n	80036c4 <HAL_UART_IRQHandler+0x604>
    return;
 80036b6:	bf00      	nop
 80036b8:	e004      	b.n	80036c4 <HAL_UART_IRQHandler+0x604>
      return;
 80036ba:	bf00      	nop
 80036bc:	e002      	b.n	80036c4 <HAL_UART_IRQHandler+0x604>
      return;
 80036be:	bf00      	nop
 80036c0:	e000      	b.n	80036c4 <HAL_UART_IRQHandler+0x604>
    return;
 80036c2:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80036c4:	37e8      	adds	r7, #232	@ 0xe8
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}
 80036ca:	bf00      	nop

080036cc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b083      	sub	sp, #12
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80036d4:	bf00      	nop
 80036d6:	370c      	adds	r7, #12
 80036d8:	46bd      	mov	sp, r7
 80036da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036de:	4770      	bx	lr

080036e0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80036e0:	b480      	push	{r7}
 80036e2:	b083      	sub	sp, #12
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80036e8:	bf00      	nop
 80036ea:	370c      	adds	r7, #12
 80036ec:	46bd      	mov	sp, r7
 80036ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f2:	4770      	bx	lr

080036f4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80036f4:	b480      	push	{r7}
 80036f6:	b083      	sub	sp, #12
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
 80036fc:	460b      	mov	r3, r1
 80036fe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003700:	bf00      	nop
 8003702:	370c      	adds	r7, #12
 8003704:	46bd      	mov	sp, r7
 8003706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370a:	4770      	bx	lr

0800370c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800370c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003710:	b08a      	sub	sp, #40	@ 0x28
 8003712:	af00      	add	r7, sp, #0
 8003714:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003716:	2300      	movs	r3, #0
 8003718:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	689a      	ldr	r2, [r3, #8]
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	691b      	ldr	r3, [r3, #16]
 8003724:	431a      	orrs	r2, r3
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	695b      	ldr	r3, [r3, #20]
 800372a:	431a      	orrs	r2, r3
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	69db      	ldr	r3, [r3, #28]
 8003730:	4313      	orrs	r3, r2
 8003732:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	681a      	ldr	r2, [r3, #0]
 800373a:	4ba4      	ldr	r3, [pc, #656]	@ (80039cc <UART_SetConfig+0x2c0>)
 800373c:	4013      	ands	r3, r2
 800373e:	68fa      	ldr	r2, [r7, #12]
 8003740:	6812      	ldr	r2, [r2, #0]
 8003742:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003744:	430b      	orrs	r3, r1
 8003746:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	68da      	ldr	r2, [r3, #12]
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	430a      	orrs	r2, r1
 800375c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	699b      	ldr	r3, [r3, #24]
 8003762:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4a99      	ldr	r2, [pc, #612]	@ (80039d0 <UART_SetConfig+0x2c4>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d004      	beq.n	8003778 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	6a1b      	ldr	r3, [r3, #32]
 8003772:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003774:	4313      	orrs	r3, r2
 8003776:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	689b      	ldr	r3, [r3, #8]
 800377e:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003788:	430a      	orrs	r2, r1
 800378a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a90      	ldr	r2, [pc, #576]	@ (80039d4 <UART_SetConfig+0x2c8>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d126      	bne.n	80037e4 <UART_SetConfig+0xd8>
 8003796:	4b90      	ldr	r3, [pc, #576]	@ (80039d8 <UART_SetConfig+0x2cc>)
 8003798:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800379c:	f003 0303 	and.w	r3, r3, #3
 80037a0:	2b03      	cmp	r3, #3
 80037a2:	d81b      	bhi.n	80037dc <UART_SetConfig+0xd0>
 80037a4:	a201      	add	r2, pc, #4	@ (adr r2, 80037ac <UART_SetConfig+0xa0>)
 80037a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037aa:	bf00      	nop
 80037ac:	080037bd 	.word	0x080037bd
 80037b0:	080037cd 	.word	0x080037cd
 80037b4:	080037c5 	.word	0x080037c5
 80037b8:	080037d5 	.word	0x080037d5
 80037bc:	2301      	movs	r3, #1
 80037be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80037c2:	e116      	b.n	80039f2 <UART_SetConfig+0x2e6>
 80037c4:	2302      	movs	r3, #2
 80037c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80037ca:	e112      	b.n	80039f2 <UART_SetConfig+0x2e6>
 80037cc:	2304      	movs	r3, #4
 80037ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80037d2:	e10e      	b.n	80039f2 <UART_SetConfig+0x2e6>
 80037d4:	2308      	movs	r3, #8
 80037d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80037da:	e10a      	b.n	80039f2 <UART_SetConfig+0x2e6>
 80037dc:	2310      	movs	r3, #16
 80037de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80037e2:	e106      	b.n	80039f2 <UART_SetConfig+0x2e6>
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a7c      	ldr	r2, [pc, #496]	@ (80039dc <UART_SetConfig+0x2d0>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d138      	bne.n	8003860 <UART_SetConfig+0x154>
 80037ee:	4b7a      	ldr	r3, [pc, #488]	@ (80039d8 <UART_SetConfig+0x2cc>)
 80037f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037f4:	f003 030c 	and.w	r3, r3, #12
 80037f8:	2b0c      	cmp	r3, #12
 80037fa:	d82d      	bhi.n	8003858 <UART_SetConfig+0x14c>
 80037fc:	a201      	add	r2, pc, #4	@ (adr r2, 8003804 <UART_SetConfig+0xf8>)
 80037fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003802:	bf00      	nop
 8003804:	08003839 	.word	0x08003839
 8003808:	08003859 	.word	0x08003859
 800380c:	08003859 	.word	0x08003859
 8003810:	08003859 	.word	0x08003859
 8003814:	08003849 	.word	0x08003849
 8003818:	08003859 	.word	0x08003859
 800381c:	08003859 	.word	0x08003859
 8003820:	08003859 	.word	0x08003859
 8003824:	08003841 	.word	0x08003841
 8003828:	08003859 	.word	0x08003859
 800382c:	08003859 	.word	0x08003859
 8003830:	08003859 	.word	0x08003859
 8003834:	08003851 	.word	0x08003851
 8003838:	2300      	movs	r3, #0
 800383a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800383e:	e0d8      	b.n	80039f2 <UART_SetConfig+0x2e6>
 8003840:	2302      	movs	r3, #2
 8003842:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003846:	e0d4      	b.n	80039f2 <UART_SetConfig+0x2e6>
 8003848:	2304      	movs	r3, #4
 800384a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800384e:	e0d0      	b.n	80039f2 <UART_SetConfig+0x2e6>
 8003850:	2308      	movs	r3, #8
 8003852:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003856:	e0cc      	b.n	80039f2 <UART_SetConfig+0x2e6>
 8003858:	2310      	movs	r3, #16
 800385a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800385e:	e0c8      	b.n	80039f2 <UART_SetConfig+0x2e6>
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a5e      	ldr	r2, [pc, #376]	@ (80039e0 <UART_SetConfig+0x2d4>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d125      	bne.n	80038b6 <UART_SetConfig+0x1aa>
 800386a:	4b5b      	ldr	r3, [pc, #364]	@ (80039d8 <UART_SetConfig+0x2cc>)
 800386c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003870:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003874:	2b30      	cmp	r3, #48	@ 0x30
 8003876:	d016      	beq.n	80038a6 <UART_SetConfig+0x19a>
 8003878:	2b30      	cmp	r3, #48	@ 0x30
 800387a:	d818      	bhi.n	80038ae <UART_SetConfig+0x1a2>
 800387c:	2b20      	cmp	r3, #32
 800387e:	d00a      	beq.n	8003896 <UART_SetConfig+0x18a>
 8003880:	2b20      	cmp	r3, #32
 8003882:	d814      	bhi.n	80038ae <UART_SetConfig+0x1a2>
 8003884:	2b00      	cmp	r3, #0
 8003886:	d002      	beq.n	800388e <UART_SetConfig+0x182>
 8003888:	2b10      	cmp	r3, #16
 800388a:	d008      	beq.n	800389e <UART_SetConfig+0x192>
 800388c:	e00f      	b.n	80038ae <UART_SetConfig+0x1a2>
 800388e:	2300      	movs	r3, #0
 8003890:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003894:	e0ad      	b.n	80039f2 <UART_SetConfig+0x2e6>
 8003896:	2302      	movs	r3, #2
 8003898:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800389c:	e0a9      	b.n	80039f2 <UART_SetConfig+0x2e6>
 800389e:	2304      	movs	r3, #4
 80038a0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80038a4:	e0a5      	b.n	80039f2 <UART_SetConfig+0x2e6>
 80038a6:	2308      	movs	r3, #8
 80038a8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80038ac:	e0a1      	b.n	80039f2 <UART_SetConfig+0x2e6>
 80038ae:	2310      	movs	r3, #16
 80038b0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80038b4:	e09d      	b.n	80039f2 <UART_SetConfig+0x2e6>
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a4a      	ldr	r2, [pc, #296]	@ (80039e4 <UART_SetConfig+0x2d8>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d125      	bne.n	800390c <UART_SetConfig+0x200>
 80038c0:	4b45      	ldr	r3, [pc, #276]	@ (80039d8 <UART_SetConfig+0x2cc>)
 80038c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038c6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80038ca:	2bc0      	cmp	r3, #192	@ 0xc0
 80038cc:	d016      	beq.n	80038fc <UART_SetConfig+0x1f0>
 80038ce:	2bc0      	cmp	r3, #192	@ 0xc0
 80038d0:	d818      	bhi.n	8003904 <UART_SetConfig+0x1f8>
 80038d2:	2b80      	cmp	r3, #128	@ 0x80
 80038d4:	d00a      	beq.n	80038ec <UART_SetConfig+0x1e0>
 80038d6:	2b80      	cmp	r3, #128	@ 0x80
 80038d8:	d814      	bhi.n	8003904 <UART_SetConfig+0x1f8>
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d002      	beq.n	80038e4 <UART_SetConfig+0x1d8>
 80038de:	2b40      	cmp	r3, #64	@ 0x40
 80038e0:	d008      	beq.n	80038f4 <UART_SetConfig+0x1e8>
 80038e2:	e00f      	b.n	8003904 <UART_SetConfig+0x1f8>
 80038e4:	2300      	movs	r3, #0
 80038e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80038ea:	e082      	b.n	80039f2 <UART_SetConfig+0x2e6>
 80038ec:	2302      	movs	r3, #2
 80038ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80038f2:	e07e      	b.n	80039f2 <UART_SetConfig+0x2e6>
 80038f4:	2304      	movs	r3, #4
 80038f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80038fa:	e07a      	b.n	80039f2 <UART_SetConfig+0x2e6>
 80038fc:	2308      	movs	r3, #8
 80038fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003902:	e076      	b.n	80039f2 <UART_SetConfig+0x2e6>
 8003904:	2310      	movs	r3, #16
 8003906:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800390a:	e072      	b.n	80039f2 <UART_SetConfig+0x2e6>
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a35      	ldr	r2, [pc, #212]	@ (80039e8 <UART_SetConfig+0x2dc>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d12a      	bne.n	800396c <UART_SetConfig+0x260>
 8003916:	4b30      	ldr	r3, [pc, #192]	@ (80039d8 <UART_SetConfig+0x2cc>)
 8003918:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800391c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003920:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003924:	d01a      	beq.n	800395c <UART_SetConfig+0x250>
 8003926:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800392a:	d81b      	bhi.n	8003964 <UART_SetConfig+0x258>
 800392c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003930:	d00c      	beq.n	800394c <UART_SetConfig+0x240>
 8003932:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003936:	d815      	bhi.n	8003964 <UART_SetConfig+0x258>
 8003938:	2b00      	cmp	r3, #0
 800393a:	d003      	beq.n	8003944 <UART_SetConfig+0x238>
 800393c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003940:	d008      	beq.n	8003954 <UART_SetConfig+0x248>
 8003942:	e00f      	b.n	8003964 <UART_SetConfig+0x258>
 8003944:	2300      	movs	r3, #0
 8003946:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800394a:	e052      	b.n	80039f2 <UART_SetConfig+0x2e6>
 800394c:	2302      	movs	r3, #2
 800394e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003952:	e04e      	b.n	80039f2 <UART_SetConfig+0x2e6>
 8003954:	2304      	movs	r3, #4
 8003956:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800395a:	e04a      	b.n	80039f2 <UART_SetConfig+0x2e6>
 800395c:	2308      	movs	r3, #8
 800395e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003962:	e046      	b.n	80039f2 <UART_SetConfig+0x2e6>
 8003964:	2310      	movs	r3, #16
 8003966:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800396a:	e042      	b.n	80039f2 <UART_SetConfig+0x2e6>
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a17      	ldr	r2, [pc, #92]	@ (80039d0 <UART_SetConfig+0x2c4>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d13a      	bne.n	80039ec <UART_SetConfig+0x2e0>
 8003976:	4b18      	ldr	r3, [pc, #96]	@ (80039d8 <UART_SetConfig+0x2cc>)
 8003978:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800397c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003980:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003984:	d01a      	beq.n	80039bc <UART_SetConfig+0x2b0>
 8003986:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800398a:	d81b      	bhi.n	80039c4 <UART_SetConfig+0x2b8>
 800398c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003990:	d00c      	beq.n	80039ac <UART_SetConfig+0x2a0>
 8003992:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003996:	d815      	bhi.n	80039c4 <UART_SetConfig+0x2b8>
 8003998:	2b00      	cmp	r3, #0
 800399a:	d003      	beq.n	80039a4 <UART_SetConfig+0x298>
 800399c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80039a0:	d008      	beq.n	80039b4 <UART_SetConfig+0x2a8>
 80039a2:	e00f      	b.n	80039c4 <UART_SetConfig+0x2b8>
 80039a4:	2300      	movs	r3, #0
 80039a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80039aa:	e022      	b.n	80039f2 <UART_SetConfig+0x2e6>
 80039ac:	2302      	movs	r3, #2
 80039ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80039b2:	e01e      	b.n	80039f2 <UART_SetConfig+0x2e6>
 80039b4:	2304      	movs	r3, #4
 80039b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80039ba:	e01a      	b.n	80039f2 <UART_SetConfig+0x2e6>
 80039bc:	2308      	movs	r3, #8
 80039be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80039c2:	e016      	b.n	80039f2 <UART_SetConfig+0x2e6>
 80039c4:	2310      	movs	r3, #16
 80039c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80039ca:	e012      	b.n	80039f2 <UART_SetConfig+0x2e6>
 80039cc:	efff69f3 	.word	0xefff69f3
 80039d0:	40008000 	.word	0x40008000
 80039d4:	40013800 	.word	0x40013800
 80039d8:	40021000 	.word	0x40021000
 80039dc:	40004400 	.word	0x40004400
 80039e0:	40004800 	.word	0x40004800
 80039e4:	40004c00 	.word	0x40004c00
 80039e8:	40005000 	.word	0x40005000
 80039ec:	2310      	movs	r3, #16
 80039ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a9f      	ldr	r2, [pc, #636]	@ (8003c74 <UART_SetConfig+0x568>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d17a      	bne.n	8003af2 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80039fc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003a00:	2b08      	cmp	r3, #8
 8003a02:	d824      	bhi.n	8003a4e <UART_SetConfig+0x342>
 8003a04:	a201      	add	r2, pc, #4	@ (adr r2, 8003a0c <UART_SetConfig+0x300>)
 8003a06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a0a:	bf00      	nop
 8003a0c:	08003a31 	.word	0x08003a31
 8003a10:	08003a4f 	.word	0x08003a4f
 8003a14:	08003a39 	.word	0x08003a39
 8003a18:	08003a4f 	.word	0x08003a4f
 8003a1c:	08003a3f 	.word	0x08003a3f
 8003a20:	08003a4f 	.word	0x08003a4f
 8003a24:	08003a4f 	.word	0x08003a4f
 8003a28:	08003a4f 	.word	0x08003a4f
 8003a2c:	08003a47 	.word	0x08003a47
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a30:	f7fe fcda 	bl	80023e8 <HAL_RCC_GetPCLK1Freq>
 8003a34:	61f8      	str	r0, [r7, #28]
        break;
 8003a36:	e010      	b.n	8003a5a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a38:	4b8f      	ldr	r3, [pc, #572]	@ (8003c78 <UART_SetConfig+0x56c>)
 8003a3a:	61fb      	str	r3, [r7, #28]
        break;
 8003a3c:	e00d      	b.n	8003a5a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a3e:	f7fe fc3b 	bl	80022b8 <HAL_RCC_GetSysClockFreq>
 8003a42:	61f8      	str	r0, [r7, #28]
        break;
 8003a44:	e009      	b.n	8003a5a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a46:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003a4a:	61fb      	str	r3, [r7, #28]
        break;
 8003a4c:	e005      	b.n	8003a5a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003a4e:	2300      	movs	r3, #0
 8003a50:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003a58:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003a5a:	69fb      	ldr	r3, [r7, #28]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	f000 80fb 	beq.w	8003c58 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	685a      	ldr	r2, [r3, #4]
 8003a66:	4613      	mov	r3, r2
 8003a68:	005b      	lsls	r3, r3, #1
 8003a6a:	4413      	add	r3, r2
 8003a6c:	69fa      	ldr	r2, [r7, #28]
 8003a6e:	429a      	cmp	r2, r3
 8003a70:	d305      	bcc.n	8003a7e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003a78:	69fa      	ldr	r2, [r7, #28]
 8003a7a:	429a      	cmp	r2, r3
 8003a7c:	d903      	bls.n	8003a86 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003a84:	e0e8      	b.n	8003c58 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003a86:	69fb      	ldr	r3, [r7, #28]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	461c      	mov	r4, r3
 8003a8c:	4615      	mov	r5, r2
 8003a8e:	f04f 0200 	mov.w	r2, #0
 8003a92:	f04f 0300 	mov.w	r3, #0
 8003a96:	022b      	lsls	r3, r5, #8
 8003a98:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003a9c:	0222      	lsls	r2, r4, #8
 8003a9e:	68f9      	ldr	r1, [r7, #12]
 8003aa0:	6849      	ldr	r1, [r1, #4]
 8003aa2:	0849      	lsrs	r1, r1, #1
 8003aa4:	2000      	movs	r0, #0
 8003aa6:	4688      	mov	r8, r1
 8003aa8:	4681      	mov	r9, r0
 8003aaa:	eb12 0a08 	adds.w	sl, r2, r8
 8003aae:	eb43 0b09 	adc.w	fp, r3, r9
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	603b      	str	r3, [r7, #0]
 8003aba:	607a      	str	r2, [r7, #4]
 8003abc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003ac0:	4650      	mov	r0, sl
 8003ac2:	4659      	mov	r1, fp
 8003ac4:	f7fc fb80 	bl	80001c8 <__aeabi_uldivmod>
 8003ac8:	4602      	mov	r2, r0
 8003aca:	460b      	mov	r3, r1
 8003acc:	4613      	mov	r3, r2
 8003ace:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003ad0:	69bb      	ldr	r3, [r7, #24]
 8003ad2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003ad6:	d308      	bcc.n	8003aea <UART_SetConfig+0x3de>
 8003ad8:	69bb      	ldr	r3, [r7, #24]
 8003ada:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003ade:	d204      	bcs.n	8003aea <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	69ba      	ldr	r2, [r7, #24]
 8003ae6:	60da      	str	r2, [r3, #12]
 8003ae8:	e0b6      	b.n	8003c58 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8003aea:	2301      	movs	r3, #1
 8003aec:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003af0:	e0b2      	b.n	8003c58 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	69db      	ldr	r3, [r3, #28]
 8003af6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003afa:	d15e      	bne.n	8003bba <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003afc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003b00:	2b08      	cmp	r3, #8
 8003b02:	d828      	bhi.n	8003b56 <UART_SetConfig+0x44a>
 8003b04:	a201      	add	r2, pc, #4	@ (adr r2, 8003b0c <UART_SetConfig+0x400>)
 8003b06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b0a:	bf00      	nop
 8003b0c:	08003b31 	.word	0x08003b31
 8003b10:	08003b39 	.word	0x08003b39
 8003b14:	08003b41 	.word	0x08003b41
 8003b18:	08003b57 	.word	0x08003b57
 8003b1c:	08003b47 	.word	0x08003b47
 8003b20:	08003b57 	.word	0x08003b57
 8003b24:	08003b57 	.word	0x08003b57
 8003b28:	08003b57 	.word	0x08003b57
 8003b2c:	08003b4f 	.word	0x08003b4f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b30:	f7fe fc5a 	bl	80023e8 <HAL_RCC_GetPCLK1Freq>
 8003b34:	61f8      	str	r0, [r7, #28]
        break;
 8003b36:	e014      	b.n	8003b62 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003b38:	f7fe fc6c 	bl	8002414 <HAL_RCC_GetPCLK2Freq>
 8003b3c:	61f8      	str	r0, [r7, #28]
        break;
 8003b3e:	e010      	b.n	8003b62 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b40:	4b4d      	ldr	r3, [pc, #308]	@ (8003c78 <UART_SetConfig+0x56c>)
 8003b42:	61fb      	str	r3, [r7, #28]
        break;
 8003b44:	e00d      	b.n	8003b62 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b46:	f7fe fbb7 	bl	80022b8 <HAL_RCC_GetSysClockFreq>
 8003b4a:	61f8      	str	r0, [r7, #28]
        break;
 8003b4c:	e009      	b.n	8003b62 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b4e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003b52:	61fb      	str	r3, [r7, #28]
        break;
 8003b54:	e005      	b.n	8003b62 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003b56:	2300      	movs	r3, #0
 8003b58:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003b60:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003b62:	69fb      	ldr	r3, [r7, #28]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d077      	beq.n	8003c58 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003b68:	69fb      	ldr	r3, [r7, #28]
 8003b6a:	005a      	lsls	r2, r3, #1
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	085b      	lsrs	r3, r3, #1
 8003b72:	441a      	add	r2, r3
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b7c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b7e:	69bb      	ldr	r3, [r7, #24]
 8003b80:	2b0f      	cmp	r3, #15
 8003b82:	d916      	bls.n	8003bb2 <UART_SetConfig+0x4a6>
 8003b84:	69bb      	ldr	r3, [r7, #24]
 8003b86:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b8a:	d212      	bcs.n	8003bb2 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003b8c:	69bb      	ldr	r3, [r7, #24]
 8003b8e:	b29b      	uxth	r3, r3
 8003b90:	f023 030f 	bic.w	r3, r3, #15
 8003b94:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003b96:	69bb      	ldr	r3, [r7, #24]
 8003b98:	085b      	lsrs	r3, r3, #1
 8003b9a:	b29b      	uxth	r3, r3
 8003b9c:	f003 0307 	and.w	r3, r3, #7
 8003ba0:	b29a      	uxth	r2, r3
 8003ba2:	8afb      	ldrh	r3, [r7, #22]
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	8afa      	ldrh	r2, [r7, #22]
 8003bae:	60da      	str	r2, [r3, #12]
 8003bb0:	e052      	b.n	8003c58 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003bb8:	e04e      	b.n	8003c58 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003bba:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003bbe:	2b08      	cmp	r3, #8
 8003bc0:	d827      	bhi.n	8003c12 <UART_SetConfig+0x506>
 8003bc2:	a201      	add	r2, pc, #4	@ (adr r2, 8003bc8 <UART_SetConfig+0x4bc>)
 8003bc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bc8:	08003bed 	.word	0x08003bed
 8003bcc:	08003bf5 	.word	0x08003bf5
 8003bd0:	08003bfd 	.word	0x08003bfd
 8003bd4:	08003c13 	.word	0x08003c13
 8003bd8:	08003c03 	.word	0x08003c03
 8003bdc:	08003c13 	.word	0x08003c13
 8003be0:	08003c13 	.word	0x08003c13
 8003be4:	08003c13 	.word	0x08003c13
 8003be8:	08003c0b 	.word	0x08003c0b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003bec:	f7fe fbfc 	bl	80023e8 <HAL_RCC_GetPCLK1Freq>
 8003bf0:	61f8      	str	r0, [r7, #28]
        break;
 8003bf2:	e014      	b.n	8003c1e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003bf4:	f7fe fc0e 	bl	8002414 <HAL_RCC_GetPCLK2Freq>
 8003bf8:	61f8      	str	r0, [r7, #28]
        break;
 8003bfa:	e010      	b.n	8003c1e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003bfc:	4b1e      	ldr	r3, [pc, #120]	@ (8003c78 <UART_SetConfig+0x56c>)
 8003bfe:	61fb      	str	r3, [r7, #28]
        break;
 8003c00:	e00d      	b.n	8003c1e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c02:	f7fe fb59 	bl	80022b8 <HAL_RCC_GetSysClockFreq>
 8003c06:	61f8      	str	r0, [r7, #28]
        break;
 8003c08:	e009      	b.n	8003c1e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c0a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003c0e:	61fb      	str	r3, [r7, #28]
        break;
 8003c10:	e005      	b.n	8003c1e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003c12:	2300      	movs	r3, #0
 8003c14:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003c16:	2301      	movs	r3, #1
 8003c18:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003c1c:	bf00      	nop
    }

    if (pclk != 0U)
 8003c1e:	69fb      	ldr	r3, [r7, #28]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d019      	beq.n	8003c58 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	085a      	lsrs	r2, r3, #1
 8003c2a:	69fb      	ldr	r3, [r7, #28]
 8003c2c:	441a      	add	r2, r3
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c36:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c38:	69bb      	ldr	r3, [r7, #24]
 8003c3a:	2b0f      	cmp	r3, #15
 8003c3c:	d909      	bls.n	8003c52 <UART_SetConfig+0x546>
 8003c3e:	69bb      	ldr	r3, [r7, #24]
 8003c40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c44:	d205      	bcs.n	8003c52 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003c46:	69bb      	ldr	r3, [r7, #24]
 8003c48:	b29a      	uxth	r2, r3
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	60da      	str	r2, [r3, #12]
 8003c50:	e002      	b.n	8003c58 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003c52:	2301      	movs	r3, #1
 8003c54:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	2200      	movs	r2, #0
 8003c62:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003c64:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8003c68:	4618      	mov	r0, r3
 8003c6a:	3728      	adds	r7, #40	@ 0x28
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c72:	bf00      	nop
 8003c74:	40008000 	.word	0x40008000
 8003c78:	00f42400 	.word	0x00f42400

08003c7c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	b083      	sub	sp, #12
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c88:	f003 0308 	and.w	r3, r3, #8
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d00a      	beq.n	8003ca6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	430a      	orrs	r2, r1
 8003ca4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003caa:	f003 0301 	and.w	r3, r3, #1
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d00a      	beq.n	8003cc8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	430a      	orrs	r2, r1
 8003cc6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ccc:	f003 0302 	and.w	r3, r3, #2
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d00a      	beq.n	8003cea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	430a      	orrs	r2, r1
 8003ce8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cee:	f003 0304 	and.w	r3, r3, #4
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d00a      	beq.n	8003d0c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	430a      	orrs	r2, r1
 8003d0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d10:	f003 0310 	and.w	r3, r3, #16
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d00a      	beq.n	8003d2e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	689b      	ldr	r3, [r3, #8]
 8003d1e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	430a      	orrs	r2, r1
 8003d2c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d32:	f003 0320 	and.w	r3, r3, #32
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d00a      	beq.n	8003d50 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	689b      	ldr	r3, [r3, #8]
 8003d40:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	430a      	orrs	r2, r1
 8003d4e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d01a      	beq.n	8003d92 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	430a      	orrs	r2, r1
 8003d70:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d76:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003d7a:	d10a      	bne.n	8003d92 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	430a      	orrs	r2, r1
 8003d90:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d00a      	beq.n	8003db4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	430a      	orrs	r2, r1
 8003db2:	605a      	str	r2, [r3, #4]
  }
}
 8003db4:	bf00      	nop
 8003db6:	370c      	adds	r7, #12
 8003db8:	46bd      	mov	sp, r7
 8003dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbe:	4770      	bx	lr

08003dc0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b098      	sub	sp, #96	@ 0x60
 8003dc4:	af02      	add	r7, sp, #8
 8003dc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003dd0:	f7fd f9b0 	bl	8001134 <HAL_GetTick>
 8003dd4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f003 0308 	and.w	r3, r3, #8
 8003de0:	2b08      	cmp	r3, #8
 8003de2:	d12e      	bne.n	8003e42 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003de4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003de8:	9300      	str	r3, [sp, #0]
 8003dea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003dec:	2200      	movs	r2, #0
 8003dee:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003df2:	6878      	ldr	r0, [r7, #4]
 8003df4:	f000 f88c 	bl	8003f10 <UART_WaitOnFlagUntilTimeout>
 8003df8:	4603      	mov	r3, r0
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d021      	beq.n	8003e42 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e06:	e853 3f00 	ldrex	r3, [r3]
 8003e0a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003e0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e0e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003e12:	653b      	str	r3, [r7, #80]	@ 0x50
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	461a      	mov	r2, r3
 8003e1a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003e1c:	647b      	str	r3, [r7, #68]	@ 0x44
 8003e1e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e20:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003e22:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003e24:	e841 2300 	strex	r3, r2, [r1]
 8003e28:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003e2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d1e6      	bne.n	8003dfe <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2220      	movs	r2, #32
 8003e34:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2200      	movs	r2, #0
 8003e3a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e3e:	2303      	movs	r3, #3
 8003e40:	e062      	b.n	8003f08 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f003 0304 	and.w	r3, r3, #4
 8003e4c:	2b04      	cmp	r3, #4
 8003e4e:	d149      	bne.n	8003ee4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e50:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003e54:	9300      	str	r3, [sp, #0]
 8003e56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e58:	2200      	movs	r2, #0
 8003e5a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003e5e:	6878      	ldr	r0, [r7, #4]
 8003e60:	f000 f856 	bl	8003f10 <UART_WaitOnFlagUntilTimeout>
 8003e64:	4603      	mov	r3, r0
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d03c      	beq.n	8003ee4 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e72:	e853 3f00 	ldrex	r3, [r3]
 8003e76:	623b      	str	r3, [r7, #32]
   return(result);
 8003e78:	6a3b      	ldr	r3, [r7, #32]
 8003e7a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003e7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	461a      	mov	r2, r3
 8003e86:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003e88:	633b      	str	r3, [r7, #48]	@ 0x30
 8003e8a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e8c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003e8e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003e90:	e841 2300 	strex	r3, r2, [r1]
 8003e94:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003e96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d1e6      	bne.n	8003e6a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	3308      	adds	r3, #8
 8003ea2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ea4:	693b      	ldr	r3, [r7, #16]
 8003ea6:	e853 3f00 	ldrex	r3, [r3]
 8003eaa:	60fb      	str	r3, [r7, #12]
   return(result);
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	f023 0301 	bic.w	r3, r3, #1
 8003eb2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	3308      	adds	r3, #8
 8003eba:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003ebc:	61fa      	str	r2, [r7, #28]
 8003ebe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ec0:	69b9      	ldr	r1, [r7, #24]
 8003ec2:	69fa      	ldr	r2, [r7, #28]
 8003ec4:	e841 2300 	strex	r3, r2, [r1]
 8003ec8:	617b      	str	r3, [r7, #20]
   return(result);
 8003eca:	697b      	ldr	r3, [r7, #20]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d1e5      	bne.n	8003e9c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2220      	movs	r2, #32
 8003ed4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2200      	movs	r2, #0
 8003edc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ee0:	2303      	movs	r3, #3
 8003ee2:	e011      	b.n	8003f08 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2220      	movs	r2, #32
 8003ee8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2220      	movs	r2, #32
 8003eee:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2200      	movs	r2, #0
 8003efc:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2200      	movs	r2, #0
 8003f02:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003f06:	2300      	movs	r3, #0
}
 8003f08:	4618      	mov	r0, r3
 8003f0a:	3758      	adds	r7, #88	@ 0x58
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bd80      	pop	{r7, pc}

08003f10 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b084      	sub	sp, #16
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	60f8      	str	r0, [r7, #12]
 8003f18:	60b9      	str	r1, [r7, #8]
 8003f1a:	603b      	str	r3, [r7, #0]
 8003f1c:	4613      	mov	r3, r2
 8003f1e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f20:	e04f      	b.n	8003fc2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f22:	69bb      	ldr	r3, [r7, #24]
 8003f24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f28:	d04b      	beq.n	8003fc2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f2a:	f7fd f903 	bl	8001134 <HAL_GetTick>
 8003f2e:	4602      	mov	r2, r0
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	1ad3      	subs	r3, r2, r3
 8003f34:	69ba      	ldr	r2, [r7, #24]
 8003f36:	429a      	cmp	r2, r3
 8003f38:	d302      	bcc.n	8003f40 <UART_WaitOnFlagUntilTimeout+0x30>
 8003f3a:	69bb      	ldr	r3, [r7, #24]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d101      	bne.n	8003f44 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003f40:	2303      	movs	r3, #3
 8003f42:	e04e      	b.n	8003fe2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f003 0304 	and.w	r3, r3, #4
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d037      	beq.n	8003fc2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003f52:	68bb      	ldr	r3, [r7, #8]
 8003f54:	2b80      	cmp	r3, #128	@ 0x80
 8003f56:	d034      	beq.n	8003fc2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003f58:	68bb      	ldr	r3, [r7, #8]
 8003f5a:	2b40      	cmp	r3, #64	@ 0x40
 8003f5c:	d031      	beq.n	8003fc2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	69db      	ldr	r3, [r3, #28]
 8003f64:	f003 0308 	and.w	r3, r3, #8
 8003f68:	2b08      	cmp	r3, #8
 8003f6a:	d110      	bne.n	8003f8e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	2208      	movs	r2, #8
 8003f72:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003f74:	68f8      	ldr	r0, [r7, #12]
 8003f76:	f000 f8ff 	bl	8004178 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	2208      	movs	r2, #8
 8003f7e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	2200      	movs	r2, #0
 8003f86:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	e029      	b.n	8003fe2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	69db      	ldr	r3, [r3, #28]
 8003f94:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003f98:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003f9c:	d111      	bne.n	8003fc2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003fa6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003fa8:	68f8      	ldr	r0, [r7, #12]
 8003faa:	f000 f8e5 	bl	8004178 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	2220      	movs	r2, #32
 8003fb2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003fbe:	2303      	movs	r3, #3
 8003fc0:	e00f      	b.n	8003fe2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	69da      	ldr	r2, [r3, #28]
 8003fc8:	68bb      	ldr	r3, [r7, #8]
 8003fca:	4013      	ands	r3, r2
 8003fcc:	68ba      	ldr	r2, [r7, #8]
 8003fce:	429a      	cmp	r2, r3
 8003fd0:	bf0c      	ite	eq
 8003fd2:	2301      	moveq	r3, #1
 8003fd4:	2300      	movne	r3, #0
 8003fd6:	b2db      	uxtb	r3, r3
 8003fd8:	461a      	mov	r2, r3
 8003fda:	79fb      	ldrb	r3, [r7, #7]
 8003fdc:	429a      	cmp	r2, r3
 8003fde:	d0a0      	beq.n	8003f22 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003fe0:	2300      	movs	r3, #0
}
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	3710      	adds	r7, #16
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	bd80      	pop	{r7, pc}
	...

08003fec <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003fec:	b480      	push	{r7}
 8003fee:	b097      	sub	sp, #92	@ 0x5c
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	60f8      	str	r0, [r7, #12]
 8003ff4:	60b9      	str	r1, [r7, #8]
 8003ff6:	4613      	mov	r3, r2
 8003ff8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	68ba      	ldr	r2, [r7, #8]
 8003ffe:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	88fa      	ldrh	r2, [r7, #6]
 8004004:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	88fa      	ldrh	r2, [r7, #6]
 800400c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	2200      	movs	r2, #0
 8004014:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	689b      	ldr	r3, [r3, #8]
 800401a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800401e:	d10e      	bne.n	800403e <UART_Start_Receive_IT+0x52>
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	691b      	ldr	r3, [r3, #16]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d105      	bne.n	8004034 <UART_Start_Receive_IT+0x48>
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800402e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004032:	e02d      	b.n	8004090 <UART_Start_Receive_IT+0xa4>
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	22ff      	movs	r2, #255	@ 0xff
 8004038:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800403c:	e028      	b.n	8004090 <UART_Start_Receive_IT+0xa4>
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	689b      	ldr	r3, [r3, #8]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d10d      	bne.n	8004062 <UART_Start_Receive_IT+0x76>
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	691b      	ldr	r3, [r3, #16]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d104      	bne.n	8004058 <UART_Start_Receive_IT+0x6c>
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	22ff      	movs	r2, #255	@ 0xff
 8004052:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004056:	e01b      	b.n	8004090 <UART_Start_Receive_IT+0xa4>
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	227f      	movs	r2, #127	@ 0x7f
 800405c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004060:	e016      	b.n	8004090 <UART_Start_Receive_IT+0xa4>
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	689b      	ldr	r3, [r3, #8]
 8004066:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800406a:	d10d      	bne.n	8004088 <UART_Start_Receive_IT+0x9c>
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	691b      	ldr	r3, [r3, #16]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d104      	bne.n	800407e <UART_Start_Receive_IT+0x92>
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	227f      	movs	r2, #127	@ 0x7f
 8004078:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800407c:	e008      	b.n	8004090 <UART_Start_Receive_IT+0xa4>
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	223f      	movs	r2, #63	@ 0x3f
 8004082:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004086:	e003      	b.n	8004090 <UART_Start_Receive_IT+0xa4>
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	2200      	movs	r2, #0
 800408c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	2200      	movs	r2, #0
 8004094:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	2222      	movs	r2, #34	@ 0x22
 800409c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	3308      	adds	r3, #8
 80040a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80040aa:	e853 3f00 	ldrex	r3, [r3]
 80040ae:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80040b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040b2:	f043 0301 	orr.w	r3, r3, #1
 80040b6:	657b      	str	r3, [r7, #84]	@ 0x54
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	3308      	adds	r3, #8
 80040be:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80040c0:	64ba      	str	r2, [r7, #72]	@ 0x48
 80040c2:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040c4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80040c6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80040c8:	e841 2300 	strex	r3, r2, [r1]
 80040cc:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80040ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d1e5      	bne.n	80040a0 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	689b      	ldr	r3, [r3, #8]
 80040d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80040dc:	d107      	bne.n	80040ee <UART_Start_Receive_IT+0x102>
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	691b      	ldr	r3, [r3, #16]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d103      	bne.n	80040ee <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	4a21      	ldr	r2, [pc, #132]	@ (8004170 <UART_Start_Receive_IT+0x184>)
 80040ea:	669a      	str	r2, [r3, #104]	@ 0x68
 80040ec:	e002      	b.n	80040f4 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	4a20      	ldr	r2, [pc, #128]	@ (8004174 <UART_Start_Receive_IT+0x188>)
 80040f2:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	691b      	ldr	r3, [r3, #16]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d019      	beq.n	8004130 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004102:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004104:	e853 3f00 	ldrex	r3, [r3]
 8004108:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800410a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800410c:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8004110:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	461a      	mov	r2, r3
 8004118:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800411a:	637b      	str	r3, [r7, #52]	@ 0x34
 800411c:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800411e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004120:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004122:	e841 2300 	strex	r3, r2, [r1]
 8004126:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8004128:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800412a:	2b00      	cmp	r3, #0
 800412c:	d1e6      	bne.n	80040fc <UART_Start_Receive_IT+0x110>
 800412e:	e018      	b.n	8004162 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004136:	697b      	ldr	r3, [r7, #20]
 8004138:	e853 3f00 	ldrex	r3, [r3]
 800413c:	613b      	str	r3, [r7, #16]
   return(result);
 800413e:	693b      	ldr	r3, [r7, #16]
 8004140:	f043 0320 	orr.w	r3, r3, #32
 8004144:	653b      	str	r3, [r7, #80]	@ 0x50
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	461a      	mov	r2, r3
 800414c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800414e:	623b      	str	r3, [r7, #32]
 8004150:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004152:	69f9      	ldr	r1, [r7, #28]
 8004154:	6a3a      	ldr	r2, [r7, #32]
 8004156:	e841 2300 	strex	r3, r2, [r1]
 800415a:	61bb      	str	r3, [r7, #24]
   return(result);
 800415c:	69bb      	ldr	r3, [r7, #24]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d1e6      	bne.n	8004130 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8004162:	2300      	movs	r3, #0
}
 8004164:	4618      	mov	r0, r3
 8004166:	375c      	adds	r7, #92	@ 0x5c
 8004168:	46bd      	mov	sp, r7
 800416a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416e:	4770      	bx	lr
 8004170:	0800447d 	.word	0x0800447d
 8004174:	080042c1 	.word	0x080042c1

08004178 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004178:	b480      	push	{r7}
 800417a:	b095      	sub	sp, #84	@ 0x54
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004186:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004188:	e853 3f00 	ldrex	r3, [r3]
 800418c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800418e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004190:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004194:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	461a      	mov	r2, r3
 800419c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800419e:	643b      	str	r3, [r7, #64]	@ 0x40
 80041a0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041a2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80041a4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80041a6:	e841 2300 	strex	r3, r2, [r1]
 80041aa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80041ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d1e6      	bne.n	8004180 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	3308      	adds	r3, #8
 80041b8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041ba:	6a3b      	ldr	r3, [r7, #32]
 80041bc:	e853 3f00 	ldrex	r3, [r3]
 80041c0:	61fb      	str	r3, [r7, #28]
   return(result);
 80041c2:	69fb      	ldr	r3, [r7, #28]
 80041c4:	f023 0301 	bic.w	r3, r3, #1
 80041c8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	3308      	adds	r3, #8
 80041d0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80041d2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80041d4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041d6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80041d8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80041da:	e841 2300 	strex	r3, r2, [r1]
 80041de:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80041e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d1e5      	bne.n	80041b2 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041ea:	2b01      	cmp	r3, #1
 80041ec:	d118      	bne.n	8004220 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	e853 3f00 	ldrex	r3, [r3]
 80041fa:	60bb      	str	r3, [r7, #8]
   return(result);
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	f023 0310 	bic.w	r3, r3, #16
 8004202:	647b      	str	r3, [r7, #68]	@ 0x44
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	461a      	mov	r2, r3
 800420a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800420c:	61bb      	str	r3, [r7, #24]
 800420e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004210:	6979      	ldr	r1, [r7, #20]
 8004212:	69ba      	ldr	r2, [r7, #24]
 8004214:	e841 2300 	strex	r3, r2, [r1]
 8004218:	613b      	str	r3, [r7, #16]
   return(result);
 800421a:	693b      	ldr	r3, [r7, #16]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d1e6      	bne.n	80041ee <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2220      	movs	r2, #32
 8004224:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2200      	movs	r2, #0
 800422c:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2200      	movs	r2, #0
 8004232:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004234:	bf00      	nop
 8004236:	3754      	adds	r7, #84	@ 0x54
 8004238:	46bd      	mov	sp, r7
 800423a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423e:	4770      	bx	lr

08004240 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b084      	sub	sp, #16
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800424c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	2200      	movs	r2, #0
 8004252:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	2200      	movs	r2, #0
 800425a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800425e:	68f8      	ldr	r0, [r7, #12]
 8004260:	f7ff fa3e 	bl	80036e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004264:	bf00      	nop
 8004266:	3710      	adds	r7, #16
 8004268:	46bd      	mov	sp, r7
 800426a:	bd80      	pop	{r7, pc}

0800426c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b088      	sub	sp, #32
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	e853 3f00 	ldrex	r3, [r3]
 8004280:	60bb      	str	r3, [r7, #8]
   return(result);
 8004282:	68bb      	ldr	r3, [r7, #8]
 8004284:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004288:	61fb      	str	r3, [r7, #28]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	461a      	mov	r2, r3
 8004290:	69fb      	ldr	r3, [r7, #28]
 8004292:	61bb      	str	r3, [r7, #24]
 8004294:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004296:	6979      	ldr	r1, [r7, #20]
 8004298:	69ba      	ldr	r2, [r7, #24]
 800429a:	e841 2300 	strex	r3, r2, [r1]
 800429e:	613b      	str	r3, [r7, #16]
   return(result);
 80042a0:	693b      	ldr	r3, [r7, #16]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d1e6      	bne.n	8004274 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2220      	movs	r2, #32
 80042aa:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2200      	movs	r2, #0
 80042b0:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80042b2:	6878      	ldr	r0, [r7, #4]
 80042b4:	f7ff fa0a 	bl	80036cc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80042b8:	bf00      	nop
 80042ba:	3720      	adds	r7, #32
 80042bc:	46bd      	mov	sp, r7
 80042be:	bd80      	pop	{r7, pc}

080042c0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b09c      	sub	sp, #112	@ 0x70
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80042ce:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80042d8:	2b22      	cmp	r3, #34	@ 0x22
 80042da:	f040 80be 	bne.w	800445a <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80042e4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80042e8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80042ec:	b2d9      	uxtb	r1, r3
 80042ee:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80042f2:	b2da      	uxtb	r2, r3
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042f8:	400a      	ands	r2, r1
 80042fa:	b2d2      	uxtb	r2, r2
 80042fc:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004302:	1c5a      	adds	r2, r3, #1
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800430e:	b29b      	uxth	r3, r3
 8004310:	3b01      	subs	r3, #1
 8004312:	b29a      	uxth	r2, r3
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004320:	b29b      	uxth	r3, r3
 8004322:	2b00      	cmp	r3, #0
 8004324:	f040 80a3 	bne.w	800446e <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800432e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004330:	e853 3f00 	ldrex	r3, [r3]
 8004334:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004336:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004338:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800433c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	461a      	mov	r2, r3
 8004344:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004346:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004348:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800434a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800434c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800434e:	e841 2300 	strex	r3, r2, [r1]
 8004352:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004354:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004356:	2b00      	cmp	r3, #0
 8004358:	d1e6      	bne.n	8004328 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	3308      	adds	r3, #8
 8004360:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004362:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004364:	e853 3f00 	ldrex	r3, [r3]
 8004368:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800436a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800436c:	f023 0301 	bic.w	r3, r3, #1
 8004370:	667b      	str	r3, [r7, #100]	@ 0x64
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	3308      	adds	r3, #8
 8004378:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800437a:	647a      	str	r2, [r7, #68]	@ 0x44
 800437c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800437e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004380:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004382:	e841 2300 	strex	r3, r2, [r1]
 8004386:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004388:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800438a:	2b00      	cmp	r3, #0
 800438c:	d1e5      	bne.n	800435a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2220      	movs	r2, #32
 8004392:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2200      	movs	r2, #0
 800439a:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2200      	movs	r2, #0
 80043a0:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4a34      	ldr	r2, [pc, #208]	@ (8004478 <UART_RxISR_8BIT+0x1b8>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d01f      	beq.n	80043ec <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d018      	beq.n	80043ec <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043c2:	e853 3f00 	ldrex	r3, [r3]
 80043c6:	623b      	str	r3, [r7, #32]
   return(result);
 80043c8:	6a3b      	ldr	r3, [r7, #32]
 80043ca:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80043ce:	663b      	str	r3, [r7, #96]	@ 0x60
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	461a      	mov	r2, r3
 80043d6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80043d8:	633b      	str	r3, [r7, #48]	@ 0x30
 80043da:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043dc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80043de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80043e0:	e841 2300 	strex	r3, r2, [r1]
 80043e4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80043e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d1e6      	bne.n	80043ba <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80043f0:	2b01      	cmp	r3, #1
 80043f2:	d12e      	bne.n	8004452 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2200      	movs	r2, #0
 80043f8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004400:	693b      	ldr	r3, [r7, #16]
 8004402:	e853 3f00 	ldrex	r3, [r3]
 8004406:	60fb      	str	r3, [r7, #12]
   return(result);
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	f023 0310 	bic.w	r3, r3, #16
 800440e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	461a      	mov	r2, r3
 8004416:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004418:	61fb      	str	r3, [r7, #28]
 800441a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800441c:	69b9      	ldr	r1, [r7, #24]
 800441e:	69fa      	ldr	r2, [r7, #28]
 8004420:	e841 2300 	strex	r3, r2, [r1]
 8004424:	617b      	str	r3, [r7, #20]
   return(result);
 8004426:	697b      	ldr	r3, [r7, #20]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d1e6      	bne.n	80043fa <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	69db      	ldr	r3, [r3, #28]
 8004432:	f003 0310 	and.w	r3, r3, #16
 8004436:	2b10      	cmp	r3, #16
 8004438:	d103      	bne.n	8004442 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	2210      	movs	r2, #16
 8004440:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004448:	4619      	mov	r1, r3
 800444a:	6878      	ldr	r0, [r7, #4]
 800444c:	f7ff f952 	bl	80036f4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004450:	e00d      	b.n	800446e <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8004452:	6878      	ldr	r0, [r7, #4]
 8004454:	f7fc fbb8 	bl	8000bc8 <HAL_UART_RxCpltCallback>
}
 8004458:	e009      	b.n	800446e <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	8b1b      	ldrh	r3, [r3, #24]
 8004460:	b29a      	uxth	r2, r3
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f042 0208 	orr.w	r2, r2, #8
 800446a:	b292      	uxth	r2, r2
 800446c:	831a      	strh	r2, [r3, #24]
}
 800446e:	bf00      	nop
 8004470:	3770      	adds	r7, #112	@ 0x70
 8004472:	46bd      	mov	sp, r7
 8004474:	bd80      	pop	{r7, pc}
 8004476:	bf00      	nop
 8004478:	40008000 	.word	0x40008000

0800447c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b09c      	sub	sp, #112	@ 0x70
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800448a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004494:	2b22      	cmp	r3, #34	@ 0x22
 8004496:	f040 80be 	bne.w	8004616 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80044a0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044a8:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80044aa:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 80044ae:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80044b2:	4013      	ands	r3, r2
 80044b4:	b29a      	uxth	r2, r3
 80044b6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80044b8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044be:	1c9a      	adds	r2, r3, #2
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80044ca:	b29b      	uxth	r3, r3
 80044cc:	3b01      	subs	r3, #1
 80044ce:	b29a      	uxth	r2, r3
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80044dc:	b29b      	uxth	r3, r3
 80044de:	2b00      	cmp	r3, #0
 80044e0:	f040 80a3 	bne.w	800462a <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80044ec:	e853 3f00 	ldrex	r3, [r3]
 80044f0:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80044f2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80044f4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80044f8:	667b      	str	r3, [r7, #100]	@ 0x64
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	461a      	mov	r2, r3
 8004500:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004502:	657b      	str	r3, [r7, #84]	@ 0x54
 8004504:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004506:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004508:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800450a:	e841 2300 	strex	r3, r2, [r1]
 800450e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8004510:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004512:	2b00      	cmp	r3, #0
 8004514:	d1e6      	bne.n	80044e4 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	3308      	adds	r3, #8
 800451c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800451e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004520:	e853 3f00 	ldrex	r3, [r3]
 8004524:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004526:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004528:	f023 0301 	bic.w	r3, r3, #1
 800452c:	663b      	str	r3, [r7, #96]	@ 0x60
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	3308      	adds	r3, #8
 8004534:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004536:	643a      	str	r2, [r7, #64]	@ 0x40
 8004538:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800453a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800453c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800453e:	e841 2300 	strex	r3, r2, [r1]
 8004542:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004544:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004546:	2b00      	cmp	r3, #0
 8004548:	d1e5      	bne.n	8004516 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2220      	movs	r2, #32
 800454e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2200      	movs	r2, #0
 8004556:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2200      	movs	r2, #0
 800455c:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	4a34      	ldr	r2, [pc, #208]	@ (8004634 <UART_RxISR_16BIT+0x1b8>)
 8004564:	4293      	cmp	r3, r2
 8004566:	d01f      	beq.n	80045a8 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004572:	2b00      	cmp	r3, #0
 8004574:	d018      	beq.n	80045a8 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800457c:	6a3b      	ldr	r3, [r7, #32]
 800457e:	e853 3f00 	ldrex	r3, [r3]
 8004582:	61fb      	str	r3, [r7, #28]
   return(result);
 8004584:	69fb      	ldr	r3, [r7, #28]
 8004586:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800458a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	461a      	mov	r2, r3
 8004592:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004594:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004596:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004598:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800459a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800459c:	e841 2300 	strex	r3, r2, [r1]
 80045a0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80045a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d1e6      	bne.n	8004576 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80045ac:	2b01      	cmp	r3, #1
 80045ae:	d12e      	bne.n	800460e <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2200      	movs	r2, #0
 80045b4:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	e853 3f00 	ldrex	r3, [r3]
 80045c2:	60bb      	str	r3, [r7, #8]
   return(result);
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	f023 0310 	bic.w	r3, r3, #16
 80045ca:	65bb      	str	r3, [r7, #88]	@ 0x58
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	461a      	mov	r2, r3
 80045d2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80045d4:	61bb      	str	r3, [r7, #24]
 80045d6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045d8:	6979      	ldr	r1, [r7, #20]
 80045da:	69ba      	ldr	r2, [r7, #24]
 80045dc:	e841 2300 	strex	r3, r2, [r1]
 80045e0:	613b      	str	r3, [r7, #16]
   return(result);
 80045e2:	693b      	ldr	r3, [r7, #16]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d1e6      	bne.n	80045b6 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	69db      	ldr	r3, [r3, #28]
 80045ee:	f003 0310 	and.w	r3, r3, #16
 80045f2:	2b10      	cmp	r3, #16
 80045f4:	d103      	bne.n	80045fe <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	2210      	movs	r2, #16
 80045fc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004604:	4619      	mov	r1, r3
 8004606:	6878      	ldr	r0, [r7, #4]
 8004608:	f7ff f874 	bl	80036f4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800460c:	e00d      	b.n	800462a <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 800460e:	6878      	ldr	r0, [r7, #4]
 8004610:	f7fc fada 	bl	8000bc8 <HAL_UART_RxCpltCallback>
}
 8004614:	e009      	b.n	800462a <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	8b1b      	ldrh	r3, [r3, #24]
 800461c:	b29a      	uxth	r2, r3
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f042 0208 	orr.w	r2, r2, #8
 8004626:	b292      	uxth	r2, r2
 8004628:	831a      	strh	r2, [r3, #24]
}
 800462a:	bf00      	nop
 800462c:	3770      	adds	r7, #112	@ 0x70
 800462e:	46bd      	mov	sp, r7
 8004630:	bd80      	pop	{r7, pc}
 8004632:	bf00      	nop
 8004634:	40008000 	.word	0x40008000

08004638 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004638:	b480      	push	{r7}
 800463a:	b083      	sub	sp, #12
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004640:	bf00      	nop
 8004642:	370c      	adds	r7, #12
 8004644:	46bd      	mov	sp, r7
 8004646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464a:	4770      	bx	lr

0800464c <memset>:
 800464c:	4402      	add	r2, r0
 800464e:	4603      	mov	r3, r0
 8004650:	4293      	cmp	r3, r2
 8004652:	d100      	bne.n	8004656 <memset+0xa>
 8004654:	4770      	bx	lr
 8004656:	f803 1b01 	strb.w	r1, [r3], #1
 800465a:	e7f9      	b.n	8004650 <memset+0x4>

0800465c <__libc_init_array>:
 800465c:	b570      	push	{r4, r5, r6, lr}
 800465e:	4d0d      	ldr	r5, [pc, #52]	@ (8004694 <__libc_init_array+0x38>)
 8004660:	4c0d      	ldr	r4, [pc, #52]	@ (8004698 <__libc_init_array+0x3c>)
 8004662:	1b64      	subs	r4, r4, r5
 8004664:	10a4      	asrs	r4, r4, #2
 8004666:	2600      	movs	r6, #0
 8004668:	42a6      	cmp	r6, r4
 800466a:	d109      	bne.n	8004680 <__libc_init_array+0x24>
 800466c:	4d0b      	ldr	r5, [pc, #44]	@ (800469c <__libc_init_array+0x40>)
 800466e:	4c0c      	ldr	r4, [pc, #48]	@ (80046a0 <__libc_init_array+0x44>)
 8004670:	f000 f826 	bl	80046c0 <_init>
 8004674:	1b64      	subs	r4, r4, r5
 8004676:	10a4      	asrs	r4, r4, #2
 8004678:	2600      	movs	r6, #0
 800467a:	42a6      	cmp	r6, r4
 800467c:	d105      	bne.n	800468a <__libc_init_array+0x2e>
 800467e:	bd70      	pop	{r4, r5, r6, pc}
 8004680:	f855 3b04 	ldr.w	r3, [r5], #4
 8004684:	4798      	blx	r3
 8004686:	3601      	adds	r6, #1
 8004688:	e7ee      	b.n	8004668 <__libc_init_array+0xc>
 800468a:	f855 3b04 	ldr.w	r3, [r5], #4
 800468e:	4798      	blx	r3
 8004690:	3601      	adds	r6, #1
 8004692:	e7f2      	b.n	800467a <__libc_init_array+0x1e>
 8004694:	08004728 	.word	0x08004728
 8004698:	08004728 	.word	0x08004728
 800469c:	08004728 	.word	0x08004728
 80046a0:	0800472c 	.word	0x0800472c

080046a4 <memcpy>:
 80046a4:	440a      	add	r2, r1
 80046a6:	4291      	cmp	r1, r2
 80046a8:	f100 33ff 	add.w	r3, r0, #4294967295
 80046ac:	d100      	bne.n	80046b0 <memcpy+0xc>
 80046ae:	4770      	bx	lr
 80046b0:	b510      	push	{r4, lr}
 80046b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80046b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80046ba:	4291      	cmp	r1, r2
 80046bc:	d1f9      	bne.n	80046b2 <memcpy+0xe>
 80046be:	bd10      	pop	{r4, pc}

080046c0 <_init>:
 80046c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046c2:	bf00      	nop
 80046c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046c6:	bc08      	pop	{r3}
 80046c8:	469e      	mov	lr, r3
 80046ca:	4770      	bx	lr

080046cc <_fini>:
 80046cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046ce:	bf00      	nop
 80046d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046d2:	bc08      	pop	{r3}
 80046d4:	469e      	mov	lr, r3
 80046d6:	4770      	bx	lr
